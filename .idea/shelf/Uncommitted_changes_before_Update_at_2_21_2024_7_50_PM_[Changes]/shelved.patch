Index: core/src/com/sab/littleh/game/entity/player/powerups/Powerup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.entity.player.powerups;\r\n\r\nimport com.badlogic.gdx.math.MathUtils;\r\nimport com.badlogic.gdx.math.Rectangle;\r\nimport com.sab.littleh.controls.Controls;\r\nimport com.sab.littleh.controls.ControlInput;\r\nimport com.sab.littleh.game.entity.Particle;\r\nimport com.sab.littleh.game.entity.enemy.Enemy;\r\nimport com.sab.littleh.game.entity.player.Player;\r\nimport com.sab.littleh.game.level.Level;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.net.NetPlayer;\r\nimport com.sab.littleh.settings.Settings;\r\nimport com.sab.littleh.util.*;\r\n\r\npublic class Powerup {\r\n    protected Player player;\r\n    protected boolean noGravity;\r\n    protected boolean swappedGravityThisFrame;\r\n\r\n    public Powerup(Player player) {\r\n        this.player = player;\r\n        init(player);\r\n    }\r\n\r\n    public void init(Player player) {\r\n        player.image = \"player/h\";\r\n        if (!(player instanceof NetPlayer))\r\n            Cursors.switchCursor(\"none\");\r\n    }\r\n\r\n    public void jump(Level game) {\r\n        if (player.touchingWater) {\r\n            if (player.controller.isJustPressed(Controls.JUMP) || (Settings.localSettings.upEqualsJump.value && player.controller.isPressed(Controls.UP))) {\r\n                player.velocityY = 14 * -player.getGravityMagnitude();\r\n                SoundEngine.playSound(\"swim.ogg\");\r\n            }\r\n            return;\r\n        }\r\n        if (player.crushed) return;\r\n        if (player.leftGroundFor < 6) {\r\n            SoundEngine.playSound(\"jump.ogg\");\r\n            player.velocityY = 8 * -player.getGravityMagnitude();\r\n            player.leftGroundFor = 8;\r\n            player.jumpStrength++;\r\n            game.addParticle(new Particle(player.x - 24, player.getFeetY() - (player.flippedGravity ? 8 : 0), 0f, 0f, 96, 16, 12, 2, 1, 0f, 0f, 0, 2, \"particles/jump.png\", 9));\r\n            onJump(false);\r\n        } else if (player.jumpReleased && player.leftWallFor < 6) {\r\n            SoundEngine.playSound(\"double_jump.ogg\");\r\n            player.velocityY = 26 * -player.getGravityMagnitude();\r\n            player.leftWallFor = 6;\r\n            player.x += -2 * player.wallDirection;\r\n            player.velocityX = -16 * player.wallDirection;\r\n            if (18 > player.maxGroundSpeed) {\r\n                player.maxGroundSpeed = 18;\r\n            }\r\n        } else if (player.jumpReleased && player.doubleJump && (player.bonusDoubleJump || game.mapData.getValue(\"double_jumping\").asBool())) {\r\n            game.addParticle(new Particle(player.x, player.getFeetY() - (player.flippedGravity ? 8 : 0), 0f, 0f, 48, 32, 6, 4, 1, 0f, 0f, 0, 2, \"particles/double_jump.png\", 9));\r\n            SoundEngine.playSound(\"double_jump.ogg\");\r\n            if (player.fallingFasterThan(16)) player.coolRoll = (float) (Math.PI * 3);\r\n            if (player.fallingFasterThan(-25)) player.velocityY = 25 * -player.getGravityMagnitude();\r\n            else player.velocityY += 14f * -player.getGravityMagnitude();\r\n            player.doubleJump = false;\r\n            onJump(true);\r\n        }\r\n    }\r\n\r\n    public void onJump(boolean airJump) {\r\n\r\n    }\r\n\r\n    public void update(Level game) {\r\n        if (!player.jumpReleased && (player.controller.isPressed(Controls.JUMP) || (Settings.localSettings.upEqualsJump.value && player.controller.isPressed(Controls.UP))) && player.jumpStrength > 0 && player.jumpStrength < 8 || player.jumpStrength > 0 && player.jumpStrength < 5) {\r\n            player.jumpStrength++;\r\n            player.velocityY += 3.5f * -player.getGravityMagnitude();\r\n        } else {\r\n            player.jumpStrength = 0;\r\n        }\r\n        if (player.touchingGround) {\r\n            player.leftGroundFor = 0;\r\n//            if (game.mapSettings[Level.ALLOW_AIR_JUMP]) doubleJump = true;\r\n            player.doubleJump = true;\r\n            if (player.controller.isPressed(Controls.LEFT) ^ player.controller.isPressed(Controls.RIGHT)) {\r\n                player.currentAnimation = player.runAnimation;\r\n            } else {\r\n                player.currentAnimation = player.idleAnimation;\r\n            }\r\n            if (player.crouched) {\r\n                if (Math.abs(player.velocityX) > 2f) {\r\n                    player.currentAnimation = player.slideAnimation;\r\n                } else {\r\n                    player.currentAnimation = player.crouchAnimation;\r\n                }\r\n            }\r\n        } else {\r\n            player.leftGroundFor++;\r\n            if (player.falling()) {\r\n                player.currentAnimation = player.fallAnimation;\r\n            } else {\r\n                player.currentAnimation = player.jumpAnimation;\r\n            }\r\n            if (player.touchingWall) {\r\n                if (player.falling()) {\r\n                    if (!player.slippery) player.velocityY *= 0.85f;\r\n                    player.currentAnimation = player.wallSlideAnimation;\r\n                }\r\n                player.doubleJump = true;\r\n                player.leftWallFor = 0;\r\n                player.wallDirection = player.direction;\r\n            } else {\r\n                player.leftWallFor++;\r\n            }\r\n        }\r\n\r\n        player.coolRoll *= 0.85f;\r\n        if (player.coolRoll > 0.025f) player.coolRoll -= 0.025f;\r\n        if (Math.abs(player.velocityX) < 2f) player.coolRoll = 0;\r\n\r\n        if (player.controller.isPressed(Controls.JUMP) || (Settings.localSettings.upEqualsJump.value && player.controller.isPressed(Controls.UP))) {\r\n            player.jump(game);\r\n            player.jumpReleased = false;\r\n        } else {\r\n            player.jumpReleased = true;\r\n        }\r\n        if (!player.crouched) {\r\n            move();\r\n        }\r\n        swappedGravityThisFrame = false;\r\n    }\r\n\r\n    public void move() {\r\n        if (player.controller.isPressed(Controls.LEFT)) {\r\n            if (!player.touchingWall) player.direction = -1;\r\n            player.velocityX -= 1.2f * (player.touchingWater ? 0.5f : 1);\r\n        }\r\n\r\n        if (player.controller.isPressed(Controls.RIGHT)) {\r\n            if (!player.touchingWall) player.direction = 1;\r\n            player.velocityX += 1.2f * (player.touchingWater ? 0.5f : 1);\r\n        }\r\n    }\r\n\r\n    public void onCollision(boolean horizontal, boolean vertical) {\r\n        if (horizontal) {\r\n            player.velocityX = 0;\r\n        }\r\n        if (vertical) {\r\n            if (player.fallingFasterThan(32)) {\r\n                SoundEngine.playSound(\"hit.ogg\");\r\n                player.coolRoll = (float) (Math.PI * 4);\r\n            }\r\n            player.velocityY = 0;\r\n        }\r\n    }\r\n\r\n    public void touchingTile(Tile tile) {\r\n        if (!swappedGravityThisFrame && tile.hasTag(\"gravity_swapper\")) {\r\n            boolean flip = true;\r\n            for (Tile other : player.lastTouchedTiles) {\r\n                if (other.tileType == tile.tileType && other.hasTag(\"gravity_swapper\") && other.tileType % 2 == 1 && other.tileType == tile.tileType) {\r\n                    flip = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (flip) {\r\n                if (!player.flippedGravity && tile.tileType / 2 == 0) {\r\n                    swappedGravityThisFrame = true;\r\n                    player.flippedGravity = true;\r\n                    SoundEngine.playSound(\"gravity_swap.ogg\");\r\n                } else if (player.flippedGravity && tile.tileType / 2 == 1) {\r\n                    swappedGravityThisFrame = true;\r\n                    player.flippedGravity = false;\r\n                    SoundEngine.playSound(\"gravity_swap.ogg\");\r\n                } else if (tile.tileType / 2 == 2) {\r\n                    swappedGravityThisFrame = true;\r\n                    player.flippedGravity = !player.flippedGravity;\r\n                    SoundEngine.playSound(\"gravity_swap.ogg\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void updateVelocity() {\r\n        if (player.touchingWater) {\r\n            player.velocityX *= 0.94f;\r\n            player.velocityY *= 0.94f;\r\n            player.velocityY += 0.3f * player.getGravityMagnitude();\r\n            return;\r\n        }\r\n        if (player.leftGroundFor < 4) {\r\n            player.maxGroundSpeed = Math.abs(player.velocityX);\r\n        }\r\n        if (!(player.slippery && player.crouched)) {\r\n            if (player.touchingGround || player.maxGroundSpeed < Math.abs(player.velocityX)) {\r\n                player.velocityX *= 0.92f;\r\n            } else {\r\n                player.velocityX *= 0.95f;\r\n            }\r\n        } else {\r\n            player.velocityX *= 0.98f;\r\n        }\r\n        player.velocityY *= 0.98f;\r\n        if (!noGravity)\r\n            player.velocityY += 1.2f * player.getGravityMagnitude();\r\n\r\n        if (player.touchingGround && player.controller.isPressed(Controls.RIGHT) == player.controller.isPressed(Controls.LEFT)) {\r\n            if (!player.slippery && !player.crouched) player.velocityX *= 0.5f;\r\n        }\r\n    }\r\n\r\n    public void preDrawPlayer(Graphics g, Level game) {\r\n        player.rotation = player.velocityX * (player.touchingGround ? 1f / 96f : 1f / 128f) * (-player.velocityY / 16f + 1f);\r\n        player.rotation -= player.coolRoll * player.direction;\r\n        if (player.crouched || player.win) player.rotation = 0;\r\n    }\r\n\r\n    public void drawPlayer(Graphics g, Level game) {\r\n        g.setColor(Images.getHColor());\r\n\r\n        g.drawImage(Images.getImage(player.image + \"_color.png\"), new Rectangle(player.x - 8, player.y - (player.flippedGravity ? 16 : 0), 64, 64),\r\n                new Rectangle((player.direction == 1 ? 0 : 8), 8 * player.frame + (player.flippedGravity ? 8 : 0), (player.direction == 1 ? 8 : -8), player.flippedGravity ? -8 : 8),\r\n                -MathUtils.radiansToDegrees * player.rotation);\r\n        g.resetColor();\r\n\r\n        g.drawImage(Images.getImage(player.image + \".png\"), new Rectangle(player.x - 8, player.y - (player.flippedGravity ? 16 : 0), 64, 64),\r\n                new Rectangle((player.direction == 1 ? 0 : 8), 8 * player.frame + (player.flippedGravity ? 8 : 0), (player.direction == 1 ? 8 : -8), player.flippedGravity ? -8 : 8),\r\n                -MathUtils.radiansToDegrees * player.rotation);\r\n    }\r\n\r\n    public void touchingEnemy(Enemy enemy) {\r\n        player.kill();\r\n    }\r\n\r\n    public boolean onCollide(Level game, Rectangle entityHitbox, Rectangle tileHitbox, Tile tile, boolean yCollision) {\r\n        if (tile.hasTag(\"key_box\")) {\r\n            if (tile.hasTag(\"evil\")) {\r\n                if (player.hasEvilKey) {\r\n                    player.hasEvilKey = false;\r\n                    for (int i = 0; i < 4; i++) {\r\n                        game.addParticle(new Particle(tileHitbox.x + tileHitbox.width / 2 - 16, tileHitbox.y + tileHitbox.height / 2 - 16, (float) ((Math.random() - 0.5) * -20), (float) (Math.random() * -10), 32, 32, 4, 4, 1, 0.98f, 0f, i, 0, \"particles/evil_key_box_rubble.png\", 30));\r\n                    }\r\n                    SoundEngine.playSound(\"hit.ogg\");\r\n                    game.inGameRemoveTile(tile);\r\n                    return false;\r\n                }\r\n            } else if (player.keyCount > 0) {\r\n                player.keyCount--;\r\n                for (int i = 0; i < 4; i++) {\r\n                    game.addParticle(new Particle(tileHitbox.x + tileHitbox.width / 2 - 16, tileHitbox.y + tileHitbox.height / 2 - 16, (float) ((Math.random() - 0.5) * -8), (float) (Math.random() * -10), 32, 32, 4, 4, 1, 0.98f, 1.2f, i, 0, \"particles/key_box_rubble.png\", 30));\r\n                }\r\n                SoundEngine.playSound(\"hit.ogg\");\r\n                game.inGameRemoveTile(tile);\r\n                return false;\r\n            }\r\n        }\r\n        if (tile.hasTag(\"slippery\")) {\r\n            player.slippery = true;\r\n        }\r\n        if (yCollision) {\r\n            if (player.falling()) {\r\n                player.touchingGround = true;\r\n            }\r\n            if (tile.hasTag(\"slippery\")) {\r\n                player.slippery = true;\r\n            }\r\n        } else {\r\n            if (game.mapData.getValue(\"wall_sliding\").asBool() && !tile.hasTag(\"slick\")) {\r\n                player.touchingWall = true;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/entity/player/powerups/Powerup.java b/core/src/com/sab/littleh/game/entity/player/powerups/Powerup.java
--- a/core/src/com/sab/littleh/game/entity/player/powerups/Powerup.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/entity/player/powerups/Powerup.java	(date 1708573501550)
@@ -234,8 +234,8 @@
     public boolean onCollide(Level game, Rectangle entityHitbox, Rectangle tileHitbox, Tile tile, boolean yCollision) {
         if (tile.hasTag("key_box")) {
             if (tile.hasTag("evil")) {
-                if (player.hasEvilKey) {
-                    player.hasEvilKey = false;
+                if (player.evilKeys.size() > 0) {
+                    player.evilKeys.remove(0);
                     for (int i = 0; i < 4; i++) {
                         game.addParticle(new Particle(tileHitbox.x + tileHitbox.width / 2 - 16, tileHitbox.y + tileHitbox.height / 2 - 16, (float) ((Math.random() - 0.5) * -20), (float) (Math.random() * -10), 32, 32, 4, 4, 1, 0.98f, 0f, i, 0, "particles/evil_key_box_rubble.png", 30));
                     }
Index: core/src/com/sab/littleh/game/tile/TileTags.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.tile;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class TileTags {\r\n    private boolean modified;\r\n    private Map<String, String> tags;\r\n\r\n    public TileTags() {\r\n        tags = new HashMap<>();\r\n    }\r\n\r\n    public TileTags(TileTags tags) {\r\n       this.tags = tags.tags;\r\n    }\r\n\r\n    public boolean hasTag(String tag) {\r\n        return tags.containsKey(tag);\r\n    }\r\n\r\n    public String getTag(String tag) {\r\n        return tags.get(tag);\r\n    }\r\n\r\n    public void addTag(String tag) {\r\n        modified = true;\r\n        tags = new HashMap<>(tags);\r\n        tags.put(tag, null);\r\n    }\r\n\r\n    public String[] getTags() {\r\n        return tags.keySet().toArray(new String[0]);\r\n    }\r\n\r\n    public void addTag(String tag, String value) {\r\n        tags.put(tag, value);\r\n    }\r\n\r\n    public void removeTag(String tag) {\r\n        modified = true;\r\n        tags = new HashMap<>(tags);\r\n        tags.remove(tag);\r\n    }\r\n\r\n    public boolean isModified() {\r\n        return modified;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/tile/TileTags.java b/core/src/com/sab/littleh/game/tile/TileTags.java
--- a/core/src/com/sab/littleh/game/tile/TileTags.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/tile/TileTags.java	(date 1708573199087)
@@ -1,7 +1,9 @@
 package com.sab.littleh.game.tile;
 
+import java.security.Key;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Set;
 
 public class TileTags {
     private boolean modified;
@@ -46,4 +48,30 @@
     public boolean isModified() {
         return modified;
     }
+
+    @Override
+    public int hashCode() {
+        int i = 0;
+        for (String key : tags.keySet()) {
+            i += key.hashCode();
+            i += tags.get(key) == null ? -1 : tags.get(key).hashCode();
+        }
+        return i;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o instanceof TileTags) {
+            TileTags other = (TileTags) o;
+            Set<String> keySet = other.tags.keySet();
+            if (tags.keySet().equals(keySet)) {
+                for (String key : keySet) {
+                    if (!tags.get(key).equals(other.tags.get(key)))
+                        return false;
+                }
+                return true;
+            }
+        }
+        return false;
+    }
 }
Index: core/src/com/sab/littleh/game/tile/Tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.tile;\r\n\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.graphics.Pixmap;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.graphics.g2d.TextureRegion;\r\nimport com.badlogic.gdx.math.MathUtils;\r\nimport com.badlogic.gdx.math.Rectangle;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.game.entity.Particle;\r\nimport com.sab.littleh.game.entity.enemy.Enemy;\r\nimport com.sab.littleh.game.level.Level;\r\nimport com.sab.littleh.game.level.LevelLoader;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.Images;\r\nimport org.w3c.dom.Text;\r\n\r\nimport java.util.*;\r\n\r\npublic class Tile {\r\n    public static final Rectangle drawRect = new Rectangle(0, 0, 8, 8);\r\n    // Store position for efficiency both in-game and for saving files\r\n    public int x;\r\n    public int y;\r\n    // An image identifier used to find the image\r\n    public String image;\r\n    public String extra;\r\n    // Byte to save RAM, it should never be bigger than 63 in reality otherwise other things would break first\r\n    public byte tileType;\r\n    // Tells the tile if it's a tileset or a bunch of individual images\r\n    public boolean ignoreTiling;\r\n    private Rectangle cachedDrawRect;\r\n    private Object arbDat;\r\n    // Set because we only use it to check if one is present\r\n    public TileTags tags;\r\n\r\n    private Tile(int x, int y, String image, int tileType, TileTags tags, String extra, boolean ignoreTiling, Rectangle drawRect) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.image = image;\r\n        // Very important to create a new TileTags, not just reference the argument\r\n        this.tags = new TileTags(tags);\r\n        if (extra != null)\r\n            this.extra = extra.trim();\r\n        this.tileType = (byte) tileType;\r\n        this.ignoreTiling = ignoreTiling;\r\n        this.cachedDrawRect = drawRect;\r\n    }\r\n\r\n    private Tile(int x, int y, String image, int tileType, TileTags tags, String extra) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.image = image;\r\n        this.tags = new TileTags(tags);\r\n        if (extra != null)\r\n            this.extra = extra.trim();\r\n        setTileType(tileType);\r\n    }\r\n\r\n    public Tile(int x, int y, String image, int tileType, String tags, String extra) {\r\n        this(x, y, image, tileType, tags.split(\",\"), extra);\r\n    }\r\n\r\n    public Tile(int x, int y, String image, int tileType, String[] tags, String extra) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.image = image;\r\n        this.tags = new TileTags();\r\n        for (String string : tags) {\r\n            this.tags.addTag(string);\r\n        }\r\n        if (extra != null)\r\n            this.extra = extra.trim();\r\n        setTileType(tileType);\r\n    }\r\n\r\n    public Tile(int x, int y, String image, int tileType, String[] tags) {\r\n        this(x, y, image, tileType, tags, \"\");\r\n    }\r\n\r\n    public Tile(int x, int y, String image, int tileType, String tags) {\r\n        this(x, y, image, tileType, tags, \"\");\r\n    }\r\n\r\n    public Tile(int x, int y, String image, int tileType) {\r\n        this(x, y, image, tileType, \"\");\r\n    }\r\n\r\n    public Tile(String image, int tileType) {\r\n        this(0, 0, image, tileType);\r\n    }\r\n\r\n    public Tile(String image, String[] tags) {\r\n        this(0, 0, image, 0, tags, \"\");\r\n    }\r\n\r\n    public Tile(String image) {\r\n        this.image = image;\r\n        setTags();\r\n        if (!image.equals(\"delete\"))\r\n            setTileType(0);\r\n    }\r\n\r\n    public static boolean imagesEqual(Tile tileAt, Tile newTile) {\r\n        return tileAt != null && newTile != null && tileAt.image.equals(newTile.image);\r\n    }\r\n\r\n    public static boolean extrasEqual(Tile tile, Tile other) {\r\n        return tile == null && other == null || tile != null && tile.extrasEqual(other);\r\n    }\r\n\r\n    public void setTags() {\r\n        String identifier = image;\r\n        if (!image.startsWith(\".\"))\r\n            identifier = image.substring(image.lastIndexOf(\"/\") + 1);\r\n        if (LevelLoader.tagsByTile.getValue(identifier) == null)\r\n            return;\r\n        setTags(LevelLoader.tagsByTile.getValue(identifier).asStringArray());\r\n    }\r\n\r\n    public void setTags(String[] tags) {\r\n        if (tags == null) return;\r\n        for (String tag: tags) {\r\n            this.tags.addTag(tag);\r\n        }\r\n    }\r\n\r\n    public boolean tileEquals(Tile other) {\r\n        return other != null && image.equals(other.image) && (tileType == other.tileType || !ignoreTiling) && extrasEqual(other);\r\n    }\r\n\r\n    public boolean extrasEqual(Tile other) {\r\n        return extra == null && (other != null && other.extra == null) || extra != null && (other != null && extra.equals(other.extra));\r\n    }\r\n\r\n    public static boolean tilesEqual(Tile tile, Tile other) {\r\n        return tile == null && other == null || tile != null && tile.tileEquals(other);\r\n    }\r\n\r\n    public boolean isSolid() {\r\n        if (hasTag(\"coin_box\") || hasTag(\"enemy_box\")) return tileType % 2 == 0;\r\n        return hasTag(\"solid\");\r\n    }\r\n\r\n    public int getOrientation() {\r\n        if (tileType == 0) return (x + y / 2) % 4;\r\n        return tileType / 15 % 4;\r\n    }\r\n\r\n    public void setTileType(int tileType) {\r\n        if (hasTag(\"tileset\")) {\r\n            this.tileType = (byte) tileType;\r\n        } else {\r\n            ignoreTiling = true;\r\n            this.tileType = (byte) tileType;\r\n            updateDrawSection();\r\n            return;\r\n        }\r\n        ignoreTiling = false;\r\n        updateDrawSection();\r\n    }\r\n\r\n    public void updateDrawSection() {\r\n        int localType = tileType % (hasTag(\"tileset\") ? 15 : 16);\r\n        int column = localType % 4;\r\n        int row = localType / 4;\r\n        Rectangle region = new Rectangle(column * 8, row * 8, 8, 8);\r\n        cacheDrawRect(region);\r\n    }\r\n\r\n    public void cacheDrawRect(Rectangle rectangle) {\r\n        cachedDrawRect = rectangle;\r\n    }\r\n\r\n    public Rectangle getDrawSection() {\r\n        return cachedDrawRect;\r\n    }\r\n\r\n    public int getPropertyCount() {\r\n        if (hasTag(\"states\")) {\r\n            return Integer.parseInt(tags.getTag(\"states\"));\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public int getPropertyIndex() {\r\n        if (hasTag(\"states\")) {\r\n            return tileType;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /*\r\n    public void notify(Level game, String broadcastTag, int[] data) {\r\n        switch (broadcastTag) {\r\n            case \"notify_all_coins\" : {\r\n                if (tileType / 2 == data[0] && hasTag(\"coin_box\")) {\r\n                    cycleProperties(tileType % 2 == 0);\r\n                }\r\n                break;\r\n            }\r\n            case \"notify_collect_checkpoint\" : {\r\n                if (hasTag(\"notified_reset_checkpoint\") && hasTag(\"used\")) {\r\n                    removeTag(\"used\");\r\n                    image = \"tiles/strong_checkpoint\";\r\n                }\r\n                break;\r\n            }\r\n            case \"notify_update\" : {\r\n                if (hasTag(\"notified_spawn_enemy\")) {\r\n                    game.createEnemy(this);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n     */\r\n\r\n    public String getImageString() {\r\n        if (ignoreTiling) return image + \".png\";\r\n        return image + \"_rotation_\" + getOrientation() + \".png\";\r\n    }\r\n\r\n    public Texture getImage() {\r\n        return Images.getImage(getImageString());\r\n    }\r\n\r\n    public void render(boolean playerExists, Graphics g) {\r\n        if (hasTag(\"invisible\") && playerExists) {\r\n            return;\r\n        }\r\n        if (hasTag(\"render_color\"))\r\n            g.setColor(extra == null ? Color.WHITE : Color.valueOf(\"#\" + extra.toUpperCase().trim()));\r\n        g.drawImage(getImage(), x * 64, y * 64, 64, 64, getDrawSection());\r\n        g.resetColor();\r\n    }\r\n\r\n    public Rectangle toRectangle() {\r\n        Rectangle tileHitbox = new Rectangle(x * 64, y * 64, 64, 64);\r\n        if (hasTag(\"half\")) {\r\n            switch (tileType) {\r\n                case 2 :\r\n                    tileHitbox.height = 32;\r\n                    tileHitbox.y += 32;\r\n                    break;\r\n                case 1 :\r\n                    tileHitbox.width = 32;\r\n                    break;\r\n                case 0 :\r\n                    tileHitbox.height = 32;\r\n                    break;\r\n                case 3 :\r\n                    tileHitbox.width = 32;\r\n                    tileHitbox.x += 32;\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n        } else if (hasTag(\"quarter\")) {\r\n            switch (tileType) {\r\n                case 2 :\r\n                    tileHitbox.height = 16;\r\n                    tileHitbox.y += 48;\r\n                    break;\r\n                case 1 :\r\n                    tileHitbox.width = 16;\r\n                    break;\r\n                case 0 :\r\n                    tileHitbox.height = 16;\r\n                    break;\r\n                case 3 :\r\n                    tileHitbox.width = 16;\r\n                    tileHitbox.x += 48;\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n        } else if (hasTag(\"small\")) {\r\n            tileHitbox.x += 8;\r\n            tileHitbox.y += 8;\r\n            tileHitbox.width -= 16;\r\n            tileHitbox.height -= 16;\r\n        }\r\n\r\n        return tileHitbox;\r\n    }\r\n\r\n    public void toRectangles(List<Rectangle> hitboxes) {\r\n        if (!hasTag(\"multi_hitbox\")) {\r\n            hitboxes.add(toRectangle());\r\n            return;\r\n        }\r\n        Rectangle tileHitbox = new Rectangle(x * 64, y * 64, 64, 64);\r\n        if (hasTag(\"small_triangle\")) {\r\n            switch (tileType) {\r\n                case 0 :\r\n                    tileHitbox.height = 8;\r\n                    hitboxes.add(tileHitbox);\r\n                    tileHitbox = new Rectangle(x * 64, y * 64, 64, 64);\r\n                    tileHitbox.height = 32;\r\n                    tileHitbox.width = 16;\r\n                    tileHitbox.x += 16;\r\n                    hitboxes.add(tileHitbox);\r\n                    break;\r\n                case 3 :\r\n                    tileHitbox.width = 8;\r\n                    tileHitbox.x += 56;\r\n                    hitboxes.add(tileHitbox);\r\n                    tileHitbox = new Rectangle(x * 64, y * 64, 64, 64);\r\n                    tileHitbox.width = 32;\r\n                    tileHitbox.x += 32;\r\n                    tileHitbox.height = 16;\r\n                    tileHitbox.y += 16;\r\n                    hitboxes.add(tileHitbox);\r\n                    break;\r\n                case 2 :\r\n                    tileHitbox.height = 8;\r\n                    tileHitbox.y += 56;\r\n                    hitboxes.add(tileHitbox);\r\n                    tileHitbox = new Rectangle(x * 64, y * 64, 64, 64);\r\n                    tileHitbox.height = 32;\r\n                    tileHitbox.y += 32;\r\n                    tileHitbox.width = 16;\r\n                    tileHitbox.x += 16;\r\n                    hitboxes.add(tileHitbox);\r\n                    break;\r\n                case 1 :\r\n                    tileHitbox.width = 8;\r\n                    hitboxes.add(tileHitbox);\r\n                    tileHitbox = new Rectangle(x * 64, y * 64, 64, 64);\r\n                    tileHitbox.width = 32;\r\n                    tileHitbox.height = 16;\r\n                    tileHitbox.y += 16;\r\n                    hitboxes.add(tileHitbox);\r\n                    break;\r\n                default :\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void setImage(String image) {\r\n        this.image = image;\r\n        setTileType(tileType);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return image + \", \" + tileType + \". \" + x + \", \" + y;\r\n    }\r\n\r\n    public boolean hasTag(String tag) {\r\n        return tags.hasTag(tag);\r\n    }\r\n\r\n    public String[] getTags() {\r\n        return tags.getTags();\r\n    }\r\n\r\n    public void removeTag(String tag) {\r\n        tags.removeTag(tag);\r\n    }\r\n\r\n    public Tile copy() {\r\n        return new Tile(x, y, image, tileType, tags, extra, ignoreTiling, cachedDrawRect);\r\n    }\r\n\r\n    public void notify(Level game, String notification, int[] data) {\r\n        if (hasTag(\"notified_reset_type\")) {\r\n            setTileType(0);\r\n        }\r\n        if (hasTag(\"notified_alternate_type\")) {\r\n            if (!hasTag(\"coin_box\") || hasTag(\"coin_box\") && data[0] == tileType / 2)\r\n                setTileType(tileType % 2 == 0 ? tileType + 1 : tileType - 1);\r\n        }\r\n        if (hasTag(\"respawn_power_fruit\")) {\r\n            Tile powerFruit = game.getTileAt(\"normal\", x, y);\r\n            if (powerFruit.hasTag(\"powerup\")) {\r\n                arbDat = new Object[2];\r\n                ((Object[]) arbDat)[0] = powerFruit;\r\n                ((Object[]) arbDat)[1] = 120;\r\n            }\r\n        }\r\n        if (hasTag(\"notified_spring_bounce\")) {\r\n            arbDat = tileType % 2 + 30;\r\n        }\r\n    }\r\n\r\n    public void update(Level game) {\r\n        if (hasTag(\"enemy\")) {\r\n            for (Enemy enemy : game.getEnemies()) {\r\n                if (enemy.getParent().equals(this)) return;\r\n            }\r\n\r\n            if (game.player.isFresh()) {\r\n                game.addEnemy(Enemy.createEnemy(x, y, game.player, this, tileType));\r\n            } else {\r\n                Vector2 tileCenter = new Vector2(x * 64 + 32, y * 64 + 32);\r\n                float playerDist = game.player.getCenter().dst2(tileCenter);\r\n                if (playerDist > 1112 * 1112) {\r\n                    game.addEnemy(Enemy.createEnemy(x, y, game.player, this, tileType));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTag(\"respawn_power_fruit\")) {\r\n            if (arbDat != null) {\r\n                Object[] data = (Object[]) arbDat;\r\n                if (game.getTileAt(\"normal\", x, y) == null) {\r\n                    int timer = (Integer) data[1];\r\n                    if (timer <= 0) {\r\n                        Tile powerFruit = ((Tile) data[0]).copy();\r\n                        if (!toRectangle().overlaps(game.player.toRectangle())) {\r\n                            game.addTileToMap(\"normal\", powerFruit);\r\n                            timer = 90;\r\n                        }\r\n                    }\r\n                    timer--;\r\n                    data[1] = timer;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTag(\"notified_spring_bounce\")) {\r\n            if (arbDat != null) {\r\n                int data = (Integer) arbDat;\r\n                if (data > 0) data--;\r\n\r\n                tileType = (byte) (tileType % 2 + data / 10);\r\n            } else {\r\n                arbDat = 0;\r\n            }\r\n        }\r\n\r\n        if (hasTag(\"ambient_particles\")) {\r\n            if (MathUtils.random() < 0.02f) {\r\n                if (hasTag(\"end\")) {\r\n                    game.addParticle(new Particle(x * 64 + MathUtils.random() * 64, y * 64 + MathUtils.random() * 64,\r\n                            (float) ((MathUtils.random() - 0.5) * 2), (float) ((MathUtils.random() - 0.5) * 2),\r\n                            24, 24, 3, 3, 1, 0.98f, 0f,\r\n                            (int) (MathUtils.random() * 2), 0, \"particles/twinkle.png\", 60, 0.02f));\r\n                }\r\n\r\n                if (hasTag(\"evil\") && hasTag(\"key\")) {\r\n                    game.addParticle(new Particle(x * 64 + MathUtils.random() * 64, y * 64 + MathUtils.random() * 64,\r\n                            (float) ((MathUtils.random() - 0.5) * 2), (float) ((MathUtils.random() - 0.5) * 2),\r\n                            32, 32, 4, 4, 1, 0.98f, 0f,\r\n                            (int) (MathUtils.random() * 4), 0, \"particles/evil_smoke.png\", 60, 0.02f));\r\n                }\r\n\r\n                if (hasTag(\"powerup\")) {\r\n                    game.addParticle(new Particle(x * 64 + MathUtils.random() * 64, y * 64 + MathUtils.random() * 64,\r\n                            (float) ((MathUtils.random() - 0.5) * 2), (float) ((MathUtils.random() - 0.5) * 2),\r\n                            24, 24, 3, 3, 1, 0.98f, 0f,\r\n                            (int) (MathUtils.random() * 3), 0, \"particles/shine.png\", 60, 0.02f));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (o instanceof Tile) {\r\n            Tile other = (Tile) o;\r\n            if (imagesEqual(this, other)) {\r\n                if (ignoreTiling) {\r\n                    return x == other.x && y == other.y && tileType == other.tileType;\r\n                } else {\r\n                    return x == other.x && y == other.y;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return image.hashCode() + (ignoreTiling ? tileType * tileType * tileType : 0) + x * x + y;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/tile/Tile.java b/core/src/com/sab/littleh/game/tile/Tile.java
--- a/core/src/com/sab/littleh/game/tile/Tile.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/tile/Tile.java	(date 1708571808382)
@@ -34,7 +34,7 @@
     // Set because we only use it to check if one is present
     public TileTags tags;
 
-    private Tile(int x, int y, String image, int tileType, TileTags tags, String extra, boolean ignoreTiling, Rectangle drawRect) {
+    public Tile(int x, int y, String image, int tileType, TileTags tags, String extra, boolean ignoreTiling, Rectangle drawRect) {
         this.x = x;
         this.y = y;
         this.image = image;
@@ -47,7 +47,7 @@
         this.cachedDrawRect = drawRect;
     }
 
-    private Tile(int x, int y, String image, int tileType, TileTags tags, String extra) {
+    public Tile(int x, int y, String image, int tileType, TileTags tags, String extra) {
         this.x = x;
         this.y = y;
         this.image = image;
@@ -57,43 +57,6 @@
         setTileType(tileType);
     }
 
-    public Tile(int x, int y, String image, int tileType, String tags, String extra) {
-        this(x, y, image, tileType, tags.split(","), extra);
-    }
-
-    public Tile(int x, int y, String image, int tileType, String[] tags, String extra) {
-        this.x = x;
-        this.y = y;
-        this.image = image;
-        this.tags = new TileTags();
-        for (String string : tags) {
-            this.tags.addTag(string);
-        }
-        if (extra != null)
-            this.extra = extra.trim();
-        setTileType(tileType);
-    }
-
-    public Tile(int x, int y, String image, int tileType, String[] tags) {
-        this(x, y, image, tileType, tags, "");
-    }
-
-    public Tile(int x, int y, String image, int tileType, String tags) {
-        this(x, y, image, tileType, tags, "");
-    }
-
-    public Tile(int x, int y, String image, int tileType) {
-        this(x, y, image, tileType, "");
-    }
-
-    public Tile(String image, int tileType) {
-        this(0, 0, image, tileType);
-    }
-
-    public Tile(String image, String[] tags) {
-        this(0, 0, image, 0, tags, "");
-    }
-
     public Tile(String image) {
         this.image = image;
         setTags();
Index: core/src/com/sab/littleh/game/level/Level.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.level;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.Input;\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.math.MathUtils;\r\nimport com.badlogic.gdx.math.Matrix3;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.controls.Controls;\r\nimport com.sab.littleh.controls.ControlInput;\r\nimport com.sab.littleh.game.entity.Entity;\r\nimport com.sab.littleh.game.entity.Particle;\r\nimport com.sab.littleh.game.entity.enemy.Enemy;\r\nimport com.sab.littleh.game.entity.player.Player;\r\nimport com.sab.littleh.game.entity.player.powerups.GunMode;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.mainmenu.LevelEditorMenu;\r\nimport com.sab.littleh.mainmenu.MainMenu;\r\nimport com.sab.littleh.settings.Settings;\r\nimport com.sab.littleh.util.*;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.dialogue.Dialogue;\r\nimport com.sab.littleh.util.dialogue.Dialogues;\r\nimport com.sab.littleh.util.sab_format.SabData;\r\nimport com.sab.littleh.util.sab_format.SabValue;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class Level {\r\n    public static final String[] backgrounds = {\r\n            \"mountains\",\r\n            \"cold_mountains\",\r\n            \"desert\",\r\n            \"cave\",\r\n            \"tundra\",\r\n            \"hyperspace\"\r\n    };\r\n    public static final Color[] themeTints = {\r\n            new Color(0.7f, 0.4f, 0.0f, 0.05f),\r\n            new Color(0.3f, 0.2f, 0.9f, 0.12f),\r\n            new Color(0.8f, 0.6f, 0.0f, 0.1f),\r\n            new Color(0.1f, 0.1f, 0.2f, 0.24f),\r\n            new Color(0.0f, 0.4f, 0.8f, 0.1f),\r\n            new Color(0.7f, 0.0f, 0.65f, 0.04f),\r\n    };\r\n    public static Level currentLevel;\r\n    public final SabData mapData;\r\n    public HashMap<String, MapLayer> mapLayers;\r\n//    public List<Tile> backgroundTiles;\r\n//    public List<Tile> allTiles;\r\n//    public List<Tile> volatileTiles;\r\n//    public List<Tile> notifiableTiles;\r\n//    public List<Tile> checkpointState;\r\n//    public List<Tile> updatableTiles;\r\n//    public List<List<Tile>> tileMap;\r\n//    public List<List<Tile>> backgroundMap;\r\n\r\n    public Player playerBackup;\r\n    public Player player;\r\n    public int timeLimit;\r\n    public int gameTick;\r\n    private Tile testTile;\r\n    private boolean levelEnded;\r\n    private boolean tilesDesynced;\r\n    private List<Particle> particles;\r\n    private List<Enemy> enemies;\r\n    private List<Entity> entities;\r\n    private String background;\r\n    private Point startPos;\r\n    private Popup popup;\r\n    private ParallaxBackground parallaxBackground;\r\n    private long currentTime;\r\n    private long checkedTime;\r\n    private Dialogue currentDialogue;\r\n    private boolean ignoreDialogue;\r\n\r\n    public Level(SabData mapData) {\r\n        mapLayers = new HashMap<>();\r\n        particles = new ArrayList<>();\r\n        enemies = new ArrayList<>();\r\n        entities = new ArrayList<>();\r\n        this.mapData = mapData;\r\n        background = mapData.getRawValue(\"background\");\r\n        timeLimit = mapData.getValue(\"time_limit\").asInt();\r\n        if (mapData.hasValue(\"movement_options\")) {\r\n            String value = mapData.getRawValue(\"movement_options\");\r\n            mapData.remove(\"movement_options\");\r\n            String[] values = value.replace(\",\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\" \");\r\n            String[] options = {\r\n                    \"double_jumping\",\r\n                    \"wall_sliding\",\r\n                    \"crouching\"\r\n            };\r\n            for (int i = 0; i < 3; i++) {\r\n                mapData.insertValue(options[i], new SabValue(values[i]));\r\n            }\r\n        }\r\n        currentLevel = this;\r\n    }\r\n\r\n    public void init() {\r\n        parallaxBackground = new ParallaxBackground(background, mapData.getValue(\"bonus_background\"));\r\n    }\r\n\r\n    public void startGame(Point startPos) {\r\n        GunMode.bullets.clear();\r\n        enemies.clear();\r\n        levelEnded = true;\r\n        Dialogues.resetDialogues();\r\n        player = new Player(new Point(startPos.x, startPos.y));\r\n        playerBackup = player;\r\n        LittleH.program.dynamicCamera.setPosition(player.getCenter());\r\n        desyncTiles();\r\n        SoundEngine.playMusic(\"areas/\" + mapData.getRawValue(\"background\") + \"_song.ogg\");\r\n        gameTick = 0;\r\n        timeLimit = mapData.getValue(\"time_limit\").asInt();\r\n        this.startPos = startPos;\r\n        currentTime = 0;\r\n        checkedTime = currentTime;\r\n        Cursors.switchCursor(\"none\");\r\n        notify(\"notify_game_start\", startPos.x, startPos.y);\r\n    }\r\n\r\n    public void removeTile(String layer, int x, int y) {\r\n        Tile toRemove = getTileAt(layer, x, y);\r\n        if (toRemove != null) {\r\n            while (mapLayers.get(layer).allTiles.contains(toRemove))\r\n                mapLayers.get(layer).allTiles.remove(toRemove);\r\n        }\r\n    }\r\n\r\n    public void changeBackground(String background) {\r\n        mapData.insertValue(\"background\", background);\r\n        this.background = background;\r\n        parallaxBackground = new ParallaxBackground(background);\r\n    }\r\n\r\n    public void startPopup(String text, int length) {\r\n        popup = new Popup(text, length);\r\n    }\r\n\r\n    public void addTile(String layer, Tile tile) {\r\n        mapLayers.get(layer).allTiles.add(tile);\r\n    }\r\n\r\n    public void addTileToMap(String layer, Tile tile) {\r\n        mapLayers.get(layer).tileMap.get(tile.x).set(tile.y, tile);\r\n    }\r\n\r\n    public void addTiles(List<Tile> tiles, int levelWidth, int levelHeight) {\r\n        MapLayer newLayer = new MapLayer();\r\n        mapLayers.put(\"normal\", newLayer);\r\n        newLayer.tileMap = new ArrayList<>(levelWidth);\r\n        for (int i = 0; i < levelWidth; i++) {\r\n            newLayer.tileMap.add(i, new ArrayList<>(levelHeight));\r\n            for (int j = 0; j < levelHeight; j++) {\r\n                newLayer.tileMap.get(i).add(null);\r\n            }\r\n        }\r\n        newLayer.allTiles.addAll(tiles);\r\n        for (Tile tile : newLayer.allTiles) {\r\n            newLayer.tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n    }\r\n\r\n    public void addBackground(List<Tile> tiles) {\r\n        MapLayer newLayer = new MapLayer();\r\n        mapLayers.put(\"background\", newLayer);\r\n        newLayer.tileMap = new ArrayList<>(getWidth());\r\n        for (int i = 0; i < getWidth(); i++) {\r\n            newLayer.tileMap.add(i, new ArrayList<>(getHeight()));\r\n            for (int j = 0; j < getHeight(); j++) {\r\n                newLayer.tileMap.get(i).add(null);\r\n            }\r\n        }\r\n        newLayer.allTiles.addAll(tiles);\r\n        for (Tile tile : newLayer.allTiles) {\r\n            newLayer.tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n    }\r\n\r\n    public void mouseUp() {\r\n        if (currentDialogue != null) {\r\n            currentDialogue.mouseUp();\r\n        }\r\n    }\r\n\r\n    public void enterPressed() {\r\n        if (currentDialogue != null) {\r\n            if (currentDialogue.finished()) {\r\n                currentDialogue = null;\r\n            } else if (currentDialogue.finishedBlock()) {\r\n                currentDialogue.nextBlock();\r\n            } else {\r\n                currentDialogue.toEnd();\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean escapePressed() {\r\n        if (currentDialogue != null) {\r\n            currentDialogue = null;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void update() {\r\n        if (inGame()) {\r\n            gameTick++;\r\n\r\n            if (currentDialogue != null) {\r\n                currentDialogue.update();\r\n                if (!currentDialogue.finishedBlock()) {\r\n                    currentDialogue.next();\r\n                }\r\n                ControlInput.localControls.releaseControl(Controls.UP);\r\n                ControlInput.localControls.releaseControl(Controls.DOWN);\r\n                ControlInput.localControls.releaseControl(Controls.LEFT);\r\n                ControlInput.localControls.releaseControl(Controls.RIGHT);\r\n                ControlInput.localControls.releaseControl(Controls.JUMP);\r\n                player.update(this);\r\n                particles.forEach(Particle::update);\r\n                particles.removeIf(particle -> !particle.alive);\r\n                return;\r\n            }\r\n\r\n            if (player.startSpeedrunTimer() && !player.win) {\r\n                if (player.ticksAlive % 60 == 0) {\r\n                    timeLimit--;\r\n                    if (timeLimit == 0) {\r\n                        player.trueKill();\r\n                        timeLimit = mapData.getValue(\"time_limit\").asInt();\r\n                    }\r\n                }\r\n\r\n                currentTime += 16 + (gameTick % 3 == 0 ? 0 : 1);\r\n            }\r\n        }\r\n\r\n        if (player != null) {\r\n            if (!player.warpingOut())\r\n                LittleH.program.dynamicCamera.targetPosition = new Vector2(player.getCenterX(), player.y + player.height / 2);\r\n            if (Gdx.input.isKeyPressed(Input.Keys.SHIFT_LEFT) && mapData.getValue(\"look_around\").asBool()) {\r\n                if (Cursors.cursorIs(\"none\")) {\r\n                    Gdx.input.setCursorPosition(-MainMenu.relZeroX(), -MainMenu.relZeroY());\r\n                    Cursors.switchCursor(\"magnifier\");\r\n                }\r\n                LittleH.program.dynamicCamera.setPosition(player.getCenter());\r\n                LittleH.program.dynamicCamera.update();\r\n                LittleH.program.dynamicCamera.setPosition(MouseUtil.getDynamicMousePosition());\r\n            } else {\r\n                if (Cursors.cursorIs(\"magnifier\")) {\r\n                    Gdx.input.setCursorPosition(-MainMenu.relZeroX(), -MainMenu.relZeroY());\r\n                    Cursors.switchCursor(\"none\");\r\n                }\r\n            }\r\n            float cameraScalar = Math.min(2400f / LittleH.program.getWidth(), 1350f / LittleH.program.getHeight());\r\n            LittleH.program.dynamicCamera.targetZoom = cameraScalar / Settings.localSettings.zoomScalar.asFloat();\r\n            player.update(this);\r\n        }\r\n\r\n        for (Entity entity : entities) {\r\n            entity.update(this);\r\n        }\r\n\r\n        for (Particle particle : particles) {\r\n            particle.update();\r\n        }\r\n\r\n        for (Enemy enemy : enemies) {\r\n            enemy.update(this);\r\n        }\r\n\r\n        enemies.removeIf(enemy -> {\r\n            if (enemy.remove) {\r\n                enemy.getParent().removeTag(\"enemy\");\r\n            }\r\n            return enemy.remove || enemy.despawn;\r\n        });\r\n        entities.removeIf(entity -> entity.remove);\r\n\r\n        for (Tile tile : getBaseLayer().updatableTiles) {\r\n            Vector2 tileCenter = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);\r\n            if (player.getCenter().dst2(tileCenter) < 1420 * 1420) {\r\n                tile.update(this);\r\n            }\r\n        }\r\n        particles.removeIf(particle -> !particle.alive);\r\n    }\r\n\r\n    public MapLayer getBaseLayer() {\r\n        return mapLayers.get(\"normal\");\r\n    }\r\n\r\n    public MapLayer getBackgroundLayer() {\r\n        return mapLayers.get(\"background\");\r\n    }\r\n\r\n    public int getVolatileTileCount() {\r\n        return getBaseLayer().volatileTiles.size();\r\n    }\r\n\r\n    public void inGameRemoveTile(Tile tile) {\r\n        if (tilesDesynced) {\r\n            if (tile.hasTag(\"volatile\")) {\r\n                getBaseLayer().volatileTiles.remove(tile);\r\n            }\r\n            if (tile.hasTag(\"notifiable\")) {\r\n                getBaseLayer().notifiableTiles.remove(tile);\r\n            }\r\n            if (tile.hasTag(\"updatable\")) {\r\n                getBaseLayer().updatableTiles.remove(tile);\r\n            }\r\n            getBaseLayer().tileMap.get(tile.x).set(tile.y, null);\r\n        } else {\r\n            throw new IllegalStateException(\"The Level must be desynced before calling this to avoid the permanent deletion of tiles\");\r\n        }\r\n    }\r\n\r\n    public boolean inGame() {\r\n        return player != null;\r\n    }\r\n\r\n    public int getVolatileTileCount(String tag, int tileType) {\r\n        int count = 0;\r\n        for (Tile tile : getBaseLayer().volatileTiles) {\r\n            if (tile.hasTag(tag) && tile.tileType == tileType)\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    public int getWidth() {\r\n        return getBaseLayer().tileMap.size();\r\n    }\r\n\r\n    public void suicide() {\r\n        if (player != null)\r\n            player.kill();\r\n    }\r\n\r\n    public int getHeight() {\r\n        return getBaseLayer().tileMap.get(0).size();\r\n    }\r\n\r\n    public Tile getTileAt(String layer, int x, int y) {\r\n        if (x >= 0 && y >= 0 && x < getWidth() && y < getHeight()) return mapLayers.get(layer).tileMap.get(x).get(y);\r\n        return null;\r\n    }\r\n\r\n    public void endGame() {\r\n        GunMode.bullets.clear();\r\n        currentDialogue = null;\r\n        player = null;\r\n        levelEnded = true;\r\n        enemies.clear();\r\n        particles.clear();\r\n        syncTiles();\r\n        if (LittleH.program.getMenu() instanceof LevelEditorMenu) {\r\n            ((LevelEditorMenu) LittleH.program.getMenu()).resetToolCursor();\r\n            SoundEngine.playMusic(Settings.localSettings.buildingSong.value);\r\n        }\r\n    }\r\n\r\n    public void resetToCheckpointState() {\r\n        GunMode.bullets.clear();\r\n        enemies.clear();\r\n        getBaseLayer().volatileTiles.clear();\r\n        getBaseLayer().notifiableTiles.removeIf(tile -> tile.hasTag(\"volatile\"));\r\n        getBaseLayer().updatableTiles.removeIf(tile -> tile.hasTag(\"volatile\"));\r\n        for (Tile tile : getBaseLayer().checkpointState) {\r\n            Tile copy = tile.copy();\r\n            if (tile.hasTag(\"notifiable\"))\r\n                getBaseLayer().notifiableTiles.add(copy);\r\n            if (tile.hasTag(\"updatable\")) {\r\n                getBaseLayer().updatableTiles.add(copy);\r\n            }\r\n            getBaseLayer().volatileTiles.add(copy);\r\n            addTileToMap(\"normal\", copy);\r\n        }\r\n    }\r\n\r\n    public void saveCheckpointState() {\r\n        getBaseLayer().checkpointState.clear();\r\n        for (Tile tile : getBaseLayer().volatileTiles) {\r\n            getBaseLayer().checkpointState.add(tile.copy());\r\n        }\r\n    }\r\n\r\n    public void syncTiles() {\r\n        enemies.clear();\r\n        getBaseLayer().volatileTiles.clear();\r\n        getBaseLayer().notifiableTiles.clear();\r\n        getBaseLayer().updatableTiles.clear();\r\n        for (Tile tile : getBaseLayer().allTiles) {\r\n            tile.setTags();\r\n            getBaseLayer().tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n        tilesDesynced = false;\r\n    }\r\n\r\n    public void addParticle(Particle particle) {\r\n        particles.add(particle);\r\n    }\r\n\r\n    public void addEnemy(Enemy enemy) {\r\n        enemies.add(enemy);\r\n    }\r\n\r\n    public void addMiscEntity(Entity entity) {\r\n        entities.add(entity);\r\n    }\r\n\r\n    public void desyncTiles() {\r\n        getBaseLayer().volatileTiles.clear();\r\n        getBaseLayer().notifiableTiles.clear();\r\n        getBaseLayer().updatableTiles.clear();\r\n        for (Tile tile : getBaseLayer().allTiles) {\r\n            Tile copy = tile.copy();\r\n            getBaseLayer().tileMap.get(copy.x).set(copy.y, copy);\r\n            if (tile.hasTag(\"volatile\")) {\r\n                getBaseLayer().volatileTiles.add(copy);\r\n            }\r\n            if (tile.hasTag(\"notifiable\")) {\r\n                getBaseLayer().notifiableTiles.add(copy);\r\n            }\r\n            if (tile.hasTag(\"updatable\")) {\r\n                getBaseLayer().updatableTiles.add(copy);\r\n            }\r\n        }\r\n        for (Tile tile : getBackgroundLayer().allTiles) {\r\n            if (tile.hasTag(\"ignore_background\")) {\r\n                Tile copy = tile.copy();\r\n                if (tile.hasTag(\"updatable\")) {\r\n                    getBaseLayer().updatableTiles.add(copy);\r\n                }\r\n                if (tile.hasTag(\"notifiable\")) {\r\n                    getBaseLayer().notifiableTiles.add(copy);\r\n                }\r\n            }\r\n        }\r\n        saveCheckpointState();\r\n        tilesDesynced = true;\r\n    }\r\n\r\n    public void renderBackground(Graphics g) {\r\n        parallaxBackground.render(g);\r\n    }\r\n\r\n    public void render(Graphics g) {\r\n        render(g, false);\r\n    }\r\n\r\n    public void render(Graphics g, boolean backgroundPriority) {\r\n        Vector2 renderAround = g.getCameraPosition();\r\n        int centerX = (int) (renderAround.x / 64);\r\n        int centerY = (int) (renderAround.y / 64);\r\n        int screenTileWidth = (int) Math.ceil(LittleH.program.getWidth() / 64f * LittleH.program.dynamicCamera.zoom + 4);\r\n        int screenTileHeight = (int) Math.ceil(LittleH.program.getHeight() / 64f * LittleH.program.dynamicCamera.zoom + 4);\r\n        int startX = centerX - screenTileWidth / 2;\r\n        int startY = centerY - screenTileHeight / 2;\r\n        int endX = startX + screenTileWidth;\r\n        int endY = startY + screenTileHeight;\r\n\r\n        List<Tile> backgroundPostRenders = new ArrayList<>();\r\n\r\n        g.resetTint();\r\n        g.resetColor();\r\n\r\n        if (!inGame()) {\r\n            if (backgroundPriority) {\r\n                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n            } else {\r\n                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n            }\r\n        } else {\r\n            g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));\r\n        }\r\n\r\n        // Draw in the back\r\n        for (int i = startX; i < endX; i++) {\r\n            if (i < 0 || i >= getWidth()) continue;\r\n            for (int j = startY; j < endY; j++) {\r\n                if (j < 0 || j >= getHeight()) continue;\r\n                if (!inGame()) {\r\n                    Tile tile;\r\n                    if (backgroundPriority) {\r\n                        // Draw foreground behind\r\n                        tile = getTileAt(\"normal\", i, j);\r\n                    } else {\r\n                        // Draw background\r\n                        tile = getTileAt(\"background\", i, j);\r\n                    }\r\n                    if (tile != null) {\r\n                        tile.render(inGame(), g);\r\n                        if (tile.hasTag(\"post_render\"))\r\n                            backgroundPostRenders.add(tile);\r\n                    }\r\n                } else {\r\n                    // Draw background\r\n                    // Tint multiplies with graphics color to make a darker background\r\n                    Tile tile = getTileAt(\"background\", i, j);\r\n                    if (tile != null) {\r\n                        tile.render(inGame(), g);\r\n                        if (tile.hasTag(\"post_render\"))\r\n                            backgroundPostRenders.add(tile);\r\n                        else if (tile.hasTag(\"post_render_in_game\") && player != null)\r\n                            backgroundPostRenders.add(tile);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        g.resetTint();\r\n        g.resetColor();\r\n\r\n        List<Tile> postRenders = new ArrayList<>();\r\n        List<Tile> visibleTiles = new ArrayList<>();\r\n        List<Point> toDrawGrid = new ArrayList<>();\r\n\r\n        backgroundPostRenders = (drawPostRenders(g, backgroundPostRenders, true, true, false));\r\n\r\n        // Draw in the front but behind players\r\n        for (int i = startX; i < endX; i++) {\r\n            if (i < 0 || i >= getWidth()) continue;\r\n            for (int j = startY; j < endY; j++) {\r\n                if (j < 0 || j >= getHeight()) continue;\r\n                if (!inGame()) {\r\n                    // Draw background in front\r\n                    if (backgroundPriority) {\r\n                        Tile tile = getTileAt(\"background\", i, j);\r\n                        if (tile != null) {\r\n                            if (!(tile.isSolid() && tile.hasTag(\"tileset\"))) {\r\n                                tile.render(inGame(), g);\r\n                            }\r\n                            else visibleTiles.add(tile);\r\n                            if (tile.hasTag(\"post_render\"))\r\n                                postRenders.add(tile);\r\n                        }\r\n                        toDrawGrid.add(new Point(i * 64, j * 64));\r\n                        continue;\r\n                    }\r\n                    // Draw foreground\r\n                    Tile tile = getTileAt(\"normal\", i, j);\r\n                    if (tile != null) {\r\n                        if (!(tile.isSolid() && tile.hasTag(\"tileset\"))) {\r\n                            tile.render(inGame(), g);\r\n                        }\r\n                        else visibleTiles.add(tile);\r\n                        if (tile.hasTag(\"post_render\"))\r\n                            postRenders.add(tile);\r\n                    }\r\n                    toDrawGrid.add(new Point(i * 64, j * 64));\r\n                } else {\r\n                    // Draw foreground\r\n                    Tile tile = getTileAt(\"normal\", i, j);\r\n                    if (tile != null) {\r\n                        if (!(tile.isSolid() && !tile.ignoreTiling)) tile.render(inGame(), g);\r\n                        else visibleTiles.add(tile);\r\n                        if (tile.hasTag(\"post_render\"))\r\n                            postRenders.add(tile);\r\n                        else if (tile.hasTag(\"post_render_in_game\") && player != null)\r\n                            postRenders.add(tile);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        postRenders = drawPostRenders(g, postRenders, false, true, false);\r\n\r\n        enemies.forEach(enemy -> enemy.render(g, this));\r\n        entities.forEach(entity -> entity.render(g, this));\r\n        if (inGame())\r\n            player.render(g, this);\r\n        particles.forEach(particle -> particle.render(g));\r\n\r\n        if (!inGame()) {\r\n            if (backgroundPriority) {\r\n                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n            } else {\r\n                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n            }\r\n        } else {\r\n            g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));\r\n        }\r\n\r\n        if (!inGame()) {\r\n            if (backgroundPriority) {\r\n                g.setTint(new Color(1f, 1f, 1f, 0.65f));\r\n            } else {\r\n                g.resetTint();\r\n            }\r\n        } else {\r\n            g.resetTint();\r\n        }\r\n\r\n        List<Tile> textRenders = drawPostRenders(g, postRenders, false, false, false);\r\n        textRenders.addAll(drawPostRenders(g, backgroundPostRenders, true, false, false));\r\n\r\n        // Draw in the front\r\n        for (Tile tile : visibleTiles) {\r\n            if (!inGame()) {\r\n                // Draw background in front\r\n                if (backgroundPriority) {\r\n                    if (tile != null) {\r\n                        tile.render(inGame(), g);\r\n                        if (tile.hasTag(\"post_render\"))\r\n                            postRenders.add(0, tile);\r\n                    }\r\n                    continue;\r\n                }\r\n                // Draw foreground\r\n                if (tile != null) {\r\n                    tile.render(inGame(), g);\r\n                    if (tile.hasTag(\"post_render\"))\r\n                        postRenders.add(0, tile);\r\n                }\r\n            } else {\r\n                // Draw foreground\r\n                if (tile != null) {\r\n                    tile.render(inGame(), g);\r\n                    if (tile.hasTag(\"post_render\"))\r\n                        postRenders.add(0, tile);\r\n                    else if (tile.hasTag(\"post_render_in_game\") && player != null)\r\n                        postRenders.add(0, tile);\r\n                }\r\n            }\r\n        }\r\n\r\n        drawPostRenders(g, textRenders, false, false, true);\r\n\r\n        g.resetTint();\r\n\r\n        if (Settings.localSettings.grid.value) {\r\n\r\n            float zoom = LittleH.program.dynamicCamera.zoom;\r\n            Color color = new Color(0.875f, 0.875f, 0.875f, Math.max(0, 1 - zoom / 6));\r\n\r\n            if (color.a > 0.01f) {\r\n\r\n                g.startShapeRenderer(color);\r\n\r\n                for (Point point : toDrawGrid) {\r\n                    g.drawRect(point.x, point.y, 64, 64);\r\n                }\r\n\r\n                g.endShapeRenderer();\r\n\r\n            }\r\n        }\r\n\r\n        LittleH.program.useStaticCamera();\r\n\r\n        if (backgroundPriority) {\r\n            g.drawString(\"EDITING BACKGROUND\", LittleH.borderedFont, -MainMenu.relZeroX() - 96, -MainMenu.relZeroY() - 96, LittleH.defaultFontScale * 0.75f, 1);\r\n        }\r\n\r\n        if (inGame())\r\n            player.renderHUD(g, this);\r\n\r\n        if (inGame()) {\r\n            if (gameTick < 240 || Cursors.cursorIs(\"magnifier\")) {\r\n                String[] levelOptions = {\r\n                        \"double_jumping\",\r\n                        \"wall_sliding\",\r\n                        \"crouching\",\r\n                        \"look_around\"\r\n                };\r\n                String[] levelOptionImages = {\r\n                        \"ui/buttons/icons/double_jump.png\",\r\n                        \"ui/buttons/icons/wall_jump.png\",\r\n                        \"ui/buttons/icons/slide.png\",\r\n                        \"ui/buttons/icons/magnifying_glass.png\"\r\n                };\r\n\r\n                g.setColor(new Color(1, 1, 1, Math.max(1, Math.min(240 - gameTick, 120)) / 120f));\r\n                if (Cursors.cursorIs(\"magnifier\")) {\r\n                    g.resetColor();\r\n                }\r\n\r\n                for (int i = 0; i < levelOptions.length; i++) {\r\n                    g.draw(Images.getImage(levelOptionImages[i]),\r\n                            -MainMenu.relZeroX() - levelOptions.length * 80 + i * 80 + 8, MainMenu.relZeroY() + 8, 64, 64);\r\n                    g.draw(Images.getImage(mapData.getValue(levelOptions[i]).asBool() ? \"ui/level_setting_on.png\" : \"ui/level_setting_off.png\"),\r\n                            -MainMenu.relZeroX() - levelOptions.length * 80 + i * 80, MainMenu.relZeroY(), 80, 80);\r\n                }\r\n\r\n                g.resetColor();\r\n            }\r\n        }\r\n\r\n        if (popup != null) {\r\n            popup.render(g);\r\n            if (popup.timeLeft < 0) {\r\n                popup = null;\r\n            }\r\n        }\r\n\r\n        if (currentDialogue != null) {\r\n            currentDialogue.render(g);\r\n        }\r\n    }\r\n\r\n    public Tile[][] getNeighbors(int tileX, int tileY, boolean background) {\r\n        // Magic\r\n        Tile[][] neighbors = new Tile[3][3];\r\n        for (int i = tileX - 1; i < tileX + 2; i++) {\r\n            for (int j = tileY - 1; j < tileY + 2; j++) {\r\n                Tile tile = background ? getTileAt(\"background\", i, j) : getTileAt(\"normal\", i, j);\r\n                if (!(i < 0 || j < 0 || i >= getWidth() || j >= getHeight()) && tile != null) {\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = tile;\r\n                } else {\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = null;\r\n                }\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    public List<Tile> drawPostRenders(Graphics g, List<Tile> postRenders, boolean background, boolean dontDrawForcedFront, boolean drawText) {\r\n        List<Tile> leftovers = new ArrayList<>();\r\n        Shaders.waterShader.bind();\r\n        Shaders.waterShader.setUniformf(\"u_time\", gameTick / 60f);\r\n        Shaders.windyShader.bind();\r\n        Shaders.windyShader.setUniformf(\"u_time\", gameTick / 120f);\r\n        Shaders.vineShader.bind();\r\n        Shaders.vineShader.setUniformf(\"u_time\", gameTick / 120f);\r\n        g.resetShader();\r\n\r\n        for (Tile tile : postRenders) {\r\n            if (tile.hasTag(\"render_normal\")) {\r\n                if (tile.hasTag(\"water\")) {\r\n                    if (dontDrawForcedFront) {\r\n                        leftovers.add(tile);\r\n                    } else {\r\n                        Tile[][] neighbors = getNeighbors(tile.x, tile.y, background);\r\n                        Shaders.waterShader.bind();\r\n                        Shaders.waterShader.setUniformMatrix(\"u_neighbors\", new Matrix3(new float[]{\r\n                                neighbors[0][0] != null && neighbors[0][0].isSolid() ? 1 : 0,\r\n                                neighbors[1][0] != null && neighbors[1][0].isSolid() ? 1 : 0,\r\n                                neighbors[2][0] != null && neighbors[2][0].isSolid() ? 1 : 0,\r\n                                neighbors[0][1] != null && neighbors[0][1].isSolid() ? 1 : 0,\r\n                                neighbors[1][1] != null && neighbors[1][1].isSolid() ? 1 : 0,\r\n                                neighbors[2][1] != null && neighbors[2][1].isSolid() ? 1 : 0,\r\n                                neighbors[0][2] != null && neighbors[0][2].isSolid() ? 1 : 0,\r\n                                neighbors[1][2] != null && neighbors[1][2].isSolid() ? 1 : 0,\r\n                                neighbors[2][2] != null && neighbors[2][2].isSolid() ? 1 : 0,\r\n                        }));\r\n                        Shaders.waterShader.setUniformf(\"u_tilePosition\", new Vector2(tile.x, tile.y));\r\n                        g.resetShader();\r\n                        g.drawImageWithShader(Shaders.waterShader, tile.getImage(), tile.x * 64, tile.y * 64, 64, 64, tile.getDrawSection());\r\n                    }\r\n                } else if (tile.hasTag(\"windy\")) {\r\n                    Tile[][] neighbors = getNeighbors(tile.x, tile.y, background);\r\n                    Shaders.windyShader.bind();\r\n                    Shaders.windyShader.setUniformf(\"u_attached\", neighbors[1][2] != null && neighbors[1][2].isSolid() ? 1 : 0);\r\n                    Shaders.windyShader.setUniformf(\"u_tilePosition\", new Vector2(tile.x, tile.y));\r\n                    g.resetShader();\r\n                    g.drawImageWithShader(Shaders.windyShader, tile.getImage(), tile.x * 64, tile.y * 64, 64, 64, tile.getDrawSection());\r\n                } else if (tile.hasTag(\"vines\")) {\r\n                    Shaders.vineShader.bind();\r\n                    float length = -1;\r\n                    float vinePosition = -1;\r\n                    if (getTileAt(\"normal\", tile.x, tile.y + 1) != null) {\r\n                        if (getTileAt(\"normal\", tile.x, tile.y + 1).isSolid()) {\r\n                            vinePosition = 0;\r\n                        } else {\r\n                            int i = 1;\r\n                            while (getTileAt(\"normal\", tile.x, tile.y + i) != null && getTileAt(\"normal\", tile.x, tile.y + i).hasTag(\"vines\")) {\r\n                                i++;\r\n                            }\r\n                            vinePosition = i;\r\n                        }\r\n                    }\r\n                    if (getTileAt(\"normal\", tile.x, tile.y - 1) != null) {\r\n                        int i = 1;\r\n                        while (getTileAt(\"normal\", tile.x, tile.y - i) != null && getTileAt(\"normal\", tile.x, tile.y - i).hasTag(\"vines\")) {\r\n                            i++;\r\n                        }\r\n                        length = i + vinePosition - 1;\r\n                    } else {\r\n                        length = vinePosition;\r\n                    }\r\n\r\n                    length++;\r\n                    vinePosition++;\r\n\r\n                    Shaders.vineShader.setUniformf(\"u_attached\", vinePosition);\r\n                    Shaders.vineShader.setUniformf(\"u_vineLength\", length);\r\n                    Shaders.vineShader.setUniformf(\"u_tilePosition\", new Vector2(tile.x, tile.y));\r\n                    g.resetShader();\r\n                    g.drawImageWithShader(Shaders.vineShader, tile.getImage(), tile.x * 64, tile.y * 64, 64, 64, tile.getDrawSection());\r\n                } else {\r\n                    tile.render(false, g);\r\n                }\r\n            }\r\n            if (tile.hasTag(\"text\")) {\r\n                if (inGame()) {\r\n                    if (!drawText) {\r\n                        leftovers.add(tile);\r\n                    } else {\r\n                        if (tile.extra == null) tile.extra = \"\";\r\n                        float size = 0.8f;\r\n                        if (tile.tileType == 0) size = 1f;\r\n                        else if (tile.tileType == 2) size = 0.7f;\r\n\r\n                        LittleH.borderedFont.setColor(new Color(1, 1, 1, 1 - Math.min(1, player.getCenter().dst2(tile.x * 64 + 32, tile.y * 64 + 32) / (1280f * 1280f))));\r\n\r\n                        g.drawString(tile.extra, LittleH.borderedFont, tile.x * 64 + 32, tile.y * 64 + 32, size * LittleH.defaultFontScale, 0);\r\n\r\n                        LittleH.borderedFont.setColor(Color.WHITE);\r\n                    }\r\n                }\r\n            }\r\n            if (tile.hasTag(\"sinusoid\")) {\r\n                g.drawImage(tile.getImage(), tile.x * 64, tile.y * 64 + MathUtils.sinDeg(LittleH.getTick() / 2f + (tile.x + tile.y) * 15) * 8, 64, 64, tile.getDrawSection());\r\n            }\r\n            g.resetColor();\r\n        }\r\n\r\n        return leftovers;\r\n    }\r\n\r\n    public void renderHUD(Graphics g) {\r\n        g.resetColor();\r\n        g.resetTint();\r\n        g.resetShader();\r\n        if (timeLimit > -1) {\r\n            g.draw(Images.getImage(\"ui/buttons/icons/clock.png\"), -MainMenu.relZeroX() - 72, -MainMenu.relZeroY() - 72, 64, 64);\r\n            g.drawString(\"\" + timeLimit, LittleH.borderedFont, -MainMenu.relZeroX() - 80, -MainMenu.relZeroY() - 28 - 14, LittleH.defaultFontScale, 1);\r\n        }\r\n        g.drawString(getTime(), LittleH.borderedFont, MainMenu.relZeroX() + 16, -MainMenu.relZeroY() - 28, LittleH.defaultFontScale, -1);\r\n    }\r\n\r\n    public void reset() {\r\n        resetToCheckpointState();\r\n        GunMode.bullets.clear();\r\n        player = null;\r\n        startGame(startPos);\r\n    }\r\n\r\n    public Point getStartPos() {\r\n        for (Tile tile : getBaseLayer().allTiles) {\r\n            if (tile.hasTag(\"start\")) {\r\n                return new Point(tile.x, tile.y);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void notify(String notification, int... data) {\r\n        for (Tile tile : getBaseLayer().notifiableTiles) {\r\n            if (tile.hasTag(notification)) {\r\n                tile.notify(this, notification, data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void showTimer() {\r\n        startPopup(getSplit(), 120);\r\n    }\r\n\r\n    public String getSplit() {\r\n        long time = currentTime - checkedTime;\r\n        checkedTime = currentTime;\r\n        return LittleH.formatTime(time);\r\n    }\r\n\r\n    public String getTime() {\r\n        long time = currentTime;\r\n        return LittleH.formatTime(time);\r\n    }\r\n\r\n    public List<Enemy> getEnemies() {\r\n        return enemies;\r\n    }\r\n    public List<Entity> getEntities() {\r\n        return entities;\r\n    }\r\n\r\n    public void setDialogue(Dialogue dialogue) {\r\n        if (!ignoreDialogue)\r\n            this.currentDialogue = dialogue;\r\n    }\r\n\r\n    public boolean hasDialogue() {\r\n        return currentDialogue != null;\r\n    }\r\n\r\n    public void ignoreDialogue() {\r\n        ignoreDialogue = true;\r\n    }\r\n\r\n    public void resumeDialogue() {\r\n        ignoreDialogue = false;\r\n    }\r\n\r\n    public long getTimeMillis() {\r\n        return currentTime;\r\n    }\r\n\r\n    private class Popup {\r\n        private int timeLeft;\r\n        private String text;\r\n\r\n        private Popup(String text, int length) {\r\n            timeLeft = length;\r\n            this.text = text;\r\n        }\r\n\r\n        private void render(Graphics g) {\r\n            LittleH.borderedFont.setColor(new Color(1, 1, 1, Math.min(1, timeLeft / 60f)));\r\n            g.drawString(text, LittleH.borderedFont, 0, 64, LittleH.defaultFontScale, 0);\r\n            timeLeft--;\r\n            LittleH.borderedFont.setColor(Color.WHITE);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/level/Level.java b/core/src/com/sab/littleh/game/level/Level.java
--- a/core/src/com/sab/littleh/game/level/Level.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/level/Level.java	(date 1708573626744)
@@ -183,6 +183,22 @@
         }
     }
 
+    public void addWiring(List<Tile> tiles) {
+        MapLayer newLayer = new MapLayer();
+        mapLayers.put("wiring", newLayer);
+        newLayer.tileMap = new ArrayList<>(getWidth());
+        for (int i = 0; i < getWidth(); i++) {
+            newLayer.tileMap.add(i, new ArrayList<>(getHeight()));
+            for (int j = 0; j < getHeight(); j++) {
+                newLayer.tileMap.get(i).add(null);
+            }
+        }
+        newLayer.allTiles.addAll(tiles);
+        for (Tile tile : newLayer.allTiles) {
+            newLayer.tileMap.get(tile.x).set(tile.y, tile);
+        }
+    }
+
     public void mouseUp() {
         if (currentDialogue != null) {
             currentDialogue.mouseUp();
@@ -301,6 +317,10 @@
         return mapLayers.get("background");
     }
 
+    public MapLayer getWiringLayer() {
+        return mapLayers.get("wiring");
+    }
+
     public int getVolatileTileCount() {
         return getBaseLayer().volatileTiles.size();
     }
@@ -313,7 +333,7 @@
             if (tile.hasTag("notifiable")) {
                 getBaseLayer().notifiableTiles.remove(tile);
             }
-            if (tile.hasTag("updatable")) {
+            if (tile.hasTag("update")) {
                 getBaseLayer().updatableTiles.remove(tile);
             }
             getBaseLayer().tileMap.get(tile.x).set(tile.y, null);
@@ -322,6 +342,23 @@
         }
     }
 
+    public void inGameAddTile(Tile tile) {
+        if (tilesDesynced) {
+            if (tile.hasTag("volatile")) {
+                getBaseLayer().volatileTiles.add(tile);
+            }
+            if (tile.hasTag("notifiable")) {
+                getBaseLayer().notifiableTiles.add(tile);
+            }
+            if (tile.hasTag("update")) {
+                getBaseLayer().updatableTiles.add(tile);
+            }
+            getBaseLayer().tileMap.get(tile.x).set(tile.y, tile);
+        } else {
+            throw new IllegalStateException("The Level must be desynced before calling this to avoid the permanent alteration of tiles");
+        }
+    }
+
     public boolean inGame() {
         return player != null;
     }
@@ -377,7 +414,7 @@
             Tile copy = tile.copy();
             if (tile.hasTag("notifiable"))
                 getBaseLayer().notifiableTiles.add(copy);
-            if (tile.hasTag("updatable")) {
+            if (tile.hasTag("update")) {
                 getBaseLayer().updatableTiles.add(copy);
             }
             getBaseLayer().volatileTiles.add(copy);
@@ -429,14 +466,14 @@
             if (tile.hasTag("notifiable")) {
                 getBaseLayer().notifiableTiles.add(copy);
             }
-            if (tile.hasTag("updatable")) {
+            if (tile.hasTag("update")) {
                 getBaseLayer().updatableTiles.add(copy);
             }
         }
         for (Tile tile : getBackgroundLayer().allTiles) {
             if (tile.hasTag("ignore_background")) {
                 Tile copy = tile.copy();
-                if (tile.hasTag("updatable")) {
+                if (tile.hasTag("update")) {
                     getBaseLayer().updatableTiles.add(copy);
                 }
                 if (tile.hasTag("notifiable")) {
@@ -453,186 +490,188 @@
     }
 
     public void render(Graphics g) {
-        render(g, false);
+        render(g, false, false);
     }
 
-    public void render(Graphics g, boolean backgroundPriority) {
-        Vector2 renderAround = g.getCameraPosition();
-        int centerX = (int) (renderAround.x / 64);
-        int centerY = (int) (renderAround.y / 64);
-        int screenTileWidth = (int) Math.ceil(LittleH.program.getWidth() / 64f * LittleH.program.dynamicCamera.zoom + 4);
-        int screenTileHeight = (int) Math.ceil(LittleH.program.getHeight() / 64f * LittleH.program.dynamicCamera.zoom + 4);
-        int startX = centerX - screenTileWidth / 2;
-        int startY = centerY - screenTileHeight / 2;
-        int endX = startX + screenTileWidth;
-        int endY = startY + screenTileHeight;
+    public void render(Graphics g, boolean backgroundPriority, boolean wiringMode) {
+        List<Point> toDrawGrid = new ArrayList<>();
+        if (wiringMode && !inGame()) {
+            toDrawGrid = renderWiring(g, backgroundPriority);
+        } else {
+            Vector2 renderAround = g.getCameraPosition();
+            int centerX = (int) (renderAround.x / 64);
+            int centerY = (int) (renderAround.y / 64);
+            int screenTileWidth = (int) Math.ceil(LittleH.program.getWidth() / 64f * LittleH.program.dynamicCamera.zoom + 4);
+            int screenTileHeight = (int) Math.ceil(LittleH.program.getHeight() / 64f * LittleH.program.dynamicCamera.zoom + 4);
+            int startX = centerX - screenTileWidth / 2;
+            int startY = centerY - screenTileHeight / 2;
+            int endX = startX + screenTileWidth;
+            int endY = startY + screenTileHeight;
 
-        List<Tile> backgroundPostRenders = new ArrayList<>();
+            List<Tile> backgroundPostRenders = new ArrayList<>();
 
-        g.resetTint();
-        g.resetColor();
+            g.resetTint();
+            g.resetColor();
 
-        if (!inGame()) {
-            if (backgroundPriority) {
-                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
-            } else {
-                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
-            }
-        } else {
-            g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));
-        }
+            if (!inGame()) {
+                if (backgroundPriority) {
+                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
+                } else {
+                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
+                }
+            } else {
+                g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));
+            }
 
-        // Draw in the back
-        for (int i = startX; i < endX; i++) {
-            if (i < 0 || i >= getWidth()) continue;
-            for (int j = startY; j < endY; j++) {
-                if (j < 0 || j >= getHeight()) continue;
-                if (!inGame()) {
-                    Tile tile;
-                    if (backgroundPriority) {
-                        // Draw foreground behind
-                        tile = getTileAt("normal", i, j);
-                    } else {
-                        // Draw background
-                        tile = getTileAt("background", i, j);
-                    }
-                    if (tile != null) {
-                        tile.render(inGame(), g);
-                        if (tile.hasTag("post_render"))
-                            backgroundPostRenders.add(tile);
-                    }
-                } else {
-                    // Draw background
-                    // Tint multiplies with graphics color to make a darker background
-                    Tile tile = getTileAt("background", i, j);
-                    if (tile != null) {
-                        tile.render(inGame(), g);
-                        if (tile.hasTag("post_render"))
-                            backgroundPostRenders.add(tile);
-                        else if (tile.hasTag("post_render_in_game") && player != null)
-                            backgroundPostRenders.add(tile);
-                    }
-                }
-            }
-        }
+            // Draw in the back
+            for (int i = startX; i < endX; i++) {
+                if (i < 0 || i >= getWidth()) continue;
+                for (int j = startY; j < endY; j++) {
+                    if (j < 0 || j >= getHeight()) continue;
+                    if (!inGame()) {
+                        Tile tile;
+                        if (backgroundPriority) {
+                            // Draw foreground behind
+                            tile = getTileAt("normal", i, j);
+                        } else {
+                            // Draw background
+                            tile = getTileAt("background", i, j);
+                        }
+                        if (tile != null) {
+                            tile.render(inGame(), g);
+                            if (tile.hasTag("post_render"))
+                                backgroundPostRenders.add(tile);
+                        }
+                    } else {
+                        // Draw background
+                        // Tint multiplies with graphics color to make a darker background
+                        Tile tile = getTileAt("background", i, j);
+                        if (tile != null) {
+                            tile.render(inGame(), g);
+                            if (tile.hasTag("post_render"))
+                                backgroundPostRenders.add(tile);
+                            else if (tile.hasTag("special_render") && player != null)
+                                backgroundPostRenders.add(tile);
+                        }
+                    }
+                }
+            }
 
-        g.resetTint();
-        g.resetColor();
+            g.resetTint();
+            g.resetColor();
 
-        List<Tile> postRenders = new ArrayList<>();
-        List<Tile> visibleTiles = new ArrayList<>();
-        List<Point> toDrawGrid = new ArrayList<>();
+            List<Tile> postRenders = new ArrayList<>();
+            List<Tile> visibleTiles = new ArrayList<>();
 
-        backgroundPostRenders = (drawPostRenders(g, backgroundPostRenders, true, true, false));
+            backgroundPostRenders = (drawPostRenders(g, backgroundPostRenders, true, true, false));
 
-        // Draw in the front but behind players
-        for (int i = startX; i < endX; i++) {
-            if (i < 0 || i >= getWidth()) continue;
-            for (int j = startY; j < endY; j++) {
-                if (j < 0 || j >= getHeight()) continue;
-                if (!inGame()) {
-                    // Draw background in front
-                    if (backgroundPriority) {
-                        Tile tile = getTileAt("background", i, j);
-                        if (tile != null) {
-                            if (!(tile.isSolid() && tile.hasTag("tileset"))) {
-                                tile.render(inGame(), g);
-                            }
-                            else visibleTiles.add(tile);
-                            if (tile.hasTag("post_render"))
-                                postRenders.add(tile);
-                        }
-                        toDrawGrid.add(new Point(i * 64, j * 64));
-                        continue;
-                    }
-                    // Draw foreground
-                    Tile tile = getTileAt("normal", i, j);
-                    if (tile != null) {
-                        if (!(tile.isSolid() && tile.hasTag("tileset"))) {
-                            tile.render(inGame(), g);
-                        }
-                        else visibleTiles.add(tile);
-                        if (tile.hasTag("post_render"))
-                            postRenders.add(tile);
-                    }
-                    toDrawGrid.add(new Point(i * 64, j * 64));
-                } else {
-                    // Draw foreground
-                    Tile tile = getTileAt("normal", i, j);
-                    if (tile != null) {
-                        if (!(tile.isSolid() && !tile.ignoreTiling)) tile.render(inGame(), g);
-                        else visibleTiles.add(tile);
-                        if (tile.hasTag("post_render"))
-                            postRenders.add(tile);
-                        else if (tile.hasTag("post_render_in_game") && player != null)
-                            postRenders.add(tile);
-                    }
-                }
-            }
-        }
+            // Draw in the front but behind players
+            for (int i = startX; i < endX; i++) {
+                if (i < 0 || i >= getWidth()) continue;
+                for (int j = startY; j < endY; j++) {
+                    if (j < 0 || j >= getHeight()) continue;
+                    if (!inGame()) {
+                        // Draw background in front
+                        if (backgroundPriority) {
+                            Tile tile = getTileAt("background", i, j);
+                            if (tile != null) {
+                                if (!(tile.isSolid() && tile.hasTag("tileset"))) {
+                                    tile.render(inGame(), g);
+                                } else visibleTiles.add(tile);
+                                if (tile.hasTag("post_render"))
+                                    postRenders.add(tile);
+                            }
+                            toDrawGrid.add(new Point(i * 64, j * 64));
+                            continue;
+                        }
+                        // Draw foreground
+                        Tile tile = getTileAt("normal", i, j);
+                        if (tile != null) {
+                            if (!(tile.isSolid() && tile.hasTag("tileset"))) {
+                                tile.render(inGame(), g);
+                            } else visibleTiles.add(tile);
+                            if (tile.hasTag("post_render"))
+                                postRenders.add(tile);
+                        }
+                        toDrawGrid.add(new Point(i * 64, j * 64));
+                    } else {
+                        // Draw foreground
+                        Tile tile = getTileAt("normal", i, j);
+                        if (tile != null) {
+                            if (!(tile.isSolid() && !tile.ignoreTiling)) tile.render(inGame(), g);
+                            else visibleTiles.add(tile);
+                            if (tile.hasTag("post_render"))
+                                postRenders.add(tile);
+                            else if (tile.hasTag("special_render") && player != null)
+                                postRenders.add(tile);
+                        }
+                    }
+                }
+            }
 
-        postRenders = drawPostRenders(g, postRenders, false, true, false);
+            postRenders = drawPostRenders(g, postRenders, false, true, false);
 
-        enemies.forEach(enemy -> enemy.render(g, this));
-        entities.forEach(entity -> entity.render(g, this));
-        if (inGame())
-            player.render(g, this);
-        particles.forEach(particle -> particle.render(g));
+            enemies.forEach(enemy -> enemy.render(g, this));
+            entities.forEach(entity -> entity.render(g, this));
+            if (inGame())
+                player.render(g, this);
+            particles.forEach(particle -> particle.render(g));
 
-        if (!inGame()) {
-            if (backgroundPriority) {
-                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
-            } else {
-                g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
-            }
-        } else {
-            g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));
-        }
+            if (!inGame()) {
+                if (backgroundPriority) {
+                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
+                } else {
+                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));
+                }
+            } else {
+                g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));
+            }
 
-        if (!inGame()) {
-            if (backgroundPriority) {
-                g.setTint(new Color(1f, 1f, 1f, 0.65f));
-            } else {
-                g.resetTint();
-            }
-        } else {
-            g.resetTint();
-        }
+            if (!inGame()) {
+                if (backgroundPriority) {
+                    g.setTint(new Color(1f, 1f, 1f, 0.65f));
+                } else {
+                    g.resetTint();
+                }
+            } else {
+                g.resetTint();
+            }
 
-        List<Tile> textRenders = drawPostRenders(g, postRenders, false, false, false);
-        textRenders.addAll(drawPostRenders(g, backgroundPostRenders, true, false, false));
+            List<Tile> textRenders = drawPostRenders(g, postRenders, false, false, false);
+            textRenders.addAll(drawPostRenders(g, backgroundPostRenders, true, false, false));
 
-        // Draw in the front
-        for (Tile tile : visibleTiles) {
-            if (!inGame()) {
-                // Draw background in front
-                if (backgroundPriority) {
-                    if (tile != null) {
-                        tile.render(inGame(), g);
-                        if (tile.hasTag("post_render"))
-                            postRenders.add(0, tile);
-                    }
-                    continue;
-                }
-                // Draw foreground
-                if (tile != null) {
-                    tile.render(inGame(), g);
-                    if (tile.hasTag("post_render"))
-                        postRenders.add(0, tile);
-                }
-            } else {
-                // Draw foreground
-                if (tile != null) {
-                    tile.render(inGame(), g);
-                    if (tile.hasTag("post_render"))
-                        postRenders.add(0, tile);
-                    else if (tile.hasTag("post_render_in_game") && player != null)
-                        postRenders.add(0, tile);
-                }
-            }
-        }
+            // Draw in the front
+            for (Tile tile : visibleTiles) {
+                if (!inGame()) {
+                    // Draw background in front
+                    if (backgroundPriority) {
+                        if (tile != null) {
+                            tile.render(inGame(), g);
+                            if (tile.hasTag("post_render"))
+                                postRenders.add(0, tile);
+                        }
+                        continue;
+                    }
+                    // Draw foreground
+                    if (tile != null) {
+                        tile.render(inGame(), g);
+                        if (tile.hasTag("post_render"))
+                            postRenders.add(0, tile);
+                    }
+                } else {
+                    // Draw foreground
+                    if (tile != null) {
+                        tile.render(inGame(), g);
+                        if (tile.hasTag("post_render"))
+                            postRenders.add(0, tile);
+                        else if (tile.hasTag("special_render") && player != null)
+                            postRenders.add(0, tile);
+                    }
+                }
+            }
 
-        drawPostRenders(g, textRenders, false, false, true);
+            drawPostRenders(g, textRenders, false, false, true);
+        }
 
         g.resetTint();
 
@@ -656,7 +695,9 @@
 
         LittleH.program.useStaticCamera();
 
-        if (backgroundPriority) {
+        if (wiringMode) {
+            g.drawString("WIRING MODE", LittleH.borderedFont, -MainMenu.relZeroX() - 96, -MainMenu.relZeroY() - 96, LittleH.defaultFontScale * 0.75f, 1);
+        } else if (backgroundPriority) {
             g.drawString("EDITING BACKGROUND", LittleH.borderedFont, -MainMenu.relZeroX() - 96, -MainMenu.relZeroY() - 96, LittleH.defaultFontScale * 0.75f, 1);
         }
 
@@ -706,6 +747,42 @@
         }
     }
 
+    // Returns tile positioned run through for drawing the grid
+    private List<Point> renderWiring(Graphics g, boolean backgroundPriority) {
+        Vector2 renderAround = g.getCameraPosition();
+        int centerX = (int) (renderAround.x / 64);
+        int centerY = (int) (renderAround.y / 64);
+        int screenTileWidth = (int) Math.ceil(LittleH.program.getWidth() / 64f * LittleH.program.dynamicCamera.zoom + 4);
+        int screenTileHeight = (int) Math.ceil(LittleH.program.getHeight() / 64f * LittleH.program.dynamicCamera.zoom + 4);
+        int startX = centerX - screenTileWidth / 2;
+        int startY = centerY - screenTileHeight / 2;
+        int endX = startX + screenTileWidth;
+        int endY = startY + screenTileHeight;
+        MapLayer layerToRender = mapLayers.get(backgroundPriority ? "background" : "normal");
+        List<Point> tilesRendered = new ArrayList<>();
+        g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.33f));
+        for (int i = startX; i < endX; i++) {
+            if (i < 0 || i >= getWidth()) continue;
+            for (int j = startY; j < endY; j++) {
+                if (j < 0 || j >= getHeight()) continue;
+                Tile tile = layerToRender.tileMap.get(i).get(j);
+                if (tile != null) tile.render(inGame(), g);
+                tilesRendered.add(new Point(i, j));
+            }
+        }
+        layerToRender = mapLayers.get("wiring");
+        g.resetTint();
+        for (int i = startX; i < endX; i++) {
+            if (i < 0 || i >= getWidth()) continue;
+            for (int j = startY; j < endY; j++) {
+                if (j < 0 || j >= getHeight()) continue;
+                Tile tile = layerToRender.tileMap.get(i).get(j);
+                if (tile != null) tile.render(inGame(), g);
+            }
+        }
+        return tilesRendered;
+    }
+
     public Tile[][] getNeighbors(int tileX, int tileY, boolean background) {
         // Magic
         Tile[][] neighbors = new Tile[3][3];
@@ -817,7 +894,7 @@
                     }
                 }
             }
-            if (tile.hasTag("sinusoid")) {
+            if (tile.hasTag("levitating")) {
                 g.drawImage(tile.getImage(), tile.x * 64, tile.y * 64 + MathUtils.sinDeg(LittleH.getTick() / 2f + (tile.x + tile.y) * 15) * 8, 64, 64, tile.getDrawSection());
             }
             g.resetColor();
Index: assets/scripts/base_tags.sab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@grass [ solid, tileset ]\r\n@stone [ solid, tileset ]\r\n@location_bricks [ solid, tileset ]\r\n@sandstone [ solid, tileset ]\r\n@rock [ solid, tileset ]\r\n@snowy_turf [ solid, tileset ]\r\n@ice [ solid, slippery, tileset ]\r\n@slick_block [ solid, slick, tileset ]\r\n@malice [ small, death, tileset ]\r\n@bounce [ bounce, tileset, enemy_walkable ]\r\n@water [ water, tileset, post_render_in_game, invisible, render_normal, small, ignore_background ]\r\n@checkpoint [ volatile, checkpoint ]\r\n@strong_checkpoint [ volatile, checkpoint, notifiable, notify_checkpoint, notified_reset_type ]\r\n@coin [ volatile, pickup, coin, property_set, 4_set ]\r\n@coin_box [ volatile, coin_box, notifiable, notify_all_coins, notified_alternate_type, property_set, 8_set ]\r\n@color_cube [ property_set, 15_set ]\r\n@dynamic_color_cube [ string_picker, render_color, property_set, 4_set ]\r\n@dialogue_trigger [ string_picker, pickup, invisible, dialogue, ignore_background ]\r\n@end [ volatile, ambient_particles, updatable, pickup, sinusoid, post_render_in_game, end, invisible ]\r\n@enemy [ enemy, invisible, volatile, updatable, property_set, 4_set ]\r\n@key [ volatile, pickup, key ]\r\n@key_box [ volatile, solid, key_box ]\r\n@evil_key [ volatile, ambient_particles, updatable, pickup, sinusoid, post_render_in_game, evil, key, invisible ]\r\n@evil_key_box [ volatile, solid, evil, key_box ]\r\n@h_fragment [ end, ambient_particles, updatable, property_set, 7_set, pickup, sinusoid, post_render_in_game, invisible ]\r\n@statues [ property_set, 8_set ]\r\n@half_spike [ multi_hitbox, small_triangle, death, property_set, 4_set ]\r\n@invisible_death [ death, invisible ]\r\n@invisiblock [ solid, invisible, slick ]\r\n@one_way [ quarter, solid, one_way, property_set, 4_set ]\r\n@power_fruit [ pickup, ambient_particles, updatable, volatile, powerup, property_set, 7_set, sinusoid, invisible, post_render_in_game ]\r\n@power_fruit_spawner [ invisible, ignore_background, updatable, respawn_power_fruit, notifiable, notify_game_start ]\r\n@spawn [ start ]\r\n@mud [ volatile, solid, crumbling, property_set, 2_set ]\r\n@text [ string_picker, text, invisible, property_set, 3_set, post_render ]\r\n@timer [ pickup, timer, property_set, 4_set ]\r\n@enemy_box [ volatile, enemy_box, property_set, 10_set, notified_alternate_type ]\r\n@grass_decor [ property_set, 12_set, windy, post_render_in_game, render_normal, invisible ]\r\n@rocks_decor [ property_set, 16_set ]\r\n@vines_decor [ property_set, 8_set, vines, post_render_in_game, render_normal, invisible ]\r\n@gravity_swapper [ property_set, 6_set, pickup, volatile, even_pickup, gravity_swapper ]\r\n@jump_pearl [ pickup, jump_refresh, ambient_particles, updatable, volatile, sinusoid, invisible, post_render_in_game ]\r\n@slope [ property_set, 4_set, solid, slope, normal_slope ]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/scripts/base_tags.sab b/assets/scripts/base_tags.sab
--- a/assets/scripts/base_tags.sab	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/assets/scripts/base_tags.sab	(date 1708572306730)
@@ -8,36 +8,42 @@
 @slick_block [ solid, slick, tileset ]
 @malice [ small, death, tileset ]
 @bounce [ bounce, tileset, enemy_walkable ]
-@water [ water, tileset, post_render_in_game, invisible, render_normal, small, ignore_background ]
+@water [ water, tileset, special_render, invisible, render_normal, small, ignore_background ]
 @checkpoint [ volatile, checkpoint ]
 @strong_checkpoint [ volatile, checkpoint, notifiable, notify_checkpoint, notified_reset_type ]
-@coin [ volatile, pickup, coin, property_set, 4_set ]
-@coin_box [ volatile, coin_box, notifiable, notify_all_coins, notified_alternate_type, property_set, 8_set ]
-@color_cube [ property_set, 15_set ]
-@dynamic_color_cube [ string_picker, render_color, property_set, 4_set ]
+@coin [ volatile, pickup, coin, states(4) ]
+@coin_box [ volatile, coin_box, notifiable, notify_all_coins, notified_alternate_type, states(15) ]
+@color_cube [ states(15) ]
+@dynamic_color_cube [ string_picker, render_color, states(4) ]
 @dialogue_trigger [ string_picker, pickup, invisible, dialogue, ignore_background ]
-@end [ volatile, ambient_particles, updatable, pickup, sinusoid, post_render_in_game, end, invisible ]
-@enemy [ enemy, invisible, volatile, updatable, property_set, 4_set ]
+@end [ volatile, ambient_particles, update, pickup, levitating, special_render, end, invisible ]
+@enemy [ enemy, invisible, volatile, update, states(5) ]
 @key [ volatile, pickup, key ]
 @key_box [ volatile, solid, key_box ]
-@evil_key [ volatile, ambient_particles, updatable, pickup, sinusoid, post_render_in_game, evil, key, invisible ]
+@evil_key [ volatile, ambient_particles, update, pickup, levitating, special_render, evil, key, invisible ]
 @evil_key_box [ volatile, solid, evil, key_box ]
-@h_fragment [ end, ambient_particles, updatable, property_set, 7_set, pickup, sinusoid, post_render_in_game, invisible ]
-@statues [ property_set, 8_set ]
-@half_spike [ multi_hitbox, small_triangle, death, property_set, 4_set ]
+@h_fragment [ end, ambient_particles, update, states(7), pickup, levitating, special_render, invisible ]
+@statues [ states(8) ]
+@half_spike [ multi_hitbox, small_triangle, death, states(4) ]
 @invisible_death [ death, invisible ]
 @invisiblock [ solid, invisible, slick ]
-@one_way [ quarter, solid, one_way, property_set, 4_set ]
-@power_fruit [ pickup, ambient_particles, updatable, volatile, powerup, property_set, 7_set, sinusoid, invisible, post_render_in_game ]
-@power_fruit_spawner [ invisible, ignore_background, updatable, respawn_power_fruit, notifiable, notify_game_start ]
+@one_way [ quarter, solid, one_way, states(4) ]
+@power_fruit [ pickup, ambient_particles, update, volatile, powerup, states(8), levitating, invisible, special_render ]
+@power_fruit_spawner [ invisible, ignore_background, update, respawn_power_fruit, notifiable, notify_game_start ]
 @spawn [ start ]
-@mud [ volatile, solid, crumbling, property_set, 2_set ]
-@text [ string_picker, text, invisible, property_set, 3_set, post_render ]
-@timer [ pickup, timer, property_set, 4_set ]
-@enemy_box [ volatile, enemy_box, property_set, 10_set, notified_alternate_type ]
-@grass_decor [ property_set, 12_set, windy, post_render_in_game, render_normal, invisible ]
-@rocks_decor [ property_set, 16_set ]
-@vines_decor [ property_set, 8_set, vines, post_render_in_game, render_normal, invisible ]
-@gravity_swapper [ property_set, 6_set, pickup, volatile, even_pickup, gravity_swapper ]
-@jump_pearl [ pickup, jump_refresh, ambient_particles, updatable, volatile, sinusoid, invisible, post_render_in_game ]
-@slope [ property_set, 4_set, solid, slope, normal_slope ]
+@mud [ volatile, solid, crumbling, states(2) ]
+@text [ string_picker, text, invisible, states(3), post_render ]
+@timer [ pickup, timer, states(4) ]
+@enemy_box [ volatile, enemy_box, states(10), notified_alternate_type ]
+@grass_decor [ states(12), windy, special_render, render_normal, invisible ]
+@rocks_decor [ states(16) ]
+@vines_decor [ states(8), vines, special_render, render_normal, invisible ]
+@gravity_swapper [ states(6), pickup, volatile, even_pickup, gravity_swapper ]
+@jump_pearl [ pickup, jump_refresh, ambient_particles, update, volatile, levitating, invisible, special_render ]
+@slope [ states(4), solid, slope, normal_slope ]
+@red_wire [ tileset, wire, red_wire, exclusive_tiling(red_wire, junction) ]
+@yellow_wire [ tileset, wire, yellow_wire, exclusive_tiling(yellow_wire, junction) ]
+@green_wire [ tileset, wire, green_wire, exclusive_tiling(green_wire, junction) ]
+@blue_wire [ tileset, wire, blue_wire, exclusive_tiling(blue_wire, junction) ]
+@button [ wiring_toggle, quarter, states(4), volatile ]
+@actuator [ wiring_activated, actuator, volatile, notifiable, notify_game_start ]
Index: core/src/com/sab/littleh/game/level/LevelLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.level;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.Version;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.mainmenu.InternalLevelMenu;\r\nimport com.sab.littleh.mainmenu.LevelEditorMenu;\r\nimport com.sab.littleh.mainmenu.LevelErrorMenu;\r\nimport com.sab.littleh.settings.Settings;\r\nimport com.sab.littleh.util.LoadingUtil;\r\nimport com.sab.littleh.util.sab_format.*;\r\n\r\nimport java.awt.*;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\npublic class LevelLoader {\r\n    public static final SabData tagsByTile;\r\n    private static String[] expectedProperties = new String[] {\r\n            \"crouching\",\r\n            \"double_jumping\",\r\n            \"wall_sliding\",\r\n            \"look_around\",\r\n            \"author\",\r\n            \"name\",\r\n            \"background\",\r\n            \"time_limit\",\r\n            \"version\",\r\n            \"is_deluxe\"\r\n    };\r\n    private static String[] defaultValues = new String[] {\r\n            \"true\",\r\n            \"true\",\r\n            \"true\",\r\n            \"true\",\r\n            Settings.localSettings.authorName.value,\r\n            \"My Level\",\r\n            \"mountains\",\r\n            \"-1\",\r\n            LittleH.VERSION,\r\n            \"true\"\r\n    };\r\n\r\n    static {\r\n        try {\r\n            tagsByTile = SabReader.read(LevelLoader.class.getResourceAsStream(\"/scripts/base_tags.sab\"));\r\n        } catch (SabParsingException e) {\r\n            System.out.println(\"AshQuimby forgot to put the file there :P\");\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public static void refreshDefaults() {\r\n        defaultValues = new String[] {\r\n                \"true\",\r\n                \"true\",\r\n                \"true\",\r\n                \"true\",\r\n                Settings.localSettings.authorName.value,\r\n                \"My Level\",\r\n                \"mountains\",\r\n                \"-1\",\r\n                LittleH.VERSION,\r\n                \"true\"\r\n        };\r\n    }\r\n\r\n    public static Level readInternalLevel(String streamSource) {\r\n        boolean invertY = false;\r\n        boolean updateTilesets = false;\r\n        // Updates for if the level was originally made in the Little H as opposed to the Little H Deluxe\r\n        // Basically just flips the y coordinates of every tile\r\n\r\n        InputStream inputStream = LittleH.getInternalLevel(streamSource);\r\n        SabData mapData = SabReader.read(inputStream);\r\n\r\n        if (mapData.getValue(\"is_deluxe\") == null || !mapData.getValue(\"is_deluxe\").asBool()) {\r\n            invertY = true;\r\n        }\r\n\r\n        if (mapData.getValue(\"version\").toString().trim().equals(LittleH.VERSION)) {\r\n            updateTilesets = true;\r\n        }\r\n\r\n        for (int i = 0; i < expectedProperties.length; i++) {\r\n            String string = expectedProperties[i];\r\n            if (!mapData.getValues().containsKey(string)) {\r\n                mapData.insertValue(string, defaultValues[i]);\r\n            }\r\n        }\r\n\r\n        inputStream = LittleH.getInternalLevel(streamSource);\r\n\r\n        Level level = new Level(mapData);\r\n        Scanner scanner = SabReader.skipSabPreface(new Scanner(inputStream));\r\n\r\n        List<Tile> tiles = new ArrayList<>();\r\n        List<Tile> background = new ArrayList<>();\r\n\r\n        int levelWidth = 31;\r\n        int levelHeight = 31;\r\n\r\n        Set<Point> usedPositions = new HashSet<>();\r\n\r\n        while (scanner.hasNext()) {\r\n            String nextLine = scanner.nextLine();\r\n\r\n            // Load background\r\n            if (nextLine.startsWith(\"@background_tiles\")) {\r\n                while (scanner.hasNext()) {\r\n                    nextLine = scanner.nextLine();\r\n                    Tile tile = getTile(nextLine);\r\n                    if (tile != null && !tile.image.equals(\"delete\")) {\r\n                        Point tilePosition = new Point(tile.x, tile.y);\r\n                        levelWidth = Math.max(levelWidth, tile.x);\r\n                        levelHeight = Math.max(levelHeight, tile.y);\r\n                        if (tile.hasTag(\"start\"))\r\n                            LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));\r\n                        background.add(tile);\r\n                        usedPositions.add(tilePosition);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            Tile tile = getTile(nextLine);\r\n            if (tile != null && !tile.image.equals(\"delete\")) {\r\n                Point tilePosition = new Point(tile.x, tile.y);\r\n                if (usedPositions.contains(tilePosition)) continue;\r\n                levelWidth = Math.max(levelWidth, tile.x);\r\n                levelHeight = Math.max(levelHeight, tile.y);\r\n                if (tile.hasTag(\"start\"))\r\n                    LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));\r\n                tiles.add(tile);\r\n                usedPositions.add(tilePosition);\r\n            }\r\n        }\r\n\r\n        levelWidth += 1;\r\n        levelHeight += 1;\r\n\r\n        if (invertY) {\r\n            for (Tile tile : tiles) {\r\n                tile.y = levelHeight - tile.y - 1;\r\n                if (tile.hasTag(\"start\"))\r\n                    LittleH.program.dynamicCamera.targetPosition = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);\r\n            }\r\n        }\r\n\r\n        scanner.close();\r\n\r\n        int minY;\r\n        int minX;\r\n\r\n        if (tiles.size() > 0) {\r\n            minX = tiles.get(0).x;\r\n            minY = tiles.get(0).y;\r\n        } else {\r\n            minX = 0;\r\n            minY = 0;\r\n        }\r\n\r\n        if (minY != 0 && minX != 0) {\r\n            for (Tile tile : tiles) {\r\n                minX = Math.min(tile.x, minX);\r\n                minY = Math.min(tile.y, minY);\r\n                if (minY == 0 && minX == 0) break;\r\n            }\r\n\r\n            for (Tile tile : background) {\r\n                minX = Math.min(tile.x, minX);\r\n                minY = Math.min(tile.y, minY);\r\n                if (minY == 0 && minX == 0) break;\r\n            }\r\n\r\n            if (minY != 0 || minX != 0) {\r\n                for (Tile tile : tiles) {\r\n                    tile.x -= minX;\r\n                    tile.y -= minY;\r\n                    if (tile.hasTag(\"start\"))\r\n                        LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));\r\n                }\r\n\r\n                for (Tile tile : background) {\r\n                    tile.x -= minX;\r\n                    tile.y -= minY;\r\n                }\r\n            }\r\n        }\r\n\r\n        level.addTiles(tiles, levelWidth, levelHeight);\r\n        level.addBackground(background);\r\n\r\n        if (updateTilesets) {\r\n            LevelEditor levelEditor = new LevelEditor(level, \"normal\");\r\n            LevelEditor backgroundEditor = new LevelEditor(level, \"background\");\r\n            for (Tile tile : tiles) {\r\n                levelEditor.checkTiling(levelEditor.getNeighbors(tile.x, tile.y), tile);\r\n            }\r\n            for (Tile tile : background) {\r\n                backgroundEditor.checkTiling(backgroundEditor.getNeighbors(tile.x, tile.y), tile);\r\n            }\r\n        }\r\n\r\n        mapData.insertValue(\"version\", LittleH.VERSION);\r\n\r\n        return level;\r\n    }\r\n\r\n    public static Level readLevel(SabData mapData, File file) throws IOException {\r\n        try {\r\n            boolean invertY = false;\r\n            boolean updateTilesets = false;\r\n            // Updates for if the level was originally made in the Little H as opposed to the Little H Deluxe\r\n            // Basically just flips the y coordinates of every tile\r\n\r\n            if (mapData.getValue(\"is_deluxe\") == null || !mapData.getValue(\"is_deluxe\").asBool()) {\r\n                invertY = true;\r\n                mapData.insertValue(\"is_deluxe\", new SabValue(\"true\"));\r\n            }\r\n\r\n            if (!mapData.getValue(\"version\").toString().trim().equals(LittleH.VERSION)) {\r\n                updateTilesets = true;\r\n            }\r\n\r\n            for (int i = 0; i < expectedProperties.length; i++) {\r\n                String string = expectedProperties[i];\r\n                if (!mapData.getValues().containsKey(string)) {\r\n                    mapData.insertValue(string, defaultValues[i]);\r\n                }\r\n            }\r\n\r\n            Level level = new Level(mapData);\r\n            Scanner scanner = SabReader.skipSabPreface(new Scanner(file));\r\n\r\n            List<Tile> tiles = new ArrayList<>();\r\n            List<Tile> background = new ArrayList<>();\r\n\r\n            int levelWidth = 31;\r\n            int levelHeight = 31;\r\n\r\n            Set<Point> usedPositions = new HashSet<>();\r\n\r\n            while (scanner.hasNext()) {\r\n                String nextLine = scanner.nextLine();\r\n\r\n                // Load background\r\n                if (nextLine.startsWith(\"@background_tiles\")) {\r\n                    while (scanner.hasNext()) {\r\n                        nextLine = scanner.nextLine();\r\n                        Tile tile = getTile(nextLine);\r\n                        if (tile != null && !tile.image.equals(\"delete\")) {\r\n                            Point tilePosition = new Point(tile.x, tile.y);\r\n                            levelWidth = Math.max(levelWidth, tile.x);\r\n                            levelHeight = Math.max(levelHeight, tile.y);\r\n                            if (tile.hasTag(\"start\"))\r\n                                LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));\r\n                            background.add(tile);\r\n                            usedPositions.add(tilePosition);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n\r\n                Tile tile = getTile(nextLine);\r\n                if (tile != null && !tile.image.equals(\"delete\")) {\r\n                    Point tilePosition = new Point(tile.x, tile.y);\r\n                    if (usedPositions.contains(tilePosition)) continue;\r\n                    levelWidth = Math.max(levelWidth, tile.x);\r\n                    levelHeight = Math.max(levelHeight, tile.y);\r\n                    if (tile.hasTag(\"start\"))\r\n                        LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));\r\n                    tiles.add(tile);\r\n                    usedPositions.add(tilePosition);\r\n                }\r\n            }\r\n\r\n            levelWidth += 1;\r\n            levelHeight += 1;\r\n\r\n            if (invertY) {\r\n                for (Tile tile : tiles) {\r\n                    tile.y = levelHeight - tile.y - 1;\r\n                    if (tile.hasTag(\"start\"))\r\n                        LittleH.program.dynamicCamera.targetPosition = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);\r\n                }\r\n            }\r\n\r\n            scanner.close();\r\n\r\n            int minY;\r\n            int minX;\r\n\r\n            if (tiles.size() > 0) {\r\n                minX = tiles.get(0).x;\r\n                minY = tiles.get(0).y;\r\n            } else {\r\n                minX = 0;\r\n                minY = 0;\r\n            }\r\n\r\n            if (minY != 0 && minX != 0) {\r\n                for (Tile tile : tiles) {\r\n                    minX = Math.min(tile.x, minX);\r\n                    minY = Math.min(tile.y, minY);\r\n                    if (minY == 0 && minX == 0) break;\r\n                }\r\n\r\n                for (Tile tile : background) {\r\n                    minX = Math.min(tile.x, minX);\r\n                    minY = Math.min(tile.y, minY);\r\n                    if (minY == 0 && minX == 0) break;\r\n                }\r\n\r\n                if (minY != 0 || minX != 0) {\r\n                    for (Tile tile : tiles) {\r\n                        tile.x -= minX;\r\n                        tile.y -= minY;\r\n                        if (tile.hasTag(\"start\"))\r\n                            LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));\r\n                    }\r\n\r\n                    for (Tile tile : background) {\r\n                        tile.x -= minX;\r\n                        tile.y -= minY;\r\n                    }\r\n                }\r\n            }\r\n\r\n            level.addTiles(tiles, levelWidth, levelHeight);\r\n            level.addBackground(background);\r\n\r\n            if (updateTilesets) {\r\n                LevelEditor levelEditor = new LevelEditor(level, \"normal\");\r\n                LevelEditor backgroundEditor = new LevelEditor(level, \"background\");\r\n                for (Tile tile : tiles) {\r\n                    levelEditor.checkTiling(levelEditor.getNeighbors(tile.x, tile.y), tile);\r\n                }\r\n                for (Tile tile : background) {\r\n                    backgroundEditor.checkTiling(backgroundEditor.getNeighbors(tile.x, tile.y), tile);\r\n                }\r\n            }\r\n\r\n            mapData.insertValue(\"version\", LittleH.VERSION);\r\n\r\n            if (invertY) {\r\n                saveLevel(file, level);\r\n            }\r\n\r\n            if (updateTilesets) {\r\n                saveLevel(file, level);\r\n            }\r\n\r\n            return level;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static void trim(List<List<Tile>> tilemap) {\r\n\r\n    }\r\n\r\n    public static Tile getTile(String string) {\r\n        Scanner scanner = new Scanner(string + \" \");\r\n        String image = \"\";\r\n        try {\r\n            // Position & image\r\n            int x = scanner.nextInt();\r\n            int y = scanner.nextInt();\r\n            image = scanner.next();\r\n\r\n            // Set up identifier for tags\r\n            String identifier = image;\r\n            if (!image.startsWith(\".\"))\r\n                identifier = image.substring(image.lastIndexOf(\"/\") + 1);\r\n\r\n            if (identifier.equals(\"delete\"))\r\n                return null;\r\n\r\n            // Tile type (which part of the spritesheet)\r\n            int tileType = scanner.nextInt();\r\n\r\n            String extra = scanner.nextLine().stripTrailing();\r\n            if (extra.isBlank())\r\n                // Save RAM by not storing a reference to a blank string\r\n                extra = null;\r\n\r\n            // Generate the tile\r\n            scanner.close();\r\n            return new Tile(x, y, image, tileType, getTileTags(identifier), extra);\r\n        } catch (Exception e) {\r\n            System.out.println(image);\r\n            if (scanner.hasNext()) {\r\n                System.out.println(scanner.next());\r\n            }\r\n            scanner.close();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static void loadTerrainMap(String resourcePath, List<List<Tile>> foreground, List<List<Tile>> background) {\r\n        try {\r\n            Scanner scanner = new Scanner(LevelLoader.class.getResourceAsStream(resourcePath));\r\n            scanner.nextLine();\r\n            while (!scanner.hasNext(\"@background\")) {\r\n                Tile tile = getTile(scanner.nextLine());\r\n                if (tile != null) {\r\n                    while (tile.x >= foreground.size())\r\n                        foreground.add(new ArrayList<>());\r\n                    while (tile.y >= foreground.get(tile.x).size())\r\n                        foreground.get(tile.x).add(null);\r\n                    foreground.get(tile.x).set(tile.y, tile);\r\n                }\r\n            }\r\n            scanner.nextLine();\r\n            while (scanner.hasNext()) {\r\n                Tile tile = getTile(scanner.nextLine());\r\n                if (tile != null) {\r\n                    while (tile.x >= background.size())\r\n                        background.add(new ArrayList<>());\r\n                    while (tile.y >= background.get(tile.x).size())\r\n                        background.get(tile.x).add(null);\r\n                    background.get(tile.x).set(tile.y, tile);\r\n                }\r\n            }\r\n        } catch (NullPointerException e) {\r\n            System.out.println(\"Terrain map asset \\\"\" + resourcePath + \"\\\" does not exist or could not be loaded.\");\r\n        }\r\n    }\r\n\r\n    public static String[] getTileTags(String tileId) {\r\n        return tagsByTile.getValue(tileId).asStringArray();\r\n    }\r\n\r\n    public static void saveLevel(File file, Level level) {\r\n        try {\r\n            file.delete();\r\n            file.createNewFile();\r\n            SabWriter.write(file, level.mapData);\r\n            FileWriter writer = new FileWriter(file, true);\r\n            for (Tile tile : level.getBaseLayer().allTiles) {\r\n                writer.write(tile.x + \" \" + tile.y + \" \" + tile.image + \" \" + tile.tileType + \" \");\r\n                if (tile.extra != null)\r\n                    writer.write(tile.extra + \" \");\r\n                writer.write(\"\\n\");\r\n            }\r\n            if (level.getBaseLayer().allTiles.size() > 0) {\r\n                writer.write(\"@background_tiles\\n\");\r\n                for (Tile tile : level.getBackgroundLayer().allTiles) {\r\n                    writer.write(tile.x + \" \" + tile.y + \" \" + tile.image + \" \" + tile.tileType + \" \");\r\n                    if (tile.extra != null)\r\n                        writer.write(tile.extra + \" \");\r\n                    writer.write(\"\\n\");\r\n                }\r\n            }\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void createLevel(String name, String fileName, String authorName, String background) {\r\n        File[] files = LittleH.findMaps();\r\n        Set<String> levelNames = new HashSet<>();\r\n        for (File file : files) {\r\n            levelNames.add(file.getName());\r\n        }\r\n        String fileNameTemp = fileName + \".map\";\r\n        int i = 0;\r\n        while (levelNames.contains(fileNameTemp)) {\r\n            i++;\r\n            fileNameTemp = fileName + \" (\" + i + \").map\";\r\n        }\r\n        fileName = fileNameTemp;\r\n\r\n        File levelFile = new File(LittleH.mapsFolder.getPath() + \"/\" + fileName);\r\n        try {\r\n            levelFile.createNewFile();\r\n        } catch (IOException e) {\r\n            LittleH.pendingMenu = new LevelErrorMenu(\"Program does not have the permission to create files or one with the same file name already exists\");\r\n        }\r\n        SabData mapData = new SabData();\r\n        for (i = 0; i < defaultValues.length; i++) {\r\n            mapData.insertValue(expectedProperties[i], defaultValues[i]);\r\n        }\r\n        mapData.insertValue(\"name\", name);\r\n        mapData.insertValue(\"author\", authorName);\r\n        mapData.insertValue(\"background\", background);\r\n\r\n        Level level = new Level(mapData);\r\n\r\n        level.addTiles(new ArrayList<>(), 16, 16);\r\n        level.addBackground(new ArrayList<>());\r\n\r\n        LevelLoader.saveLevel(levelFile, level);\r\n\r\n        LittleH.pendingMenu = new LevelEditorMenu(levelFile, level);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/level/LevelLoader.java b/core/src/com/sab/littleh/game/level/LevelLoader.java
--- a/core/src/com/sab/littleh/game/level/LevelLoader.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/level/LevelLoader.java	(date 1708573787787)
@@ -5,6 +5,7 @@
 import com.badlogic.gdx.math.Vector2;
 import com.sab.littleh.LittleH;
 import com.sab.littleh.game.tile.Tile;
+import com.sab.littleh.game.tile.TileTags;
 import com.sab.littleh.mainmenu.InternalLevelMenu;
 import com.sab.littleh.mainmenu.LevelEditorMenu;
 import com.sab.littleh.mainmenu.LevelErrorMenu;
@@ -13,15 +14,15 @@
 import com.sab.littleh.util.sab_format.*;
 
 import java.awt.*;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.InputStream;
+import java.io.*;
 import java.util.*;
 import java.util.List;
 
 public class LevelLoader {
+    public static final Map<String, TileTags> tileTagCache = new HashMap<>();
     public static final SabData tagsByTile;
+    private static boolean invertY;
+    private static boolean updateTilesets;
     private static String[] expectedProperties = new String[] {
             "crouching",
             "double_jumping",
@@ -72,19 +73,22 @@
     }
 
     public static Level readInternalLevel(String streamSource) {
-        boolean invertY = false;
-        boolean updateTilesets = false;
+        return readLevel(LittleH.getInternalLevel(streamSource), LittleH.getInternalLevel(streamSource));
+    }
+
+    public static Level readLevel(InputStream dataStream, InputStream inputStream) {
         // Updates for if the level was originally made in the Little H as opposed to the Little H Deluxe
         // Basically just flips the y coordinates of every tile
+        invertY = false;
+        updateTilesets = false;
 
-        InputStream inputStream = LittleH.getInternalLevel(streamSource);
-        SabData mapData = SabReader.read(inputStream);
+        SabData mapData = SabReader.read(dataStream);
 
         if (mapData.getValue("is_deluxe") == null || !mapData.getValue("is_deluxe").asBool()) {
             invertY = true;
         }
 
-        if (mapData.getValue("version").toString().trim().equals(LittleH.VERSION)) {
+        if (!mapData.getValue("version").toString().trim().equals(LittleH.VERSION)) {
             updateTilesets = true;
         }
 
@@ -95,13 +99,12 @@
             }
         }
 
-        inputStream = LittleH.getInternalLevel(streamSource);
-
         Level level = new Level(mapData);
         Scanner scanner = SabReader.skipSabPreface(new Scanner(inputStream));
 
         List<Tile> tiles = new ArrayList<>();
         List<Tile> background = new ArrayList<>();
+        List<Tile> wiring = new ArrayList<>();
 
         int levelWidth = 31;
         int levelHeight = 31;
@@ -114,6 +117,8 @@
             // Load background
             if (nextLine.startsWith("@background_tiles")) {
                 while (scanner.hasNext()) {
+                    if (nextLine.startsWith("@wiring_tiles"))
+                        break;
                     nextLine = scanner.nextLine();
                     Tile tile = getTile(nextLine);
                     if (tile != null && !tile.image.equals("delete")) {
@@ -126,229 +131,257 @@
                         usedPositions.add(tilePosition);
                     }
                 }
-                break;
             }
-
-            Tile tile = getTile(nextLine);
-            if (tile != null && !tile.image.equals("delete")) {
-                Point tilePosition = new Point(tile.x, tile.y);
-                if (usedPositions.contains(tilePosition)) continue;
-                levelWidth = Math.max(levelWidth, tile.x);
-                levelHeight = Math.max(levelHeight, tile.y);
-                if (tile.hasTag("start"))
-                    LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
-                tiles.add(tile);
-                usedPositions.add(tilePosition);
-            }
-        }
-
-        levelWidth += 1;
-        levelHeight += 1;
-
-        if (invertY) {
-            for (Tile tile : tiles) {
-                tile.y = levelHeight - tile.y - 1;
-                if (tile.hasTag("start"))
-                    LittleH.program.dynamicCamera.targetPosition = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);
-            }
-        }
-
-        scanner.close();
-
-        int minY;
-        int minX;
-
-        if (tiles.size() > 0) {
-            minX = tiles.get(0).x;
-            minY = tiles.get(0).y;
-        } else {
-            minX = 0;
-            minY = 0;
-        }
-
-        if (minY != 0 && minX != 0) {
-            for (Tile tile : tiles) {
-                minX = Math.min(tile.x, minX);
-                minY = Math.min(tile.y, minY);
-                if (minY == 0 && minX == 0) break;
-            }
-
-            for (Tile tile : background) {
-                minX = Math.min(tile.x, minX);
-                minY = Math.min(tile.y, minY);
-                if (minY == 0 && minX == 0) break;
-            }
-
-            if (minY != 0 || minX != 0) {
-                for (Tile tile : tiles) {
-                    tile.x -= minX;
-                    tile.y -= minY;
-                    if (tile.hasTag("start"))
-                        LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
-                }
-
-                for (Tile tile : background) {
-                    tile.x -= minX;
-                    tile.y -= minY;
-                }
-            }
-        }
-
-        level.addTiles(tiles, levelWidth, levelHeight);
-        level.addBackground(background);
-
-        if (updateTilesets) {
-            LevelEditor levelEditor = new LevelEditor(level, "normal");
-            LevelEditor backgroundEditor = new LevelEditor(level, "background");
-            for (Tile tile : tiles) {
-                levelEditor.checkTiling(levelEditor.getNeighbors(tile.x, tile.y), tile);
-            }
-            for (Tile tile : background) {
-                backgroundEditor.checkTiling(backgroundEditor.getNeighbors(tile.x, tile.y), tile);
-            }
-        }
-
-        mapData.insertValue("version", LittleH.VERSION);
-
-        return level;
-    }
 
-    public static Level readLevel(SabData mapData, File file) throws IOException {
-        try {
-            boolean invertY = false;
-            boolean updateTilesets = false;
-            // Updates for if the level was originally made in the Little H as opposed to the Little H Deluxe
-            // Basically just flips the y coordinates of every tile
-
-            if (mapData.getValue("is_deluxe") == null || !mapData.getValue("is_deluxe").asBool()) {
-                invertY = true;
-                mapData.insertValue("is_deluxe", new SabValue("true"));
-            }
-
-            if (!mapData.getValue("version").toString().trim().equals(LittleH.VERSION)) {
-                updateTilesets = true;
-            }
-
-            for (int i = 0; i < expectedProperties.length; i++) {
-                String string = expectedProperties[i];
-                if (!mapData.getValues().containsKey(string)) {
-                    mapData.insertValue(string, defaultValues[i]);
-                }
-            }
-
-            Level level = new Level(mapData);
-            Scanner scanner = SabReader.skipSabPreface(new Scanner(file));
-
-            List<Tile> tiles = new ArrayList<>();
-            List<Tile> background = new ArrayList<>();
-
-            int levelWidth = 31;
-            int levelHeight = 31;
-
-            Set<Point> usedPositions = new HashSet<>();
-
-            while (scanner.hasNext()) {
-                String nextLine = scanner.nextLine();
-
-                // Load background
-                if (nextLine.startsWith("@background_tiles")) {
-                    while (scanner.hasNext()) {
-                        nextLine = scanner.nextLine();
-                        Tile tile = getTile(nextLine);
-                        if (tile != null && !tile.image.equals("delete")) {
-                            Point tilePosition = new Point(tile.x, tile.y);
-                            levelWidth = Math.max(levelWidth, tile.x);
-                            levelHeight = Math.max(levelHeight, tile.y);
-                            if (tile.hasTag("start"))
-                                LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
-                            background.add(tile);
-                            usedPositions.add(tilePosition);
-                        }
-                    }
-                    break;
-                }
+            // Load wiring
+            if (nextLine.startsWith("@wiring_tiles")) {
+                while (scanner.hasNext()) {
+                    nextLine = scanner.nextLine();
+                    Tile tile = getTile(nextLine);
+                    if (tile != null && !tile.image.equals("delete")) {
+                        Point tilePosition = new Point(tile.x, tile.y);
+                        levelWidth = Math.max(levelWidth, tile.x);
+                        levelHeight = Math.max(levelHeight, tile.y);
+                        if (tile.hasTag("start"))
+                            LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
+                        wiring.add(tile);
+                        usedPositions.add(tilePosition);
+                    }
+                }
+                break;
+            }
 
-                Tile tile = getTile(nextLine);
-                if (tile != null && !tile.image.equals("delete")) {
-                    Point tilePosition = new Point(tile.x, tile.y);
-                    if (usedPositions.contains(tilePosition)) continue;
-                    levelWidth = Math.max(levelWidth, tile.x);
-                    levelHeight = Math.max(levelHeight, tile.y);
-                    if (tile.hasTag("start"))
-                        LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
-                    tiles.add(tile);
-                    usedPositions.add(tilePosition);
-                }
-            }
+            Tile tile = getTile(nextLine);
+            if (tile != null && !tile.image.equals("delete")) {
+                Point tilePosition = new Point(tile.x, tile.y);
+                if (usedPositions.contains(tilePosition)) continue;
+                levelWidth = Math.max(levelWidth, tile.x);
+                levelHeight = Math.max(levelHeight, tile.y);
+                if (tile.hasTag("start"))
+                    LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
+                tiles.add(tile);
+                usedPositions.add(tilePosition);
+            }
+        }
 
-            levelWidth += 1;
-            levelHeight += 1;
+        levelWidth += 1;
+        levelHeight += 1;
 
-            if (invertY) {
-                for (Tile tile : tiles) {
-                    tile.y = levelHeight - tile.y - 1;
-                    if (tile.hasTag("start"))
-                        LittleH.program.dynamicCamera.targetPosition = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);
-                }
-            }
+        if (invertY) {
+            for (Tile tile : tiles) {
+                tile.y = levelHeight - tile.y - 1;
+                if (tile.hasTag("start"))
+                    LittleH.program.dynamicCamera.targetPosition = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);
+            }
+        }
 
-            scanner.close();
+        scanner.close();
 
-            int minY;
-            int minX;
+        int minY;
+        int minX;
 
-            if (tiles.size() > 0) {
-                minX = tiles.get(0).x;
-                minY = tiles.get(0).y;
-            } else {
-                minX = 0;
-                minY = 0;
-            }
+        if (tiles.size() > 0) {
+            minX = tiles.get(0).x;
+            minY = tiles.get(0).y;
+        } else {
+            minX = 0;
+            minY = 0;
+        }
 
-            if (minY != 0 && minX != 0) {
-                for (Tile tile : tiles) {
-                    minX = Math.min(tile.x, minX);
-                    minY = Math.min(tile.y, minY);
-                    if (minY == 0 && minX == 0) break;
-                }
+        if (minY != 0 && minX != 0) {
+            for (Tile tile : tiles) {
+                minX = Math.min(tile.x, minX);
+                minY = Math.min(tile.y, minY);
+                if (minY == 0 && minX == 0) break;
+            }
 
-                for (Tile tile : background) {
-                    minX = Math.min(tile.x, minX);
-                    minY = Math.min(tile.y, minY);
-                    if (minY == 0 && minX == 0) break;
-                }
+            for (Tile tile : background) {
+                minX = Math.min(tile.x, minX);
+                minY = Math.min(tile.y, minY);
+                if (minY == 0 && minX == 0) break;
+            }
 
-                if (minY != 0 || minX != 0) {
-                    for (Tile tile : tiles) {
-                        tile.x -= minX;
-                        tile.y -= minY;
-                        if (tile.hasTag("start"))
-                            LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
-                    }
+            for (Tile tile : wiring) {
+                minX = Math.min(tile.x, minX);
+                minY = Math.min(tile.y, minY);
+                if (minY == 0 && minX == 0) break;
+            }
+
+            if (minY != 0 || minX != 0) {
+                for (Tile tile : tiles) {
+                    tile.x -= minX;
+                    tile.y -= minY;
+                    if (tile.hasTag("start"))
+                        LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
+                }
 
-                    for (Tile tile : background) {
-                        tile.x -= minX;
-                        tile.y -= minY;
-                    }
-                }
-            }
+                for (Tile tile : background) {
+                    tile.x -= minX;
+                    tile.y -= minY;
+                }
+            }
+        }
 
-            level.addTiles(tiles, levelWidth, levelHeight);
-            level.addBackground(background);
+        level.addTiles(tiles, levelWidth, levelHeight);
+        level.addBackground(background);
+        level.addWiring(wiring);
 
-            if (updateTilesets) {
-                LevelEditor levelEditor = new LevelEditor(level, "normal");
-                LevelEditor backgroundEditor = new LevelEditor(level, "background");
-                for (Tile tile : tiles) {
-                    levelEditor.checkTiling(levelEditor.getNeighbors(tile.x, tile.y), tile);
-                }
-                for (Tile tile : background) {
-                    backgroundEditor.checkTiling(backgroundEditor.getNeighbors(tile.x, tile.y), tile);
-                }
+        if (updateTilesets) {
+            LevelEditor levelEditor = new LevelEditor(level, "normal");
+            LevelEditor backgroundEditor = new LevelEditor(level, "background");
+            LevelEditor wiringEditor = new LevelEditor(level, "wiring");
+            for (Tile tile : tiles) {
+                levelEditor.checkTiling(levelEditor.getNeighbors(tile, tile.x, tile.y), tile);
+            }
+            for (Tile tile : background) {
+                backgroundEditor.checkTiling(backgroundEditor.getNeighbors(tile, tile.x, tile.y), tile);
+            }
+            for (Tile tile : wiring) {
+                wiringEditor.checkTiling(wiringEditor.getNeighbors(tile, tile.x, tile.y), tile);
             }
+        }
 
-            mapData.insertValue("version", LittleH.VERSION);
+        mapData.insertValue("version", LittleH.VERSION);
 
+        return level;
+    }
+
+    public static Level readLevel(SabData mapData, File file) throws IOException {
+        try {
+            Level level = readLevel(new FileInputStream(file), new FileInputStream(file));
+//            boolean invertY = false;
+//            boolean updateTilesets = false;
+//            // Updates for if the level was originally made in the Little H as opposed to the Little H Deluxe
+//            // Basically just flips the y coordinates of every tile
+//
+//            if (mapData.getValue("is_deluxe") == null || !mapData.getValue("is_deluxe").asBool()) {
+//                invertY = true;
+//                mapData.insertValue("is_deluxe", new SabValue("true"));
+//            }
+//
+//            if (!mapData.getValue("version").toString().trim().equals(LittleH.VERSION)) {
+//                updateTilesets = true;
+//            }
+//
+//            for (int i = 0; i < expectedProperties.length; i++) {
+//                String string = expectedProperties[i];
+//                if (!mapData.getValues().containsKey(string)) {
+//                    mapData.insertValue(string, defaultValues[i]);
+//                }
+//            }
+//
+//            Level level = new Level(mapData);
+//            Scanner scanner = SabReader.skipSabPreface(new Scanner(file));
+//
+//            List<Tile> tiles = new ArrayList<>();
+//            List<Tile> background = new ArrayList<>();
+//
+//            int levelWidth = 31;
+//            int levelHeight = 31;
+//
+//            Set<Point> usedPositions = new HashSet<>();
+//
+//            while (scanner.hasNext()) {
+//                String nextLine = scanner.nextLine();
+//
+//                // Load background
+//                if (nextLine.startsWith("@background_tiles")) {
+//                    while (scanner.hasNext()) {
+//                        nextLine = scanner.nextLine();
+//                        Tile tile = getTile(nextLine);
+//                        if (tile != null && !tile.image.equals("delete")) {
+//                            Point tilePosition = new Point(tile.x, tile.y);
+//                            levelWidth = Math.max(levelWidth, tile.x);
+//                            levelHeight = Math.max(levelHeight, tile.y);
+//                            if (tile.hasTag("start"))
+//                                LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
+//                            background.add(tile);
+//                            usedPositions.add(tilePosition);
+//                        }
+//                    }
+//                    break;
+//                }
+//
+//                Tile tile = getTile(nextLine);
+//                if (tile != null && !tile.image.equals("delete")) {
+//                    Point tilePosition = new Point(tile.x, tile.y);
+//                    if (usedPositions.contains(tilePosition)) continue;
+//                    levelWidth = Math.max(levelWidth, tile.x);
+//                    levelHeight = Math.max(levelHeight, tile.y);
+//                    if (tile.hasTag("start"))
+//                        LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
+//                    tiles.add(tile);
+//                    usedPositions.add(tilePosition);
+//                }
+//            }
+//
+//            levelWidth += 1;
+//            levelHeight += 1;
+//
+//            if (invertY) {
+//                for (Tile tile : tiles) {
+//                    tile.y = levelHeight - tile.y - 1;
+//                    if (tile.hasTag("start"))
+//                        LittleH.program.dynamicCamera.targetPosition = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);
+//                }
+//            }
+//
+//            scanner.close();
+//
+//            int minY;
+//            int minX;
+//
+//            if (tiles.size() > 0) {
+//                minX = tiles.get(0).x;
+//                minY = tiles.get(0).y;
+//            } else {
+//                minX = 0;
+//                minY = 0;
+//            }
+//
+//            if (minY != 0 && minX != 0) {
+//                for (Tile tile : tiles) {
+//                    minX = Math.min(tile.x, minX);
+//                    minY = Math.min(tile.y, minY);
+//                    if (minY == 0 && minX == 0) break;
+//                }
+//
+//                for (Tile tile : background) {
+//                    minX = Math.min(tile.x, minX);
+//                    minY = Math.min(tile.y, minY);
+//                    if (minY == 0 && minX == 0) break;
+//                }
+//
+//                if (minY != 0 || minX != 0) {
+//                    for (Tile tile : tiles) {
+//                        tile.x -= minX;
+//                        tile.y -= minY;
+//                        if (tile.hasTag("start"))
+//                            LittleH.program.dynamicCamera.setPosition(new Vector2(tile.x * 64 + 32, tile.y * 64 + 32));
+//                    }
+//
+//                    for (Tile tile : background) {
+//                        tile.x -= minX;
+//                        tile.y -= minY;
+//                    }
+//                }
+//            }
+//
+//            level.addTiles(tiles, levelWidth, levelHeight);
+//            level.addBackground(background);
+//
+//            if (updateTilesets) {
+//                LevelEditor levelEditor = new LevelEditor(level, "normal");
+//                LevelEditor backgroundEditor = new LevelEditor(level, "background");
+//                for (Tile tile : tiles) {
+//                    levelEditor.checkTiling(levelEditor.getNeighbors(tile.x, tile.y), tile);
+//                }
+//                for (Tile tile : background) {
+//                    backgroundEditor.checkTiling(backgroundEditor.getNeighbors(tile.x, tile.y), tile);
+//                }
+//            }
+//
+//            mapData.insertValue("version", LittleH.VERSION);
             if (invertY) {
                 saveLevel(file, level);
             }
@@ -395,9 +428,23 @@
 
             // Generate the tile
             scanner.close();
-            return new Tile(x, y, image, tileType, getTileTags(identifier), extra);
+            if (!tileTagCache.containsKey(image)) {
+                String[] tags = tagsByTile.getValue(identifier).asStringArray();
+                TileTags tileTags = new TileTags();
+                for (String tag : tags) {
+                    int index = tag.indexOf("(");
+                    if (index != -1) {
+                        tileTags.addTag(tag.substring(0, index), tag.substring(index, tag.lastIndexOf(")")));
+                    } else {
+                        tileTags.addTag(tag);
+                    }
+                }
+                tileTagCache.put(image, tileTags);
+            }
+            return new Tile(x, y, image, tileType, new TileTags(tileTagCache.get(image)), extra);
         } catch (Exception e) {
             System.out.println(image);
+            e.printStackTrace();
             if (scanner.hasNext()) {
                 System.out.println(scanner.next());
             }
@@ -406,40 +453,6 @@
         }
     }
 
-    public static void loadTerrainMap(String resourcePath, List<List<Tile>> foreground, List<List<Tile>> background) {
-        try {
-            Scanner scanner = new Scanner(LevelLoader.class.getResourceAsStream(resourcePath));
-            scanner.nextLine();
-            while (!scanner.hasNext("@background")) {
-                Tile tile = getTile(scanner.nextLine());
-                if (tile != null) {
-                    while (tile.x >= foreground.size())
-                        foreground.add(new ArrayList<>());
-                    while (tile.y >= foreground.get(tile.x).size())
-                        foreground.get(tile.x).add(null);
-                    foreground.get(tile.x).set(tile.y, tile);
-                }
-            }
-            scanner.nextLine();
-            while (scanner.hasNext()) {
-                Tile tile = getTile(scanner.nextLine());
-                if (tile != null) {
-                    while (tile.x >= background.size())
-                        background.add(new ArrayList<>());
-                    while (tile.y >= background.get(tile.x).size())
-                        background.get(tile.x).add(null);
-                    background.get(tile.x).set(tile.y, tile);
-                }
-            }
-        } catch (NullPointerException e) {
-            System.out.println("Terrain map asset \"" + resourcePath + "\" does not exist or could not be loaded.");
-        }
-    }
-
-    public static String[] getTileTags(String tileId) {
-        return tagsByTile.getValue(tileId).asStringArray();
-    }
-
     public static void saveLevel(File file, Level level) {
         try {
             file.delete();
@@ -452,13 +465,22 @@
                     writer.write(tile.extra + " ");
                 writer.write("\n");
             }
-            if (level.getBaseLayer().allTiles.size() > 0) {
+            if (level.getBackgroundLayer().allTiles.size() > 0) {
                 writer.write("@background_tiles\n");
                 for (Tile tile : level.getBackgroundLayer().allTiles) {
                     writer.write(tile.x + " " + tile.y + " " + tile.image + " " + tile.tileType + " ");
                     if (tile.extra != null)
                         writer.write(tile.extra + " ");
                     writer.write("\n");
+                }
+            }
+            if (level.getWiringLayer().allTiles.size() > 0) {
+                writer.write("@wiring_tiles\n");
+                for (Tile tile : level.getWiringLayer().allTiles) {
+                    writer.write(tile.x + " " + tile.y + " " + tile.image + " " + tile.tileType + " ");
+                    if (tile.extra != null)
+                        writer.write(tile.extra + " ");
+                    writer.write("\n");
                 }
             }
             writer.close();
Index: core/src/com/sab/littleh/mainmenu/LevelEditorMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.mainmenu;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.Input;\r\nimport com.badlogic.gdx.math.Rectangle;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.controls.Controls;\r\nimport com.sab.littleh.controls.ControlInput;\r\nimport com.sab.littleh.game.entity.player.Player;\r\nimport com.sab.littleh.game.level.Level;\r\nimport com.sab.littleh.game.level.LevelEditor;\r\nimport com.sab.littleh.game.level.LevelLoader;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.settings.Settings;\r\nimport com.sab.littleh.util.*;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.Menu;\r\nimport com.sab.littleh.util.sab_format.SabData;\r\nimport com.sab.littleh.util.sab_format.SabReader;\r\nimport com.sab.littleh.util.sab_format.SabValue;\r\n\r\nimport java.awt.*;\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class LevelEditorMenu extends MainMenu {\r\n    public boolean canPlaceTiles;\r\n    private List<List<Tile>> tileSelections;\r\n    private TypingQuery timeQuery;\r\n    private TypingQuery extraQuery;\r\n    private ImageButton tileMenuButton;\r\n    private ImageButton settingsMenuButton;\r\n    private Menu<MenuButton> tileButtons;\r\n    private Menu<ImageButton> toolButtons;\r\n    private Menu<ImageButton> settingsButtons;\r\n    private Menu<MenuButton> backgroundMenu;\r\n    private Menu<MenuButton> severeConfirmationMenu;\r\n    private Menu<MenuButton> severeSevereConfirmationMenu;\r\n    private Menu<? extends MenuButton> currentMenu;\r\n    private static DynamicCamera camera = LittleH.program.dynamicCamera;\r\n    private File file;\r\n    private boolean editingBackground;\r\n    private Level level;\r\n    private LevelEditor editor;\r\n    private LevelEditor levelEditor;\r\n    private LevelEditor backgroundEditor;\r\n    private Vector2 mousePosition;\r\n    private Vector2 mouseWorldPosition;\r\n    private Vector2 previousMousePosition;\r\n    private Point tiledMousePosition;\r\n    private Point lineToolOrigin;\r\n    private boolean deleteLine;\r\n    private Player lastPlayer;\r\n    private boolean backgroundVisible;\r\n    private Tile modifiedExtraTile;\r\n    private int tileIndex;\r\n    private int tileSelectionIndex;\r\n\r\n    public LevelEditorMenu(File file, Level level) {\r\n        this.file = file;\r\n        this.level = level;\r\n        backgroundVisible = Settings.localSettings.backgroundVisibility.value;\r\n        levelEditor = new LevelEditor(level, \"normal\");\r\n        backgroundEditor = new LevelEditor(level, \"background\");\r\n        editor = levelEditor;\r\n        mousePosition = new Vector2();\r\n        mouseWorldPosition = new Vector2();\r\n        tiledMousePosition = new Point();\r\n\r\n        currentMenu = tileButtons;\r\n        tileMenuButton = new ImageButton(\"tile_button\", \"settings_dots.png\", relZeroX(), -relZeroY() - 80, 80, 80, 0, 0, 0, 0, () -> {\r\n            currentMenu = tileButtons;\r\n        });\r\n        settingsMenuButton = new ImageButton(\"tile_button\", \"ui/buttons/icons/gear.png\", relZeroX(), -relZeroY() - 80, 80, 80, 8, 8, 64, 64, () -> {\r\n            currentMenu = settingsButtons;\r\n        });\r\n\r\n        severeConfirmationMenu = new Menu<>(new MenuButton[]{\r\n                new MenuButton(\"button\", \"Save & Exit\", 0, 0, 256, 96,\r\n                        () -> {\r\n                            LevelLoader.saveLevel(file, level);\r\n                            LittleH.program.switchMenu(new LevelOptionsMenu(file, level.mapData));\r\n                        }),\r\n                new MenuButton(\"button\", \"Exit\", 0, 0, 256, 96,\r\n                        () -> stop()),\r\n                new MenuButton(\"button\", \"Cancel\", 0, 0, 256, 96,\r\n                        () -> currentMenu = null)\r\n        }, 256, 96, 16);\r\n\r\n        severeSevereConfirmationMenu = new Menu<>(new MenuButton[]{\r\n                new MenuButton(\"button\", \"Save & Close\", 0, 0, 256, 96,\r\n                        () -> {\r\n                            LevelLoader.saveLevel(file, level);\r\n                            LittleH.program.dispose();\r\n                            System.exit(0);\r\n                        }),\r\n                new MenuButton(\"button\", \"Close\", 0, 0, 256, 96,\r\n                        () -> {\r\n                            LittleH.program.dispose();\r\n                            System.exit(0);\r\n                        }),\r\n                new MenuButton(\"button\", \"Cancel\", 0, 0, 256, 96,\r\n                        () -> currentMenu = null)\r\n        }, 256, 96, 16);\r\n\r\n        ImageButton imageButton = new ImageButton(null, \"ui/buttons/icons/pencil.png\", new Rectangle(0, 0, 64, 64), 0, 0, 64, 64, () -> setToolIndex(0));\r\n        imageButton.setHoverText(\"Pencil\");\r\n\r\n        toolButtons = new Menu<>(new ImageButton[]{\r\n                imageButton,\r\n                imageButton.quickCreate(\"ui/buttons/icons/eraser.png\", \"Eraser\", () -> setToolIndex(1)),\r\n                imageButton.quickCreate(\"ui/buttons/icons/pen.png\", \"Pen\", () -> setToolIndex(2)),\r\n                imageButton.quickCreate(\"ui/buttons/icons/paint_can.png\", \"Paint Can\", () -> setToolIndex(3)),\r\n                imageButton.quickCreate(\"ui/buttons/icons/line.png\", \"Line Tool\", () -> setToolIndex(4)),\r\n                imageButton.quickCreate(\"ui/buttons/icons/color_picker.png\", \"Color Picker\", () -> setToolIndex(5)),\r\n                imageButton.quickCreate(\"ui/buttons/icons/selector.png\", \"Selector\", () -> setToolIndex(6)),\r\n                imageButton.quickCreate(\"ui/buttons/icons/h.png\", \"H\", () -> setToolIndex(7)),\r\n        }, 64, 64, 8);\r\n\r\n        settingsButtons = new Menu<>(new ImageButton[]{\r\n                imageButton.quickCreate(\"ui/buttons/icons/background.png\", \"Change background\", () -> {\r\n                    currentMenu = backgroundMenu;\r\n                }),\r\n                imageButton.quickCreate(\"ui/buttons/icons/clock.png\", \"Set time limit\", () -> {\r\n                    timeQuery = new TypingQuery(\"Time limit (leave blank for infinite): \", this.level.timeLimit == -1 ? \"\" : \"\" + this.level.timeLimit, new Rectangle(-384, -96, 768, 192));\r\n                }),\r\n                imageButton.quickCreate(\"ui/buttons/icons/background_visible.png\", \"Background visibility\", () -> backgroundVisible = !backgroundVisible),\r\n                imageButton.quickCreate(\"ui/buttons/icons/double_jump.png\", \"Toggle double jumping\", () -> {\r\n                    level.mapData.insertValue(\"double_jumping\", SabValue.fromBool(!level.mapData.getValue(\"double_jumping\").asBool()));\r\n                    editor.setSaved(false);\r\n                }),\r\n                imageButton.quickCreate(\"ui/buttons/icons/wall_jump.png\", \"Toggle wall sliding\", () -> {\r\n                    level.mapData.insertValue(\"wall_sliding\", SabValue.fromBool(!level.mapData.getValue(\"wall_sliding\").asBool()));\r\n                    editor.setSaved(false);\r\n                }),\r\n                imageButton.quickCreate(\"ui/buttons/icons/slide.png\", \"Toggle crouching\", () -> {\r\n                    level.mapData.insertValue(\"crouching\", SabValue.fromBool(!level.mapData.getValue(\"crouching\").asBool()));\r\n                    editor.setSaved(false);\r\n                }),\r\n                imageButton.quickCreate(\"ui/buttons/icons/magnifying_glass.png\", \"Toggle magnifying glass\", () -> {\r\n                    level.mapData.insertValue(\"look_around\", SabValue.fromBool(!level.mapData.getValue(\"look_around\").asBool()));\r\n                    editor.setSaved(false);\r\n                }),\r\n                imageButton.quickCreate(\"ui/buttons/icons/edit_background.png\", \"Toggle edit background\", () -> {\r\n                    editingBackground = !editingBackground;\r\n                    if (editingBackground)\r\n                        editor = backgroundEditor;\r\n                    else\r\n                        editor = levelEditor;\r\n                }),\r\n                imageButton.quickCreate(\"ui/buttons/icons/floppy_disc.png\", \"Save\", () -> {\r\n                    LevelLoader.saveLevel(file, level);\r\n                    editor.setSaved(true);\r\n                }),\r\n                new ImageButton(null, \"ui/buttons/icons/gear.png\", 0, 0, 64, 64, 0, 0, 64, 64, () -> currentMenu = null),\r\n        }, 64, 64, 16);\r\n\r\n        imageButton = new ImageButton(\"square_button\", null, new Rectangle(0, 0, 256 + 16, 144 + 24),\r\n                8, 16, 256, 144, () -> setToolIndex(0));\r\n\r\n        backgroundMenu = new Menu<>(new MenuButton[]{\r\n                imageButton.quickCreate(\"backgrounds/\" + Level.backgrounds[0] + \"/whole.png\", \"Mountains\", () -> changeLevelBackground(\"mountains\")),\r\n                imageButton.quickCreate(\"backgrounds/\" + Level.backgrounds[1] + \"/whole.png\", \"Cold Mountains\", () -> changeLevelBackground(\"cold_mountains\")),\r\n                imageButton.quickCreate(\"backgrounds/\" + Level.backgrounds[2] + \"/whole.png\", \"Desert\", () -> changeLevelBackground(\"desert\")),\r\n                imageButton.quickCreate(\"backgrounds/\" + Level.backgrounds[3] + \"/whole.png\", \"Cave\", () -> changeLevelBackground(\"cave\")),\r\n                imageButton.quickCreate(\"backgrounds/\" + Level.backgrounds[4] + \"/whole.png\", \"Tundra\", () -> changeLevelBackground(\"tundra\")),\r\n                imageButton.quickCreate(\"backgrounds/\" + Level.backgrounds[5] + \"/whole.png\", \"Hyperspace\", () -> changeLevelBackground(\"hyperspace\"))\r\n        }, 256 + 16, 144 + 24, 16);\r\n\r\n        setToolIndex(0);\r\n        SoundEngine.playMusic(Settings.localSettings.buildingSong.value);\r\n    }\r\n\r\n    public void stop() {\r\n        LittleH.program.switchMenu(new LevelOptionsMenu(file, level.mapData));\r\n        setToolIndex(5);\r\n        SoundEngine.playMusic(\"menu/menu_theme.ogg\");\r\n    }\r\n\r\n    public void resetTileMenu() {\r\n        List<Tile> tileSelection = getTileSelection();\r\n\r\n        MenuButton[] buttons = new MenuButton[tileSelection.size() + (Settings.localSettings.dividedTileSelection.value ? 3 : 1)];\r\n        buttons[0] = new ImageButton(null, \"settings_dots.png\", 0, 0, 64, 64,\r\n                0, 0, 64, 64, null);\r\n        for (int i = 1; i < buttons.length - (Settings.localSettings.dividedTileSelection.value ? 2 : 0); i++) {\r\n            tileSelection.get(i - 1).setTags();\r\n            buttons[i] = new TileButton(tileSelection.get(i - 1), 0, 0);\r\n        }\r\n\r\n        if (Settings.localSettings.dividedTileSelection.value) {\r\n            buttons[buttons.length - 2] = new ImageButton(null, \"back_arrow.png\", 0, 0, 64, 64,\r\n                    0, 0, 64, 64, null);\r\n\r\n            buttons[buttons.length - 1] = new ImageButton(null, \"forward_arrow.png\", 0, 0, 64, 64,\r\n                    0, 0, 64, 64, null);\r\n        }\r\n\r\n        tileButtons = new Menu<MenuButton>(buttons, 64, 64, 8) {\r\n            @Override\r\n            public MenuButton setItemIndex(int i) {\r\n                if (i > 0) {\r\n                    setTileIndex(i - 1);\r\n                    return super.setItemIndex(i);\r\n                }\r\n                return getSelectedItem();\r\n            }\r\n        };\r\n        tileButtons.setItemIndex(1);\r\n        currentMenu = tileButtons;\r\n    }\r\n\r\n    public List<Tile> getTileSelection() {\r\n        return tileSelections.get(tileSelectionIndex);\r\n    }\r\n\r\n    public Tile getEditorTile() {\r\n        return getTileSelection().get(tileIndex);\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n        setToolIndex(toolButtons.itemIndex);\r\n        level.init();\r\n\r\n        tileSelections = new ArrayList<>();\r\n        String[] selections = new String[]{\r\n                \"level_editor/ground.sab\",\r\n                \"level_editor/level.sab\",\r\n                \"level_editor/danger.sab\",\r\n                \"level_editor/pickups.sab\",\r\n                \"level_editor/special.sab\",\r\n                \"level_editor/decoration.sab\",\r\n                \"level_editor/developer.sab\"\r\n        };\r\n        List<Tile> selection = new ArrayList<>();\r\n        for (int i = 0; i < selections.length; i++) {\r\n            if (Settings.localSettings.dividedTileSelection.value)\r\n                selection = new ArrayList<>();\r\n            SabData data = SabReader.read(LevelEditorMenu.class.getResourceAsStream(\"/scripts/\" + selections[i]));\r\n            for (String string : data.getValues().keySet()) {\r\n                selection.add(new Tile(data.getRawValue(string)));\r\n            }\r\n            if (Settings.localSettings.dividedTileSelection.value)\r\n                tileSelections.add(selection);\r\n        }\r\n        if (!Settings.localSettings.dividedTileSelection.value)\r\n            tileSelections.add(selection);\r\n\r\n        resetTileMenu();\r\n    }\r\n\r\n    private void changeLevelBackground(String background) {\r\n        editor.setSaved(false);\r\n        level.changeBackground(background);\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n        if (extraQuery != null) {\r\n            extraQuery.update();\r\n            if (extraQuery.complete) {\r\n                if (extraQuery.accepted) {\r\n                    modifiedExtraTile.extra = extraQuery.getQuery();\r\n                    editor.setSaved(false);\r\n                }\r\n                extraQuery = null;\r\n            }\r\n            return;\r\n        }\r\n        if (timeQuery != null) {\r\n            return;\r\n        }\r\n\r\n        if (!level.inGame()) {\r\n            if (!Gdx.input.isKeyPressed(Input.Keys.CONTROL_LEFT)) {\r\n                float scalar = 1;\r\n                if (ControlInput.localControls.isPressed(\"drag_camera\"))\r\n                    scalar = 4;\r\n                else if (ControlInput.localControls.isPressed(\"move_selection\"))\r\n                    scalar = 0.25f;\r\n                if (ControlInput.localControls.isJustPressed(Controls.UP) || ControlInput.localControls.getPressedFor(Controls.UP) > 30) {\r\n                    camera.targetPosition.y += 64 * scalar;\r\n                }\r\n                if (ControlInput.localControls.isJustPressed(Controls.DOWN) || ControlInput.localControls.getPressedFor(Controls.DOWN) > 30) {\r\n                    camera.targetPosition.y -= 64 * scalar;\r\n                }\r\n                if (ControlInput.localControls.isJustPressed(Controls.LEFT) || ControlInput.localControls.getPressedFor(Controls.LEFT) > 30) {\r\n                    camera.targetPosition.x -= 64 * scalar;\r\n                }\r\n                if (ControlInput.localControls.isJustPressed(Controls.RIGHT) || ControlInput.localControls.getPressedFor(Controls.RIGHT) > 30) {\r\n                    camera.targetPosition.x += 64 * scalar;\r\n                }\r\n            } else {\r\n                if (ControlInput.localControls.isJustPressed(\"undo\") || ControlInput.localControls.getPressedFor(\"undo\") > 30) {\r\n                    editor.undo();\r\n\r\n                } else if (ControlInput.localControls.isJustPressed(\"redo\") || ControlInput.localControls.getPressedFor(\"redo\") > 30) {\r\n                    editor.redo();\r\n                }\r\n            }\r\n            settingsMenuButton.setPosition(-relZeroX() - 80, relZeroY());\r\n            tileMenuButton.setPosition(relZeroX(), -relZeroY() - 80);\r\n            previousMousePosition = mouseWorldPosition.cpy();\r\n            mousePosition = MouseUtil.getMousePosition();\r\n            mouseWorldPosition = MouseUtil.getDynamicMousePosition();\r\n            tiledMousePosition.x = (int) Math.floor(mouseWorldPosition.x / 64);\r\n            tiledMousePosition.y = (int) Math.floor(mouseWorldPosition.y / 64);\r\n\r\n            if (!MouseUtil.isLeftMouseDown() && !MouseUtil.isRightMouseDown()) {\r\n                canPlaceTiles = true;\r\n                if (lineToolOrigin != null) {\r\n                    if (deleteLine)\r\n                        editor.drawLine(new Tile(\"delete\"), tiledMousePosition.x, tiledMousePosition.y, lineToolOrigin.x, lineToolOrigin.y);\r\n                    else\r\n                        editor.drawLine(getEditorTile(), tiledMousePosition.x, tiledMousePosition.y, lineToolOrigin.x, lineToolOrigin.y);\r\n                    lineToolOrigin = null;\r\n                }\r\n            }\r\n\r\n            if (ControlInput.localControls.isPressed(\"drag_camera\")) {\r\n                canPlaceTiles = false;\r\n                if (MouseUtil.isLeftMouseDown()) {\r\n                    camera.targetPosition.sub(MouseUtil.getMouseDelta().scl(camera.zoom));\r\n                }\r\n            }\r\n            if (currentMenu == tileButtons) {\r\n                tileButtons.setMenuRectangle(relZeroX(), -relZeroY(), program.getHeight(), false);\r\n                if (tileButtons.contains(mousePosition)) {\r\n                    canPlaceTiles = false;\r\n                }\r\n\r\n                if (tileButtons.subMenu != null) {\r\n                    Rectangle tileMenuRect = tileButtons.getMenuRectangle();\r\n                    tileButtons.subMenu.setMenuRectangle((int) (tileMenuRect.x + tileMenuRect.width), -relZeroY() - 72, program.getHeight() - 64, false);\r\n                }\r\n            } else if (currentMenu == settingsButtons) {\r\n                settingsButtons.forEach(button -> button.update());\r\n                settingsButtons.setMenuRectangle(-relZeroX(), relZeroY() + 88, 0, true);\r\n                if (settingsButtons.contains(mousePosition)) {\r\n                    canPlaceTiles = false;\r\n                }\r\n            } else if (currentMenu == backgroundMenu) {\r\n                backgroundMenu.forEach(button -> button.update());\r\n                backgroundMenu.setMenuRectangle(relZeroX() + 32, -relZeroY() - 32, program.getHeight() - 128, false);\r\n                if (backgroundMenu.contains(mousePosition)) {\r\n                    canPlaceTiles = false;\r\n                }\r\n            } else if (currentMenu == severeConfirmationMenu) {\r\n                severeConfirmationMenu.forEach(button -> button.update());\r\n                severeConfirmationMenu.setMenuRectangle(0, 32 + 16 - 64, 0, false);\r\n                severeConfirmationMenu.setCenterX(0);\r\n                canPlaceTiles = false;\r\n            } else if (currentMenu == severeSevereConfirmationMenu) {\r\n                severeSevereConfirmationMenu.forEach(button -> button.update());\r\n                severeSevereConfirmationMenu.setMenuRectangle(0, 32 + 16 - 64, 0, false);\r\n                severeSevereConfirmationMenu.setCenterX(0);\r\n                canPlaceTiles = false;\r\n            }\r\n\r\n            tileMenuButton.update();\r\n            settingsMenuButton.update();\r\n            if (tileMenuButton.contains(mousePosition) || settingsMenuButton.contains(mousePosition)) {\r\n                canPlaceTiles = false;\r\n            }\r\n\r\n            toolButtons.setMenuRectangle(-relZeroX(), -relZeroY(), program.getHeight() - 72, true);\r\n\r\n            if (toolButtons.contains(mousePosition)) {\r\n                canPlaceTiles = false;\r\n            }\r\n\r\n            if (canPlaceTiles) {\r\n                if (MouseUtil.isLeftMouseDown()) {\r\n                    useTool(true);\r\n                } else if (MouseUtil.isRightMouseDown()) {\r\n                    useTool(false);\r\n                }\r\n            }\r\n        } else {\r\n            level.update();\r\n        }\r\n        if (!canPlaceTiles)\r\n            lineToolOrigin = null;\r\n    }\r\n\r\n    public void useTool(boolean leftMouse) {\r\n        if (leftMouse) {\r\n            switch (toolButtons.itemIndex) {\r\n                // Pencil\r\n                case 0:\r\n                    Tile tileAt = editor.getTileAt(tiledMousePosition.x, tiledMousePosition.y);\r\n                    Tile newTile = getEditorTile();\r\n                    if (Tile.imagesEqual(tileAt, newTile)) {\r\n                        if (tileAt.hasTag(\"string_picker\")) {\r\n                            if (MouseUtil.leftMouseJustPressed()) {\r\n                                if (tileAt.ignoreTiling && tileAt.tileType != newTile.tileType) {\r\n                                    newTile.extra = tileAt.extra;\r\n                                    editor.addTile(newTile, tileAt.x, tileAt.y, true);\r\n                                }\r\n                                startExtraQuery(editor.getTileAt(tiledMousePosition.x, tiledMousePosition.y));\r\n                            }\r\n                        } else {\r\n                            if (tileAt.ignoreTiling && tileAt.tileType != newTile.tileType) {\r\n                                editor.addTile(newTile, tileAt.x, tileAt.y, true);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!Tile.imagesEqual(tileAt, newTile)) {\r\n                        Point offset = editor.addTile(newTile, tiledMousePosition.x, tiledMousePosition.y, true);\r\n                        Tile tile = editor.getTileAt(tiledMousePosition.x + offset.x, tiledMousePosition.y + offset.y);\r\n                        if (tile.hasTag(\"string_picker\") && (tile.extra == null || tile.extra.isEmpty())) {\r\n                            startExtraQuery(tile);\r\n                        }\r\n                    }\r\n                    break;\r\n                // Eraser (just simulates a right click (erases)\r\n                case 1:\r\n                    useTool(false);\r\n                    break;\r\n                // Pen\r\n                case 2:\r\n                    Point tiledPreviousMousePosition = new Point();\r\n                    tiledPreviousMousePosition.x = (int) (previousMousePosition.x / 64);\r\n                    tiledPreviousMousePosition.y = (int) (previousMousePosition.y / 64);\r\n                    editor.drawLine(getEditorTile(), tiledMousePosition.x, tiledMousePosition.y,\r\n                            tiledPreviousMousePosition.x, tiledPreviousMousePosition.y);\r\n                    break;\r\n                // Fill tool\r\n                case 3:\r\n                    if (MouseUtil.leftMouseJustPressed()) {\r\n                        Tile fillTile = getEditorTile();\r\n                        if (!Tile.tilesEqual(editor.getTileAt(tiledMousePosition.x, tiledMousePosition.y), fillTile))\r\n                            editor.fill(fillTile, tiledMousePosition.x, tiledMousePosition.y);\r\n                    }\r\n                    break;\r\n                // Line tool\r\n                case 4:\r\n                    if (MouseUtil.leftMouseJustPressed()) {\r\n                        lineToolOrigin = new Point(tiledMousePosition);\r\n                        deleteLine = false;\r\n                    }\r\n                    break;\r\n                // Color picker\r\n                case 5:\r\n                    tileAt = editor.getTileAt(tiledMousePosition.x, tiledMousePosition.y);\r\n                    for (List<Tile> selection : tileSelections) {\r\n                        for (Tile tile : selection) {\r\n                            if (Tile.imagesEqual(tile, tileAt)) {\r\n                                tileSelectionIndex = tileSelections.indexOf(selection);\r\n                                setTileIndex(selection.indexOf(tile));\r\n                                tileButtons.setItemIndex(tileIndex + 1);\r\n                                if (tileAt.ignoreTiling)\r\n                                    tile.tileType = tileAt.tileType;\r\n                                if (tile.hasTag(\"property_set\")) {\r\n                                    MenuButton[] buttons = new MenuButton[tile.getPropertyCount() + 1];\r\n                                    buttons[0] = new ImageButton(null, \"back_arrow.png\", 0, 0, 64, 64, 0, 0, 64, 64, null);\r\n                                    for (int i = 1; i < buttons.length; i++) {\r\n                                        newTile = tile.copy();\r\n                                        newTile.setTileType(i - 1);\r\n                                        buttons[i] = new TileButton(newTile, 0, 0, false);\r\n                                    }\r\n                                    Menu<MenuButton> propertyMenu = new Menu<>(buttons, 64, 64, 8);\r\n                                    propertyMenu.itemIndex = tile.tileType + 1;\r\n                                    propertyMenu.setMenuRectangle((int) (tileButtons.getMenuRectangle().x + tileButtons.getMenuRectangle().width), -relZeroY() - 72, program.getHeight() - 64, false);\r\n                                    tileButtons.setSubMenu(propertyMenu);\r\n\r\n                                    TileButton tileButton = (TileButton) tileButtons.getSelectedItem();\r\n                                    tileButton.getTile().setTileType(tileAt.tileType);\r\n                                } else {\r\n                                    tileButtons.subMenu = null;\r\n                                }\r\n                                if (tileAt.extra != null && !tileAt.extra.isEmpty())\r\n                                    tile.extra = tileAt.extra;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                // Selection tool\r\n                case 6:\r\n                    if (ControlInput.localControls.isPressed(\"move_selection\") || editor.isMoving()) {\r\n                        editor.setSelectionPosition(mouseWorldPosition);\r\n                    } else if (ControlInput.localControls.isPressed(\"drag_selection\") || editor.isNudging()) {\r\n                        editor.updateSelectionPosition(mouseWorldPosition);\r\n                    } else {\r\n                        editor.select(tiledMousePosition);\r\n                    }\r\n                    break;\r\n                // Quick test\r\n                case 7:\r\n                    level.startGame(new Point(tiledMousePosition));\r\n                    lastPlayer = level.player;\r\n                    canPlaceTiles = false;\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (toolButtons.itemIndex) {\r\n                case 2 :\r\n                    Point tiledPreviousMousePosition = new Point();\r\n                    tiledPreviousMousePosition.x = (int) (previousMousePosition.x / 64);\r\n                    tiledPreviousMousePosition.y = (int) (previousMousePosition.y / 64);\r\n                    editor.drawLine(new Tile(\"delete\"), tiledMousePosition.x, tiledMousePosition.y,\r\n                            tiledPreviousMousePosition.x, tiledPreviousMousePosition.y);\r\n                    break;\r\n                case 3:\r\n                    editor.fill(new Tile(\"delete\"), tiledMousePosition.x, tiledMousePosition.y);\r\n                    break;\r\n                // Line tool\r\n                case 4:\r\n                    if (lineToolOrigin == null) {\r\n                        lineToolOrigin = new Point(tiledMousePosition);\r\n                        deleteLine = true;\r\n                    }\r\n                    break;\r\n                default:\r\n                    editor.addTile(new Tile(\"delete\"), tiledMousePosition.x, tiledMousePosition.y, true);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setTileIndex(int index) {\r\n        tileIndex = index;\r\n    }\r\n\r\n    public void negativeResize(int x, int y) {\r\n        if (lastPlayer != null) {\r\n            for (Point point : lastPlayer.previousPositions) {\r\n                point.x += x * 64;\r\n                point.y += y * 64;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void startExtraQuery(Tile tileAt) {\r\n        String prompt = \"Set the arbitrary extra data for this tile \\n \";\r\n        String regex = null;\r\n        int maxSize = -1;\r\n        if (tileAt.hasTag(\"text\")) {\r\n            prompt = \"Set the text for this tile: \\n \";\r\n        } else if (tileAt.hasTag(\"dialogue\")) {\r\n            prompt = \"Set the path to the dialogue file \\n \";\r\n        } else if (tileAt.hasTag(\"render_color\")) {\r\n            prompt = \"Set the hex code for this tile \\n #\";\r\n            regex = \"([A-F]|[0-9]|[a-f])\";\r\n            maxSize = 6;\r\n        }\r\n        extraQuery = new TypingQuery(prompt, tileAt.extra == null ? \"\" : tileAt.extra, new Rectangle(-384, -256, 384 * 2, 256 * 2), true);\r\n        if (regex != null)\r\n            extraQuery.setRegex(regex);\r\n        if (maxSize > 0)\r\n            extraQuery.setAbsoluteMaxSize(maxSize);\r\n        modifiedExtraTile = tileAt;\r\n    }\r\n\r\n    public void setToolIndex(int index) {\r\n        toolButtons.setItemIndex(index);\r\n        switch (index) {\r\n            case 0 :\r\n                Cursors.switchCursor(\"pencil\");\r\n                break;\r\n            case 1 :\r\n                Cursors.switchCursor(\"eraser\");\r\n                break;\r\n            case 2 :\r\n                Cursors.switchCursor(\"pen\");\r\n                break;\r\n            case 3 :\r\n                Cursors.switchCursor(\"paint_can\");\r\n                break;\r\n            case 4 :\r\n                Cursors.switchCursor(\"line\");\r\n                break;\r\n            case 5 :\r\n                Cursors.switchCursor(\"color_picker\");\r\n                break;\r\n            case 6 :\r\n                Cursors.switchCursor(\"cursor\");\r\n                break;\r\n            case 7 :\r\n                Cursors.switchCursor(\"h\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyUp(int keycode) {\r\n        // Cursors for selection mode\r\n        if (ControlInput.localControls.isJustReleased(\"move_selection\") || ControlInput.localControls.isJustReleased(\"drag_selection\")) {\r\n            if (toolButtons.itemIndex == 6) {\r\n                Cursors.switchCursor(\"cursor\");\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyDown(int keycode) {\r\n        // Cursors for selection mode\r\n        if (!level.inGame()) {\r\n            if (ControlInput.localControls.isJustPressed(\"move_selection\") && Cursors.cursorIsNot(\"drag_hand\")) {\r\n                if (toolButtons.itemIndex == 6) {\r\n                    Cursors.switchCursor(\"move_arrow\");\r\n                }\r\n            } else if (ControlInput.localControls.isJustPressed(\"drag_selection\") && Cursors.cursorIsNot(\"move_arrow\")) {\r\n                if (toolButtons.itemIndex == 6) {\r\n                    Cursors.switchCursor(\"drag_hand\");\r\n                }\r\n            }\r\n        }\r\n        if (extraQuery != null) {\r\n            if (ControlInput.localControls.isJustPressed(\"select\")) {\r\n                extraQuery.complete(true);\r\n            } else if (ControlInput.localControls.isJustPressed(\"return\")) {\r\n                extraQuery.complete(false);\r\n            } else {\r\n                extraQuery.updateQueryKey(keycode, 256, false);\r\n            }\r\n            return;\r\n        }\r\n        if (timeQuery != null) {\r\n            if (ControlInput.localControls.isJustPressed(\"select\")) {\r\n                String timeLimit = timeQuery.getQuery();\r\n                if (timeLimit.equals(\"\")) timeLimit = \"-1\";\r\n                level.mapData.insertValue(\"time_limit\", timeLimit);\r\n                timeQuery = null;\r\n                editor.setSaved(false);\r\n            } else {\r\n                timeQuery.updateQueryKey(keycode, 4, false);\r\n            }\r\n            return;\r\n        }\r\n        if (!Gdx.input.isKeyPressed(Input.Keys.CONTROL_LEFT)) {\r\n            if (!level.inGame()) {\r\n                // Tool Hotkeys\r\n                if (ControlInput.localControls.isJustPressed(\"pencil\")) {\r\n                    setToolIndex(0);\r\n                } else if (ControlInput.localControls.isJustPressed(\"eraser\")) {\r\n                    setToolIndex(1);\r\n                } else if (ControlInput.localControls.isJustPressed(\"pen\")) {\r\n                    setToolIndex(2);\r\n                } else if (ControlInput.localControls.isJustPressed(\"fill\")) {\r\n                    setToolIndex(3);\r\n                } else if (ControlInput.localControls.isJustPressed(\"line\")) {\r\n                    setToolIndex(4);\r\n                }  else if (ControlInput.localControls.isJustPressed(\"eyedropper\")) {\r\n                    setToolIndex(5);\r\n                } else if (ControlInput.localControls.isJustPressed(\"selection\")) {\r\n                    setToolIndex(6);\r\n                } else if (ControlInput.localControls.isJustPressed(\"quick_test\")) {\r\n                    setToolIndex(7);\r\n                } else if (Settings.localSettings.dividedTileSelection.value) {\r\n                    if (ControlInput.localControls.isJustPressed(\"prev_selection\")) {\r\n                        tileSelectionIndex = (tileSelectionIndex - 1) % tileSelections.size();\r\n                        SoundEngine.playSound(\"blip.ogg\");\r\n                        resetTileMenu();\r\n                    } else if (ControlInput.localControls.isJustPressed(\"next_selection\")) {\r\n                        tileSelectionIndex = (tileSelectionIndex + 1) % tileSelections.size();\r\n                        SoundEngine.playSound(\"blip.ogg\");\r\n                        resetTileMenu();\r\n                    }\r\n                }\r\n            } else {\r\n                if (ControlInput.localControls.isJustPressed(\"suicide\"))\r\n                    level.suicide();\r\n            }\r\n        }\r\n\r\n        // Commands\r\n        if (ControlInput.localControls.isJustPressed(\"save\")) {\r\n            LevelLoader.saveLevel(file, level);\r\n            editor.setSaved(true);\r\n\r\n        } else if (ControlInput.localControls.isJustPressed(\"copy\")) {\r\n            editor.copySelection();\r\n        } else if (ControlInput.localControls.isJustPressed(\"paste\")) {\r\n            editor.pasteSelection();\r\n\r\n        } else if (ControlInput.localControls.isJustPressed(\"cut\")) {\r\n            editor.copySelection();\r\n            editor.deleteSelection();\r\n\r\n        } else if (ControlInput.localControls.isJustPressed(\"end_selection\")) {\r\n            editor.endSelection();\r\n\r\n        } else if (ControlInput.localControls.isJustPressed(\"delete_selection\")) {\r\n            editor.deleteSelection();\r\n\r\n        } else if (ControlInput.localControls.isJustPressed(\"return\")) {\r\n            if (editor.hasSelection()) {\r\n                editor.endSelection();\r\n            } else if (!level.inGame() && level.escapePressed()) {\r\n                program.switchMenu(new EditorPauseMenu(this));\r\n            } else if (level.escapePressed()) {\r\n                level.endGame();\r\n                setToolIndex(toolButtons.itemIndex);\r\n                SoundEngine.playMusic(Settings.localSettings.buildingSong.value);\r\n                level.timeLimit = level.mapData.getValue(\"time_limit\").asInt();\r\n            }\r\n            editor.endSelection();\r\n\r\n        } else if (ControlInput.localControls.isJustPressed(\"playtest\")) {\r\n            level.enterPressed();\r\n            if (level.hasDialogue())\r\n                return;\r\n            if (!level.inGame())\r\n                startTesting();\r\n\r\n        } else if (ControlInput.localControls.isJustPressed(\"toggle_layer\")) {\r\n            editingBackground = !editingBackground;\r\n            editor = editingBackground ? backgroundEditor : levelEditor;\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(char character) {\r\n        if (extraQuery != null) {\r\n            extraQuery.updateQueryChar(character, 256);\r\n            return;\r\n        }\r\n        if (timeQuery != null) {\r\n            timeQuery.updateQueryChar(character, 4, \"([0-9])\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mouseDown(int button) {\r\n        if (currentMenu == tileButtons) {\r\n            if (tileButtons.getMenuRectangle().contains(mousePosition)) {\r\n                if (button == 0) {\r\n                    int newIndex = tileButtons.getOverlappedElement(MouseUtil.getMousePosition());\r\n                    if (newIndex == 0) {\r\n                        currentMenu = null;\r\n                    } else if (Settings.localSettings.dividedTileSelection.value) {\r\n                        if (newIndex == tileButtons.items.length - 2) {\r\n                            tileSelectionIndex = (tileSelectionIndex - 1) % tileSelections.size();\r\n                            SoundEngine.playSound(\"blip.ogg\");\r\n                            resetTileMenu();\r\n                        } else if (newIndex == tileButtons.items.length - 1) {\r\n                            tileSelectionIndex = (tileSelectionIndex + 1) % tileSelections.size();\r\n                            SoundEngine.playSound(\"blip.ogg\");\r\n                            resetTileMenu();\r\n                        }\r\n                    } else {\r\n                        tileButtons.setItemIndex(newIndex);\r\n                        Tile tile = getEditorTile();\r\n                        if (tile.hasTag(\"property_set\")) {\r\n                            MenuButton[] buttons = new MenuButton[tile.getPropertyCount() + 1];\r\n                            buttons[0] = new ImageButton(null, \"back_arrow.png\", 0, 0, 64, 64, 0, 0, 64, 64, null);\r\n                            for (int i = 1; i < buttons.length; i++) {\r\n                                Tile newTile = tile.copy();\r\n                                newTile.setTileType(i - 1);\r\n                                buttons[i] = new TileButton(newTile, 0, 0, false);\r\n                            }\r\n                            Menu<MenuButton> propertyMenu = new Menu<>(buttons, 64, 64, 8);\r\n                            propertyMenu.itemIndex = tile.tileType + 1;\r\n                            tileButtons.setSubMenu(propertyMenu);\r\n                        } else {\r\n                            tileButtons.subMenu = null;\r\n                        }\r\n                    }\r\n                }\r\n                canPlaceTiles = false;\r\n            }\r\n            if (tileButtons.subMenu != null) {\r\n                if (tileButtons.subMenu.getMenuRectangle().contains(mousePosition)) {\r\n                    if (button == 0) {\r\n                        int newIndex = tileButtons.subMenu.getOverlappedElement(MouseUtil.getMousePosition());\r\n                        if (newIndex > 0 && newIndex != tileButtons.subMenu.itemIndex) {\r\n                            tileButtons.subMenu.setItemIndex(newIndex);\r\n                            TileButton tileButton = (TileButton) tileButtons.getSelectedItem();\r\n                            tileButton.getTile().setTileType(newIndex - 1);\r\n                        } else if (newIndex == 0) {\r\n                            tileButtons.subMenu = null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            tileMenuButton.mouseClicked();\r\n        }\r\n\r\n        if (currentMenu == settingsButtons) {\r\n            if (settingsButtons.getMenuRectangle().contains(mousePosition)) {\r\n                if (button == 0) {\r\n                    int index = settingsButtons.getOverlappedElement(mousePosition);\r\n                    if (index != -1) {\r\n                        settingsButtons.items[index].mouseClicked();\r\n                    }\r\n                }\r\n                canPlaceTiles = false;\r\n            }\r\n        } else {\r\n            settingsMenuButton.mouseClicked();\r\n        }\r\n\r\n        if (currentMenu == backgroundMenu) {\r\n            backgroundMenu.forEach((menuButton) -> {\r\n                menuButton.mouseClicked();\r\n            });\r\n        }\r\n\r\n        if (toolButtons.getMenuRectangle().contains(mousePosition)) {\r\n            if (button == 0) {\r\n                int newIndex = toolButtons.getOverlappedElement(MouseUtil.getMousePosition());\r\n                if (newIndex != -1) {\r\n                    toolButtons.setItemIndex(newIndex);\r\n                    setToolIndex(toolButtons.itemIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void confirmExit() {\r\n        currentMenu = severeConfirmationMenu;\r\n    }\r\n\r\n    public void confirmProgramExit() {\r\n        currentMenu = severeSevereConfirmationMenu;\r\n    }\r\n\r\n    public void startTesting() {\r\n        Point startPos = null;\r\n        for (Tile tile : level.getBaseLayer().allTiles) {\r\n            if (tile.hasTag(\"start\")) {\r\n                startPos = new Point(tile.x, tile.y);\r\n                break;\r\n            }\r\n        }\r\n        if (startPos != null) {\r\n            level.startGame(startPos);\r\n            if (ControlInput.localControls.isPressed(\"shift\"))\r\n                level.ignoreDialogue();\r\n            else\r\n                level.resumeDialogue();\r\n            lastPlayer = level.player;\r\n        } else level.startPopup(\"Please add a spawn point (the red triangle)\", 240);\r\n    }\r\n\r\n    @Override\r\n    public void mouseUp(int button) {\r\n        editor.selectionReleased();\r\n        if (extraQuery != null) {\r\n            extraQuery.mouseClicked();\r\n        } else {\r\n            if (currentMenu == severeConfirmationMenu) {\r\n                severeConfirmationMenu.forEach(MenuButton::mouseClicked);\r\n            } else if (currentMenu == severeSevereConfirmationMenu) {\r\n                severeSevereConfirmationMenu.forEach(MenuButton::mouseClicked);\r\n            }\r\n\r\n            if (!level.inGame()) {\r\n                level.mouseUp();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mouseScrolled(float amountY) {\r\n        camera.targetPosition.sub(mousePosition.cpy().scl(amountY).scl(addZoom(amountY / 2f)));\r\n    }\r\n\r\n    // Returns by how much zoom changed\r\n    public float addZoom(float zoom) {\r\n        float zoomBefore = camera.targetZoom;\r\n        camera.targetZoom += zoom;\r\n        camera.targetZoom = Math.max(Math.min(camera.targetZoom, 16f), 1f);\r\n        return Math.abs(zoomBefore - camera.targetZoom);\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n    }\r\n\r\n    public void resetToolCursor() {\r\n        setToolIndex(toolButtons.itemIndex);\r\n    }\r\n\r\n    @Override\r\n    public void render(Graphics g) {\r\n        LittleH.program.useDynamicCamera();\r\n\r\n        // Draw level\r\n\r\n        camera.updateCamera();\r\n\r\n        mousePosition = MouseUtil.getMousePosition();\r\n        mouseWorldPosition = MouseUtil.getDynamicMousePosition();\r\n        tiledMousePosition.x = (int) Math.floor(mouseWorldPosition.x / 64);\r\n        tiledMousePosition.y = (int) Math.floor(mouseWorldPosition.y / 64);\r\n\r\n        if (backgroundVisible) level.renderBackground(g);\r\n        else {\r\n            program.useStaticCamera();\r\n            g.setColor(0, 0, 0, 1);\r\n            g.draw(Images.getImage(\"pixel.png\"), MainMenu.relZeroX(), MainMenu.relZeroY(), program.getWidth(), program.getHeight());\r\n            g.resetColor();\r\n        }\r\n\r\n        program.useDynamicCamera();\r\n\r\n        level.render(g, editingBackground);\r\n\r\n        program.useDynamicCamera();\r\n\r\n        if (!level.inGame()) {\r\n            if (lastPlayer != null) {\r\n                for (int i = 0; i < lastPlayer.previousPositions.size(); i++) {\r\n                    Point point = lastPlayer.previousPositions.get(i);\r\n                    if (i % 5 == 0) {\r\n                        g.draw(Images.getImage(\"h_trace.png\"), point.x - 8, point.y, 64, 64);\r\n                    }\r\n                }\r\n            }\r\n            if (canPlaceTiles && Cursors.cursorIsNot(\"move_arrow\", \"drag_hand\")) {\r\n                Tile tileAt = level.getTileAt(\"normal\", tiledMousePosition.x, tiledMousePosition.y);\r\n                if (tileAt != null && tileAt.hasTag(\"string_picker\")) {\r\n                    if (tileAt.extra != null) {\r\n                        g.drawString(tileAt.extra, LittleH.font, tileAt.x * 64 + 32, tileAt.y * 64 + 96, LittleH.defaultFontScale * 0.85f, 0);\r\n                    }\r\n                }\r\n                g.draw(Images.getImage(\"tiles/selector.png\"), tiledMousePosition.x * 64, tiledMousePosition.y * 64, 64, 64);\r\n                if (lineToolOrigin != null) {\r\n                    List<Point> line = editor.getLinePoints(tiledMousePosition.x, tiledMousePosition.y, lineToolOrigin.x, lineToolOrigin.y);\r\n                    for (Point point : line)\r\n                        g.draw(Images.getImage(\"tiles/selector.png\"), point.x * 64, point.y * 64, 64, 64);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw selection\r\n        editor.renderSelection(g);\r\n\r\n        LittleH.program.useStaticCamera();\r\n\r\n\r\n        // Don't draw menus while in-game\r\n        if (level.inGame()) {\r\n            level.renderHUD(g);\r\n            return;\r\n        }\r\n\r\n        // Draw menus\r\n        Rectangle[] itemButtons;\r\n\r\n        toolButtons.renderMenuRectangle(g, Patch.get(\"menu_flat\"));\r\n\r\n        g.setColor(Images.quickAlpha(0.5f));\r\n        if (!editor.saved)\r\n            g.draw(Images.getImage(\"ui/buttons/icons/floppy_disc.png\"), -relZeroX() - 128 - 24, -relZeroY() - 8 - 64, 64, 64);\r\n        g.resetColor();\r\n\r\n        itemButtons = toolButtons.getItemButtons();\r\n\r\n        for (int i = 0; i < toolButtons.items.length; i++) {\r\n            MenuButton button = toolButtons.getItem(i);\r\n            button.setPosition(itemButtons[i].getPosition(new Vector2()));\r\n            button.render(g);\r\n            Rectangle item = itemButtons[i];\r\n            if (toolButtons.itemIndex == i) {\r\n                g.draw(Images.getImage(\"ui/selected_tile.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n            }\r\n        }\r\n\r\n        tileMenuButton.render(g);\r\n        g.drawImage(getEditorTile().getImage(), tileMenuButton.x + 8, tileMenuButton.y + 8, 64, 64, getEditorTile().getDrawSection());\r\n        settingsMenuButton.render(g);\r\n\r\n        if (currentMenu == tileButtons) {\r\n            tileButtons.renderMenuRectangle(g, Patch.get(\"menu_flat\"));\r\n            itemButtons = tileButtons.getItemButtons();\r\n\r\n            for (int i = 0; i < tileButtons.items.length; i++) {\r\n                MenuButton button = tileButtons.getItem(i);\r\n                button.setPosition(itemButtons[i].getPosition(new Vector2()));\r\n                button.render(g);\r\n                Rectangle item = itemButtons[i];\r\n                if (tileButtons.itemIndex == i) {\r\n                    g.draw(Images.getImage(\"ui/selected_tile.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                }\r\n            }\r\n\r\n            if (tileButtons.subMenu != null) {\r\n                tileButtons.subMenu.renderMenuRectangle(g, Patch.get(\"menu_flat\"));\r\n                itemButtons = tileButtons.subMenu.getItemButtons();\r\n\r\n                for (int i = 0; i < tileButtons.subMenu.items.length; i++) {\r\n                    MenuButton button = tileButtons.subMenu.getItem(i);\r\n                    button.setPosition(itemButtons[i].getPosition(new Vector2()));\r\n                    button.render(g);\r\n                    Rectangle item = itemButtons[i];\r\n                    if (tileButtons.subMenu.itemIndex == i) {\r\n                        g.draw(Images.getImage(\"ui/selected_property.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                    }\r\n                }\r\n            }\r\n        } else if (currentMenu == settingsButtons) {\r\n            settingsButtons.renderMenuRectangle(g, Patch.get(\"menu_flat\"));\r\n            itemButtons = settingsButtons.getItemButtons();\r\n\r\n            String[] levelOptions = {\r\n                    \"double_jumping\",\r\n                    \"wall_sliding\",\r\n                    \"crouching\",\r\n                    \"look_around\"\r\n            };\r\n\r\n            for (int i = 0; i < settingsButtons.items.length; i++) {\r\n                MenuButton button = settingsButtons.getItem(i);\r\n                Rectangle item = itemButtons[i];\r\n                button.setPosition(item.getPosition(new Vector2()));\r\n                button.render(g);\r\n                if (i == 2) {\r\n                    if (backgroundVisible) {\r\n                        g.draw(Images.getImage(\"ui/level_setting_on.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                    } else {\r\n                        g.draw(Images.getImage(\"ui/level_setting_off.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                    }\r\n                } else if (i == 7) {\r\n                    if (editingBackground) {\r\n                        g.draw(Images.getImage(\"ui/level_setting_on.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                    } else {\r\n                        g.draw(Images.getImage(\"ui/level_setting_off.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                    }\r\n                } else if (i > 2 && i < 7) {\r\n                    int levelSettingIndex = i - 3;\r\n                    if (level.mapData.getValue(levelOptions[levelSettingIndex]).asBool()) {\r\n                        g.draw(Images.getImage(\"ui/level_setting_on.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                    } else {\r\n                        g.draw(Images.getImage(\"ui/level_setting_off.png\"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);\r\n                    }\r\n                }\r\n            }\r\n        } else if (currentMenu == backgroundMenu) {\r\n            backgroundMenu.renderMenuRectangle(g, Patch.get(\"menu_flat\"));\r\n            itemButtons = backgroundMenu.getItemButtons();\r\n\r\n            for (int i = 0; i < backgroundMenu.items.length; i++) {\r\n                MenuButton button = backgroundMenu.getItem(i);\r\n                Rectangle item = itemButtons[i];\r\n                button.setPosition(item.getPosition(new Vector2()));\r\n                button.render(g);\r\n            }\r\n        } else if (currentMenu == severeConfirmationMenu) {\r\n            Rectangle rect = new Rectangle(severeConfirmationMenu.getMenuRectangle());\r\n            rect.height += 128;\r\n            g.drawPatch(Patch.get(\"menu_flat\"), rect, 8);\r\n\r\n            g.drawString(\"You are about to exit without saving!\", LittleH.font,\r\n                    rect.x + rect.width / 2, rect.y + rect.height - 64, LittleH.defaultFontScale, 0);\r\n\r\n            itemButtons = severeConfirmationMenu.getItemButtons();\r\n\r\n            for (int i = 0; i < severeConfirmationMenu.items.length; i++) {\r\n                MenuButton button = severeConfirmationMenu.getItem(i);\r\n                Rectangle item = itemButtons[i];\r\n                button.setPosition(item.getPosition(new Vector2()));\r\n                button.render(g);\r\n            }\r\n        } else if (currentMenu == severeSevereConfirmationMenu) {\r\n            Rectangle rect = new Rectangle(severeConfirmationMenu.getMenuRectangle());\r\n            rect.height += 128;\r\n            g.drawPatch(Patch.get(\"menu_flat\"), rect, 8);\r\n\r\n            g.drawString(\"You are about to close the program without saving!\", LittleH.font,\r\n                    rect.x + rect.width / 2, rect.y + rect.height - 64, LittleH.defaultFontScale, 0);\r\n\r\n            itemButtons = severeConfirmationMenu.getItemButtons();\r\n\r\n            for (int i = 0; i < severeConfirmationMenu.items.length; i++) {\r\n                MenuButton button = severeConfirmationMenu.getItem(i);\r\n                Rectangle item = itemButtons[i];\r\n                button.setPosition(item.getPosition(new Vector2()));\r\n                button.render(g);\r\n            }\r\n        }\r\n\r\n        if (timeQuery != null) {\r\n            timeQuery.render(g);\r\n        }\r\n\r\n        if (extraQuery != null) {\r\n            extraQuery.render(g);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/mainmenu/LevelEditorMenu.java b/core/src/com/sab/littleh/mainmenu/LevelEditorMenu.java
--- a/core/src/com/sab/littleh/mainmenu/LevelEditorMenu.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/mainmenu/LevelEditorMenu.java	(date 1708571415442)
@@ -28,28 +28,33 @@
 public class LevelEditorMenu extends MainMenu {
     public boolean canPlaceTiles;
     private List<List<Tile>> tileSelections;
+    private List<Tile> wireSelection;
     private TypingQuery timeQuery;
     private TypingQuery extraQuery;
-    private ImageButton tileMenuButton;
-    private ImageButton settingsMenuButton;
+    private final ImageButton tileMenuButton;
+    private final ImageButton settingsMenuButton;
     private Menu<MenuButton> tileButtons;
-    private Menu<ImageButton> toolButtons;
+    private Menu<MenuButton> normalTileButtons;
+    private Menu<MenuButton> wiringTileButtons;
+    private final Menu<ImageButton> toolButtons;
     private Menu<ImageButton> settingsButtons;
     private Menu<MenuButton> backgroundMenu;
-    private Menu<MenuButton> severeConfirmationMenu;
-    private Menu<MenuButton> severeSevereConfirmationMenu;
+    private final Menu<MenuButton> severeConfirmationMenu;
+    private final Menu<MenuButton> severeSevereConfirmationMenu;
     private Menu<? extends MenuButton> currentMenu;
-    private static DynamicCamera camera = LittleH.program.dynamicCamera;
-    private File file;
+    private static final DynamicCamera camera = LittleH.program.dynamicCamera;
+    private final File file;
     private boolean editingBackground;
-    private Level level;
+    private boolean wiringMode;
+    private final Level level;
     private LevelEditor editor;
-    private LevelEditor levelEditor;
-    private LevelEditor backgroundEditor;
+    private final LevelEditor levelEditor;
+    private final LevelEditor backgroundEditor;
+    private final LevelEditor wiringEditor;
     private Vector2 mousePosition;
     private Vector2 mouseWorldPosition;
     private Vector2 previousMousePosition;
-    private Point tiledMousePosition;
+    private final Point tiledMousePosition;
     private Point lineToolOrigin;
     private boolean deleteLine;
     private Player lastPlayer;
@@ -64,6 +69,7 @@
         backgroundVisible = Settings.localSettings.backgroundVisibility.value;
         levelEditor = new LevelEditor(level, "normal");
         backgroundEditor = new LevelEditor(level, "background");
+        wiringEditor = new LevelEditor(level, "wiring");
         editor = levelEditor;
         mousePosition = new Vector2();
         mouseWorldPosition = new Vector2();
@@ -143,13 +149,20 @@
                     level.mapData.insertValue("look_around", SabValue.fromBool(!level.mapData.getValue("look_around").asBool()));
                     editor.setSaved(false);
                 }),
-                imageButton.quickCreate("ui/buttons/icons/edit_background.png", "Toggle edit background", () -> {
+                imageButton.quickCreate("ui/buttons/icons/edit_background.png", "Toggle background editor", () -> {
                     editingBackground = !editingBackground;
                     if (editingBackground)
                         editor = backgroundEditor;
                     else
                         editor = levelEditor;
                 }),
+                imageButton.quickCreate("ui/buttons/icons/wiring_mode.png", "Toggle wiring mode", () -> {
+                    wiringMode = !wiringMode;
+                    if (wiringMode)
+                        enterWiringMode();
+                    else
+                        exitWiringMode();
+                }),
                 imageButton.quickCreate("ui/buttons/icons/floppy_disc.png", "Save", () -> {
                     LevelLoader.saveLevel(file, level);
                     editor.setSaved(true);
@@ -173,6 +186,21 @@
         SoundEngine.playMusic(Settings.localSettings.buildingSong.value);
     }
 
+    private void enterWiringMode() {
+        editor = wiringEditor;
+        tileButtons = wiringTileButtons;
+        resetTileMenu();
+    }
+
+    private void exitWiringMode() {
+        if (editingBackground)
+            editor = backgroundEditor;
+        else
+            editor = levelEditor;
+        tileButtons = normalTileButtons;
+        resetTileMenu();
+    }
+
     public void stop() {
         LittleH.program.switchMenu(new LevelOptionsMenu(file, level.mapData));
         setToolIndex(5);
@@ -180,39 +208,68 @@
     }
 
     public void resetTileMenu() {
-        List<Tile> tileSelection = getTileSelection();
+        if (wiringMode) {
+            List<Tile> tileSelection = wireSelection;
+
+            MenuButton[] buttons = new MenuButton[tileSelection.size() + 1];
+            buttons[0] = new ImageButton(null, "settings_dots.png", 0, 0, 64, 64,
+                    0, 0, 64, 64, null);
+
+            for (int i = 1; i < buttons.length; i++) {
+                tileSelection.get(i - 1).setTags();
+                buttons[i] = new TileButton(tileSelection.get(i - 1), 0, 0);
+            }
+
+            wiringTileButtons = new Menu<>(buttons, 64, 64, 8) {
+                @Override
+                public MenuButton setItemIndex(int i) {
+                    if (i > 0) {
+                        setTileIndex(i - 1);
+                        return super.setItemIndex(i);
+                    }
+                    return getSelectedItem();
+                }
+            };
+            wiringTileButtons.setItemIndex(1);
+            tileButtons = wiringTileButtons;
+        } else {
+            List<Tile> tileSelection = getTileSelection();
 
-        MenuButton[] buttons = new MenuButton[tileSelection.size() + (Settings.localSettings.dividedTileSelection.value ? 3 : 1)];
-        buttons[0] = new ImageButton(null, "settings_dots.png", 0, 0, 64, 64,
-                0, 0, 64, 64, null);
-        for (int i = 1; i < buttons.length - (Settings.localSettings.dividedTileSelection.value ? 2 : 0); i++) {
-            tileSelection.get(i - 1).setTags();
-            buttons[i] = new TileButton(tileSelection.get(i - 1), 0, 0);
-        }
+            MenuButton[] buttons = new MenuButton[tileSelection.size() + (Settings.localSettings.dividedTileSelection.value ? 3 : 1)];
+            buttons[0] = new ImageButton(null, "settings_dots.png", 0, 0, 64, 64,
+                    0, 0, 64, 64, null);
+            for (int i = 1; i < buttons.length - (Settings.localSettings.dividedTileSelection.value ? 2 : 0); i++) {
+                tileSelection.get(i - 1).setTags();
+                buttons[i] = new TileButton(tileSelection.get(i - 1), 0, 0);
+            }
 
-        if (Settings.localSettings.dividedTileSelection.value) {
-            buttons[buttons.length - 2] = new ImageButton(null, "back_arrow.png", 0, 0, 64, 64,
-                    0, 0, 64, 64, null);
+            if (Settings.localSettings.dividedTileSelection.value) {
+                buttons[buttons.length - 2] = new ImageButton(null, "back_arrow.png", 0, 0, 64, 64,
+                        0, 0, 64, 64, null);
 
-            buttons[buttons.length - 1] = new ImageButton(null, "forward_arrow.png", 0, 0, 64, 64,
-                    0, 0, 64, 64, null);
-        }
+                buttons[buttons.length - 1] = new ImageButton(null, "forward_arrow.png", 0, 0, 64, 64,
+                        0, 0, 64, 64, null);
+            }
 
-        tileButtons = new Menu<MenuButton>(buttons, 64, 64, 8) {
-            @Override
-            public MenuButton setItemIndex(int i) {
-                if (i > 0) {
-                    setTileIndex(i - 1);
-                    return super.setItemIndex(i);
-                }
-                return getSelectedItem();
-            }
-        };
-        tileButtons.setItemIndex(1);
+            normalTileButtons = new Menu<>(buttons, 64, 64, 8) {
+                @Override
+                public MenuButton setItemIndex(int i) {
+                    if (i > 0) {
+                        setTileIndex(i - 1);
+                        return super.setItemIndex(i);
+                    }
+                    return getSelectedItem();
+                }
+            };
+            normalTileButtons.setItemIndex(1);
+            tileButtons = normalTileButtons;
+        }
+
         currentMenu = tileButtons;
     }
 
     public List<Tile> getTileSelection() {
+        if (wiringMode) return wireSelection;
         return tileSelections.get(tileSelectionIndex);
     }
 
@@ -249,6 +306,13 @@
         if (!Settings.localSettings.dividedTileSelection.value)
             tileSelections.add(selection);
 
+        wireSelection = new ArrayList<>();
+        SabData data = SabReader.read(LevelEditorMenu.class.getResourceAsStream("/scripts/level_editor/wiring.sab"));
+        for (String string : data.getValues().keySet()) {
+            wireSelection.add(new Tile(data.getRawValue(string)));
+        }
+
+
         resetTileMenu();
     }
 
@@ -708,10 +772,15 @@
             if (!level.inGame())
                 startTesting();
 
+        } else if (ControlInput.localControls.isJustPressed("toggle_wiring")) {
+            wiringMode = !wiringMode;
+            if (wiringMode)
+                enterWiringMode();
+            else
+                exitWiringMode();
         } else if (ControlInput.localControls.isJustPressed("toggle_layer")) {
             editingBackground = !editingBackground;
             editor = editingBackground ? backgroundEditor : levelEditor;
-
         }
     }
 
@@ -903,7 +972,7 @@
 
         program.useDynamicCamera();
 
-        level.render(g, editingBackground);
+        level.render(g, editingBackground, wiringMode);
 
         program.useDynamicCamera();
 
@@ -1025,8 +1094,14 @@
                         g.draw(Images.getImage("ui/level_setting_on.png"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);
                     } else {
                         g.draw(Images.getImage("ui/level_setting_off.png"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);
+                    }
+                } else if (i == 8) {
+                    if (wiringMode) {
+                        g.draw(Images.getImage("ui/level_setting_on.png"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);
+                    } else {
+                        g.draw(Images.getImage("ui/level_setting_off.png"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);
                     }
-                } else if (i > 2 && i < 7) {
+                }  else if (i > 2 && i < 7) {
                     int levelSettingIndex = i - 3;
                     if (level.mapData.getValue(levelOptions[levelSettingIndex]).asBool()) {
                         g.draw(Images.getImage("ui/level_setting_on.png"), item.x - 8, item.y - 8, item.width + 16, item.height + 16);
@@ -1087,4 +1162,4 @@
             extraQuery.render(g);
         }
     }
-}
+}
\ No newline at end of file
Index: core/src/com/sab/littleh/game/entity/player/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.entity.player;\r\n\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.math.Rectangle;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.controls.Controls;\r\nimport com.sab.littleh.controls.ControlInput;\r\nimport com.sab.littleh.game.entity.Entity;\r\nimport com.sab.littleh.game.entity.Particle;\r\nimport com.sab.littleh.game.entity.enemy.Enemy;\r\nimport com.sab.littleh.game.entity.player.powerups.*;\r\nimport com.sab.littleh.game.level.Level;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.mainmenu.MainMenu;\r\nimport com.sab.littleh.util.*;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.dialogue.Dialogue;\r\nimport com.sab.littleh.util.dialogue.Dialogues;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class Player extends Entity {\r\n    public Animation idleAnimation = new Animation(12, 0, 1);\r\n    public Animation runAnimation = new Animation(4, 2, 3, 4, 5);\r\n    public Animation deathAnimation = new Animation(4, 9, 10, 11, 12, 13, 14);\r\n    public Animation wallSlideAnimation = new Animation(1, 8);\r\n    public Animation fallAnimation = new Animation(1, 6);\r\n    public Animation jumpAnimation = new Animation(1, 7);\r\n    public Animation crouchAnimation = new Animation(1, 24);\r\n    public Animation slideAnimation = new Animation(4, 25, 26);\r\n    public Animation winAnimation = new Animation(8, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23);\r\n    public ControlInput controller;\r\n\r\n    public boolean win;\r\n    public boolean end;\r\n    public boolean startTick;\r\n    public Point startPos;\r\n    public boolean jumpReleased;\r\n    public int leftGroundFor;\r\n    public int leftWallFor;\r\n    public int jumpStrength;\r\n    public boolean touchingWall, doubleJump, bonusDoubleJump, dead, trueKill;\r\n    // Style points\r\n    public float coolRoll;\r\n    public float maxGroundSpeed;\r\n    public Animation currentAnimation;\r\n    public boolean ignoreWater;\r\n    public boolean crouched;\r\n    public boolean crushed;\r\n    public int wallDirection;\r\n    public int keyCount;\r\n    public int ticksAlive;\r\n    public float trailSpeed;\r\n    public boolean hasEvilKey;\r\n    public boolean savedEvilKey;\r\n    public int savedDirection;\r\n    public EvilKey evilKey;\r\n    public int savedKeyCount;\r\n    public boolean savedGravity;\r\n    public int[] totalCoinCounts;\r\n    public int[] coinCounts;\r\n    public boolean[] shouldRenderCoinCounts;\r\n    public Powerup savedPowerup;\r\n    public java.util.List<Point> previousPositions;\r\n    public java.util.List<Float> previousSpeeds;\r\n    public boolean canCrouch;\r\n    public boolean flippedGravity;\r\n    private Powerup powerup;\r\n    private boolean speedrunning;\r\n\r\n    public Player(Point startPos) {\r\n        ticksAlive = 0;\r\n        dead = false;\r\n        currentAnimation = idleAnimation;\r\n        x = startPos.x * 64 + 8;\r\n        y = startPos.y * 64;\r\n        this.startPos = startPos;\r\n        direction = 1;\r\n        velocityX = 0;\r\n        velocityY = 0;\r\n        width = 48;\r\n        height = 48;\r\n        slippery = false;\r\n        rotation = 0;\r\n        win = false;\r\n        trueKill = false;\r\n        previousPositions = new ArrayList<>();\r\n        previousSpeeds = new ArrayList<>();\r\n        totalCoinCounts = new int[4];\r\n        coinCounts = new int[4];\r\n        shouldRenderCoinCounts = new boolean[4];\r\n        startTick = true;\r\n        lastTouchedTiles = new HashSet<>();\r\n        crushed = false;\r\n        powerup = new Powerup(this);\r\n        savedPowerup = powerup;\r\n        previousPositions.clear();\r\n        savedDirection = 1;\r\n        controller = ControlInput.localControls;\r\n    }\r\n\r\n    public Player(Point startPos, Level game) {\r\n        this(startPos);\r\n        init(game);\r\n    }\r\n\r\n    public void setStartPos(Point startPos) {\r\n        this.startPos.x = startPos.x;\r\n        this.startPos.y = startPos.y;\r\n    }\r\n\r\n    public void init(Level game) {\r\n        ticksAlive = 0;\r\n        leftGroundFor = 30;\r\n        leftWallFor = 30;\r\n        touchingGround = false;\r\n        win = false;\r\n        x = startPos.x * 64 + 8;\r\n        y = startPos.y * 64;\r\n        for (int i = 0; i < 20; i++)\r\n            previousPositions.add(0, new Point(getCenterX(), getCenterY()));\r\n        velocityX = 0;\r\n        velocityY = 0;\r\n        jumpReleased = false;\r\n        doubleJump = false;\r\n        dead = false;\r\n        previousSpeeds.clear();\r\n        currentAnimation = idleAnimation;\r\n        deathAnimation.reset();\r\n        deathAnimation.setAnimationSpeed(4);\r\n        winAnimation.reset();\r\n        winAnimation.setAnimationSpeed(8);\r\n        slippery = false;\r\n        keyCount = savedKeyCount;\r\n        flippedGravity = savedGravity;\r\n        hasEvilKey = savedEvilKey;\r\n        direction = savedDirection;\r\n        if (hasEvilKey) {\r\n            evilKey = new EvilKey((int) x / 64, (int) y / 64);\r\n        }\r\n    }\r\n\r\n    public void setCoinCounts(Level game) {\r\n        for (int i = 0; i < totalCoinCounts.length; i++) {\r\n            totalCoinCounts[i] = game.getVolatileTileCount(\"coin\", i);\r\n            shouldRenderCoinCounts[i] = game.getVolatileTileCount(\"coin_box\", i * 2) > 0 || game.getVolatileTileCount(\"coin_box\", i * 2 + 1) > 0;\r\n        }\r\n    }\r\n\r\n    public void updateCoinCounts(Level game) {\r\n        for (int i = 0; i < coinCounts.length; i++) {\r\n            if (totalCoinCounts[i] > 0) coinCounts[i] = totalCoinCounts[i] - game.getVolatileTileCount(\"coin\", i);\r\n        }\r\n    }\r\n\r\n    public void jump(Level game) {\r\n        powerup.jump(game);\r\n    }\r\n\r\n    public void updateVelocity() {\r\n        powerup.updateVelocity();\r\n    }\r\n\r\n//    public void touchingEnemy(Enemy enemy) {\r\n//        kill();\r\n//    }\r\n\r\n    public boolean startSpeedrunTimer() {\r\n        return speedrunning;\r\n    }\r\n\r\n    @Override\r\n    public void update(Level game) {\r\n        touchingWater = false;\r\n        for (Tile tile : lastTouchedTiles) {\r\n            if (tile.hasTag(\"water\")) {\r\n                touchingWater = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (startTick) {\r\n            setCoinCounts(game);\r\n            startTick = false;\r\n        }\r\n\r\n        ticksAlive++;\r\n\r\n        if (hasEvilKey) {\r\n            evilKey.update(this, game);\r\n        } else {\r\n            evilKey = null;\r\n        }\r\n\r\n        previousPositions.add(0, new Point((int) x, (int) y));\r\n        if (previousPositions.size() > 1024) {\r\n            previousPositions.remove(previousPositions.size() - 1);\r\n        }\r\n        previousSpeeds.add(0, velocityMagnitude());\r\n        if (previousSpeeds.size() > 8) {\r\n            previousSpeeds.remove(previousSpeeds.size() - 1);\r\n        }\r\n\r\n        frame = currentAnimation.stepLooping();\r\n\r\n        if (currentAnimation == runAnimation) {\r\n            if (runAnimation.tick == 0 && runAnimation.frame % 2 == 0) SoundEngine.playSound(\"step.ogg\");\r\n        }\r\n\r\n        if (end) {\r\n            game.endGame();\r\n            return;\r\n        }\r\n        if (win) {\r\n            dead = false;\r\n            currentAnimation = winAnimation;\r\n            if (currentAnimation.getFrame() >= 21) {\r\n                velocityX = 0;\r\n                velocityY += -3.5f * getGravityMagnitude();\r\n                y += velocityY;\r\n            } else if (warpingOut()) {\r\n                currentAnimation.setAnimationSpeed(4);\r\n                velocityX *= 0;\r\n                velocityY *= 0;\r\n            } else {\r\n                currentAnimation.setAnimationSpeed(8);\r\n                updateVelocity();\r\n                collide(game);\r\n            }\r\n            if (currentAnimation.getFinished()) {\r\n                end = true;\r\n            }\r\n            return;\r\n        }\r\n        if (dead) {\r\n            deathAnimation.setAnimationSpeed(4);\r\n            if (currentAnimation.getFinished()) {\r\n                if (trueKill) {\r\n                    game.reset();\r\n                    return;\r\n                }\r\n                init(game);\r\n                powerup = savedPowerup;\r\n                powerup.init(this);\r\n                game.resetToCheckpointState();\r\n                updateCoinCounts(game);\r\n            }\r\n            return;\r\n        }\r\n\r\n        powerup.update(game);\r\n\r\n        if (!flippedGravity && y < -128)\r\n            kill();\r\n\r\n        if (flippedGravity && y > game.getHeight() * 64 + 256)\r\n            kill();\r\n\r\n        if (canCrouch && game.mapData.getValue(\"crouching\").asBool()) {\r\n            if (controller.isJustPressed(Controls.LEFT) ^ controller.isJustPressed(Controls.RIGHT) || !controller.isPressed(Controls.DOWN) || !touchingGround) {\r\n                height = 48;\r\n                crouched = false;\r\n            }\r\n            if (controller.isJustPressed(Controls.DOWN) && leftGroundFor < 4) {\r\n                touchingWall = false;\r\n                velocityX *= 1.5f;\r\n                height = 24;\r\n                crouched = true;\r\n            }\r\n        }\r\n\r\n        crushed = false;\r\n        updateVelocity();\r\n        if (touchingGround) bonusDoubleJump = false;\r\n        touchingGround = false;\r\n        touchingWall = false;\r\n        slippery = false;\r\n        canCrouch = true;\r\n        collide(game);\r\n\r\n        // Don't start the timer until the player moves (to avoid unfair lag spikes on level load)\r\n        if (!speedrunning) {\r\n            if (previousPositions.size() > 0 && !previousPositions.get(0).equals(new Point((int) x, (int) y))) {\r\n                speedrunning = true;\r\n            }\r\n            if (ticksAlive > 2)\r\n                ticksAlive = 2;\r\n        }\r\n\r\n        if (controller != ControlInput.localControls) {\r\n            controller.update();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected boolean dontRefreshTouchingGround() {\r\n        return true;\r\n    }\r\n\r\n    public float getGravityMagnitude() {\r\n        return 1f * getGravityDirection();\r\n    }\r\n\r\n    public int getGravityDirection() {\r\n        return flippedGravity ? 1 : -1;\r\n    }\r\n\r\n    public Vector2 getCenter() {\r\n        return new Vector2(x + 24, y + 24);\r\n    }\r\n\r\n    public int getCenterX() {\r\n        return (int) (x + width / 2);\r\n    }\r\n\r\n    public int getCenterY() {\r\n        return (int) (y + height / 2);\r\n    }\r\n\r\n    // Return false to prevent the player from having their velocity set to 0\r\n    @Override\r\n    public boolean onCollide(Level game, Rectangle entityHitbox, Rectangle tileHitbox, Tile tile, boolean yCollision) {\r\n        if (!powerup.onCollide(game, entityHitbox, tileHitbox, tile, yCollision)) {\r\n            return false;\r\n        }\r\n        return super.onCollide(game, entityHitbox, tileHitbox, tile, yCollision);\r\n    }\r\n\r\n    public boolean isFresh() {\r\n        return ticksAlive <= 1;\r\n    }\r\n\r\n    @Override\r\n    public void onCollision(boolean horizontal, boolean vertical) {\r\n        powerup.onCollision(horizontal, vertical);\r\n    }\r\n\r\n    @Override\r\n    public void tileInteractions(Rectangle playerHitbox, List<Tile> collisions, Level game) {\r\n        Set<Tile> newLastTouchedTiles = new HashSet<>();\r\n        List<Rectangle> tileHitboxes = new ArrayList<>();\r\n        for (Tile tile : collisions) {\r\n            if (crouched && tile.isSolid() && tile.hasTag(\"half\") && (tile.tileType == 0 || tile.tileType == 2)) {\r\n                controller.pressControl(Controls.DOWN);\r\n                crushed = true;\r\n            }\r\n            if (tile.hasTag(\"multi_hitbox\")) {\r\n                tile.toRectangles(tileHitboxes);\r\n                for (Rectangle tileHitbox : tileHitboxes) {\r\n                    if (playerHitbox.overlaps(tileHitbox)) {\r\n                        touchingTile(game, playerHitbox, tile, tileHitbox, newLastTouchedTiles);\r\n                        break;\r\n                    }\r\n                }\r\n                tileHitboxes.clear();\r\n            } else {\r\n                Rectangle tileHitbox = tile.toRectangle();\r\n                if (playerHitbox.overlaps(tileHitbox)) {\r\n                    touchingTile(game, playerHitbox, tile, tileHitbox, newLastTouchedTiles);\r\n                }\r\n            }\r\n        }\r\n        lastTouchedTiles = newLastTouchedTiles;\r\n    }\r\n\r\n    public void kill() {\r\n        if (!win && !dead) {\r\n            LittleH.program.dynamicCamera.addScreenShake(10);\r\n            SoundEngine.playSound(\"death.ogg\");\r\n            dead = true;\r\n            currentAnimation = deathAnimation;\r\n            deathAnimation.setAnimationSpeed(4);\r\n        }\r\n    }\r\n\r\n    public void trueKill() {\r\n        kill();\r\n        trueKill = true;\r\n    }\r\n\r\n    public void win() {\r\n        win = true;\r\n        SoundEngine.playSound(\"win_level.ogg\");\r\n        velocityX *= 0.8f;\r\n        velocityY *= 0.8f;\r\n        currentAnimation = winAnimation;\r\n        winAnimation.setAnimationSpeed(8);\r\n    }\r\n\r\n    public boolean warpingOut() {\r\n        return currentAnimation == winAnimation && currentAnimation.getFrame() >= 17;\r\n    }\r\n\r\n    public void touchingTile(Level game, Rectangle playerHitbox, Tile tile, Rectangle tileHitbox, Set<Tile> newLastTouchedTiles) {\r\n//        if (tile.hasTag(\"multi_hitbox\")) {\r\n//        }\r\n        boolean splash = true;\r\n        touchingTile(game, tile);\r\n        if (tile.hasTag(\"death\")) {\r\n            if (playerHitbox.overlaps(tileHitbox)) kill();\r\n        } else if (tile.hasTag(\"bounce\")) {\r\n            if (flippedGravity) {\r\n                if (velocityY < 30 && !lastTouchedTiles.contains(tile)) SoundEngine.playSound(\"bounce.ogg\");\r\n                if (velocityY > 36) velocityY *= -1.5f;\r\n                else if (velocityY > -36) velocityY = -36;\r\n            } else {\r\n                if (velocityY < 30 && !lastTouchedTiles.contains(tile)) SoundEngine.playSound(\"bounce.ogg\");\r\n                if (velocityY < -36) velocityY *= -1.5f;\r\n                else if (velocityY < 36) velocityY = 36;\r\n            }\r\n        }\r\n        if (tile.hasTag(\"water\")) {\r\n            for (Tile otherTile : lastTouchedTiles) {\r\n                if (otherTile.hasTag(\"water\")) splash = false;\r\n            }\r\n            if (splash) {\r\n                if (velocityMagnitude() > 24) {\r\n                    SoundEngine.playSound(\"splash.ogg\");\r\n                } else {\r\n                    SoundEngine.playSound(\"splish.ogg\");\r\n                }\r\n            }\r\n        }\r\n        if (tile.hasTag(\"checkpoint\") && tile.tileType % 2 == 0) {\r\n            SoundEngine.playSound(\"checkpoint.ogg\");\r\n            startPos.x = tile.x;\r\n            startPos.y = tile.y;\r\n            game.notify(\"notify_checkpoint\", null);\r\n            tile.setTileType(1);\r\n            game.saveCheckpointState();\r\n            savedGravity = flippedGravity;\r\n            savedKeyCount = keyCount;\r\n            savedEvilKey = hasEvilKey;\r\n            savedPowerup = powerup;\r\n            savedDirection = direction;\r\n            game.showTimer();\r\n        } else if (!win && tile.hasTag(\"end\")) {\r\n            game.showTimer();\r\n            for (int i = 0; i < 16; i++) {\r\n                game.addParticle(new Particle(x + width / 4, y + height / 4, (float) ((Math.random() - 0.5) * -16), (float) ((Math.random() - 0.5) * -16),\r\n                        24, 24, 3, 3, 1, 0.96f, 0f, (int) (Math.random() * 2), 0, \"particles/twinkle.png\", 120));\r\n            }\r\n            win();\r\n        }\r\n        if (tile.hasTag(\"pickup\")) {\r\n            boolean pickup = true;\r\n            if (tile.hasTag(\"even_pickup\")) {\r\n                if (tile.tileType % 2 != 0)\r\n                    pickup = false;\r\n            }\r\n            if (pickup) {\r\n                if (playerHitbox.overlaps(tileHitbox)) {\r\n                    game.inGameRemoveTile(tile);\r\n                    if (tile.hasTag(\"dialogue\")) {\r\n                        String key = tile.extra.trim();\r\n                        Dialogue dialogue = Dialogues.getDialogue(key);\r\n                        if (dialogue != null)\r\n                            game.setDialogue(dialogue);\r\n                        return;\r\n                    }\r\n                    if (tile.hasTag(\"coin\")) {\r\n                        SoundEngine.playSound(\"coin.ogg\");\r\n                        coinCounts[tile.tileType]++;\r\n                        if (shouldRenderCoinCounts[tile.tileType] && game.getVolatileTileCount(\"coin\", tile.tileType) == 0) {\r\n                            SoundEngine.playSound(\"all_coins_collected.ogg\");\r\n                            game.notify(\"notify_all_coins\", tile.tileType);\r\n                        }\r\n                    }\r\n                    if (tile.hasTag(\"powerup\")) {\r\n                        SoundEngine.playSound(\"powerup_get.ogg\");\r\n                        pickUpPowerup(tile.tileType);\r\n                    }\r\n                    if (tile.hasTag(\"key\")) {\r\n                        SoundEngine.playSound(\"coin.ogg\");\r\n                        if (tile.hasTag(\"evil\")) {\r\n                            evilKey = new EvilKey(tile.x, tile.y);\r\n                            hasEvilKey = true;\r\n                            return;\r\n                        }\r\n                        keyCount++;\r\n                    }\r\n                    if (tile.hasTag(\"jump_refresh\")) {\r\n                        SoundEngine.playSound(\"coin.ogg\");\r\n                        doubleJump = true;\r\n                        if (!game.mapData.getValue(\"double_jumping\").asBool()) {\r\n                            bonusDoubleJump = true;\r\n                        }\r\n                    }\r\n                    if (tile.hasTag(\"timer\")) {\r\n                        SoundEngine.playSound(\"powerup_get.ogg\");\r\n                        if (game.timeLimit > -1) {\r\n                            switch (tile.getPropertyIndex()) {\r\n                                case 0:\r\n                                    game.timeLimit += 10;\r\n                                    game.startPopup(\"+10 seconds\", 180);\r\n                                    break;\r\n                                case 1:\r\n                                    game.timeLimit += 30;\r\n                                    game.startPopup(\"+30 seconds\", 180);\r\n                                    break;\r\n                                case 2:\r\n                                    game.timeLimit += 60;\r\n                                    game.startPopup(\"+60 seconds\", 180);\r\n                                    break;\r\n                                case 3:\r\n                                    game.timeLimit += 100;\r\n                                    game.startPopup(\"+100 seconds\", 180);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        game.timeLimit = Math.min(9999, game.timeLimit);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        newLastTouchedTiles.add(tile);\r\n        powerup.touchingTile(tile);\r\n    }\r\n\r\n    public Point getPreviousCenter(int ticksBehind) {\r\n        if (ticksBehind < previousPositions.size()) return new Point(previousPositions.get(ticksBehind).x + width / 2, previousPositions.get(ticksBehind).y + height / 2);\r\n        return new Point (0, 0);\r\n    }\r\n\r\n    public void drawTrail(Graphics g) {\r\n        boolean speedy = false;\r\n        float speed = 0;\r\n        if (trailSpeed > 0) {\r\n            speed = trailSpeed;\r\n            trailSpeed = 0;\r\n            speedy = true;\r\n        } else {\r\n            for (float f : previousSpeeds) {\r\n                if (f > 24) {\r\n                    if (f > speed) speed = f;\r\n                    speedy = true;\r\n                }\r\n            }\r\n        }\r\n        if (speedy) {\r\n            int[][] trail = new int[2][9];\r\n            trail[0][0] = (int) x + width / 2;\r\n            trail[1][0] = (int) y + height / 2;\r\n            for (int i = 1; i < 5; i++) {\r\n                trail[0][i] = getPreviousCenter(i * 2).x;\r\n                trail[1][i] = getPreviousCenter(i * 2).y;\r\n            }\r\n            double[] angles = new double[4];\r\n            for (int i = 0; i < 4; i++) {\r\n                angles[i] = Math.atan2(trail[1][i + 1] - trail[1][i], trail[0][i + 1] - trail[0][i]);\r\n            }\r\n            for (int i = 0; i < 4; i++) {\r\n                trail[0][8 - i] = (int) (trail[0][i] + 6 * (5 - i) * Math.cos(angles[i] + Math.PI / 2));\r\n                trail[1][8 - i] = (int) (trail[1][i] + 6 * (5 - i) * Math.sin(angles[i] + Math.PI / 2));\r\n            }\r\n            for (int i = 0; i < 4; i++) {\r\n                trail[0][i] = (int) (trail[0][i] + 6 * (5 - i) * Math.cos(angles[i] + Math.PI / 2 * 3));\r\n                trail[1][i] = (int) (trail[1][i] + 6 * (5 - i) * Math.sin(angles[i] + Math.PI / 2 * 3));\r\n            }\r\n\r\n            float[] vertices = new float[18];\r\n\r\n            for (int i = 0; i < 9; i++) {\r\n                vertices[i * 2] = trail[0][i];\r\n                vertices[i * 2 + 1] = trail[1][i] + 8;\r\n            }\r\n\r\n            g.setColor(new Color(1, 1, 1, Math.min(1, Math.max(0, (int) speed - 24) * 2 / 255f)));\r\n            g.drawMesh(null, vertices);\r\n            g.resetColor();\r\n        }\r\n    }\r\n\r\n    public void render(Graphics g, Level game) {\r\n        for (int i = keyCount; i > 0; i--) {\r\n            if (previousPositions.size() > 0) {\r\n                Point position = previousPositions.get(Math.max(0, Math.min(previousPositions.size() - 1, 5 * (2 + i))));\r\n                g.drawImage(Images.getImage(\"tiles/key.png\"), new Rectangle(position.x - 8, position.y, 64, 64), new Rectangle(0, 0, 8, 8));\r\n            }\r\n        }\r\n        if (evilKey != null) {\r\n            evilKey.render(g, this, game);\r\n        }\r\n        if (!warpingOut())\r\n            drawTrail(g);\r\n        powerup.preDrawPlayer(g, game);\r\n        drawPlayer(g, game);\r\n    }\r\n\r\n    public void renderHUD(Graphics g, Level game) {\r\n        int drawnCoins = 0;\r\n        for (int i = 0; i < totalCoinCounts.length; i++) {\r\n            int total = totalCoinCounts[i];\r\n            if (shouldRenderCoinCounts[i]) {\r\n                g.drawString(coinCounts[i] + \"/\" + total, LittleH.borderedFont, -MainMenu.relZeroX() - 48, -MainMenu.relZeroY() - 48 - 48 * drawnCoins + 32 - 70 - 18, LittleH.defaultFontScale, 1);\r\n                g.drawImage(Images.getImage(\"ui/coins.png\"), new Rectangle(-MainMenu.relZeroX() - 40, -MainMenu.relZeroY() - 48 - 48 * drawnCoins - 64 - 12, 32, 40), new Rectangle(0, 5 * i, 4, 5));\r\n                drawnCoins++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void drawPlayer(Graphics g, Level game) {\r\n        powerup.drawPlayer(g, game);\r\n    }\r\n\r\n    public void touchingEnemy(Enemy enemy) {\r\n        powerup.touchingEnemy(enemy);\r\n    }\r\n\r\n    public boolean falling() {\r\n        return velocityY * getGravityDirection() > 0;\r\n    }\r\n\r\n    public boolean fallingFasterThan(float speed) {\r\n        return velocityY * getGravityDirection() > speed;\r\n    }\r\n\r\n    public boolean risingFasterThan(float speed) {\r\n        return velocityY * -getGravityDirection() > speed;\r\n    }\r\n\r\n    public float getFeetY() {\r\n        return getCenterY() + height / 2f * getGravityDirection();\r\n    }\r\n\r\n    public void pickUpPowerup(int typeIndex) {\r\n        if (typeIndex == 0) powerup = new Powerup(this);\r\n        else if (typeIndex == 1) powerup = new BallMode(this);\r\n        else if (typeIndex == 2) powerup = new WingedMode(this);\r\n        else if (typeIndex == 3) powerup = new CelesteMode(this);\r\n        else if (typeIndex == 4) powerup = new GravityMode(this);\r\n        else if (typeIndex == 5) powerup = new StoneMode(this);\r\n        else if (typeIndex == 6) powerup = new GunMode(this);\r\n        else if (typeIndex == 7) powerup = new CubeMode(this);\r\n    }\r\n\r\n    public class EvilKey {\r\n        public Rectangle hitbox;\r\n        public float keyVelX, keyVelY;\r\n        public int startUp;\r\n\r\n        public EvilKey(int tileX, int tileY) {\r\n            hitbox = new Rectangle(tileX * 64 + 16, tileY * 64, 48, 48);\r\n            startUp = 120;\r\n        }\r\n\r\n        public void update(Player player, Level game) {\r\n            if (startUp > 0) {\r\n                if (startUp % 4 == 0) {\r\n                    game.addParticle(new Particle(hitbox.x + hitbox.width / 2 - 24, hitbox.y + hitbox.height / 2 - 16, (float) ((Math.random() - 0.5) * -6), (float) ((Math.random() - 0.5) * -6), 32, 32, 4, 4, 1, 0.98f, 0f,\r\n                            (int) (Math.random() * 4), 0, \"particles/evil_smoke.png\", 60, 0.02f));\r\n                }\r\n                startUp--;\r\n                return;\r\n            }\r\n            if (Math.random() > 0.95) {\r\n                game.addParticle(new Particle(hitbox.x + hitbox.width / 2 - 24, hitbox.y + hitbox.height / 2 - 16, (float) ((Math.random() - 0.5) * -6), (float) ((Math.random() - 0.5) * -6), 32, 32, 4, 4, 1, 0.98f, 0f,\r\n                        (int) (Math.random() * 4), 0, \"particles/evil_smoke.png\", 30, 0.02f));\r\n            }\r\n            Point target = player.previousPositions.get(30);\r\n            keyVelX = (target.x - hitbox.x) / 3;\r\n            keyVelY = (target.y - hitbox.y) / 3;\r\n            hitbox.x += keyVelX;\r\n            hitbox.y += keyVelY;\r\n            if (hitbox.overlaps(new Rectangle(player.x ,player.y, player.width, player.height))) {\r\n                player.kill();\r\n            }\r\n        }\r\n\r\n        public void render(Graphics g, Player player, Level game) {\r\n            Point position = new Point((int) hitbox.x - 16, (int) hitbox.y);\r\n            g.drawImage(startUp > 60 ? Images.getImage(\"tiles/evil_key.png\") : Images.getImage(\"tiles/evil_key_awake.png\"), new Rectangle(position.x, position.y, 64, 64), new Rectangle(0, 0, 8, 8));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/entity/player/Player.java b/core/src/com/sab/littleh/game/entity/player/Player.java
--- a/core/src/com/sab/littleh/game/entity/player/Player.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/entity/player/Player.java	(date 1708573585169)
@@ -56,18 +56,17 @@
     public int keyCount;
     public int ticksAlive;
     public float trailSpeed;
-    public boolean hasEvilKey;
-    public boolean savedEvilKey;
+    public int savedEvilKeyCount;
     public int savedDirection;
-    public EvilKey evilKey;
+    public final List<EvilKey> evilKeys = new ArrayList<>();
     public int savedKeyCount;
     public boolean savedGravity;
     public int[] totalCoinCounts;
     public int[] coinCounts;
     public boolean[] shouldRenderCoinCounts;
     public Powerup savedPowerup;
-    public java.util.List<Point> previousPositions;
-    public java.util.List<Float> previousSpeeds;
+    public List<Point> previousPositions;
+    public List<Float> previousSpeeds;
     public boolean canCrouch;
     public boolean flippedGravity;
     private Powerup powerup;
@@ -138,10 +137,9 @@
         slippery = false;
         keyCount = savedKeyCount;
         flippedGravity = savedGravity;
-        hasEvilKey = savedEvilKey;
         direction = savedDirection;
-        if (hasEvilKey) {
-            evilKey = new EvilKey((int) x / 64, (int) y / 64);
+        for (int i = 0; i < savedEvilKeyCount; i++) {
+            evilKeys.add(new EvilKey((int) x / 64, (int) y / 64));
         }
     }
 
@@ -191,11 +189,7 @@
 
         ticksAlive++;
 
-        if (hasEvilKey) {
-            evilKey.update(this, game);
-        } else {
-            evilKey = null;
-        }
+        evilKeys.forEach(evilKey -> evilKey.update(this, game));
 
         previousPositions.add(0, new Point((int) x, (int) y));
         if (previousPositions.size() > 1024) {
@@ -435,7 +429,7 @@
             game.saveCheckpointState();
             savedGravity = flippedGravity;
             savedKeyCount = keyCount;
-            savedEvilKey = hasEvilKey;
+            savedEvilKeyCount = evilKeys.size();
             savedPowerup = powerup;
             savedDirection = direction;
             game.showTimer();
@@ -478,8 +472,7 @@
                     if (tile.hasTag("key")) {
                         SoundEngine.playSound("coin.ogg");
                         if (tile.hasTag("evil")) {
-                            evilKey = new EvilKey(tile.x, tile.y);
-                            hasEvilKey = true;
+                            evilKeys.add(new EvilKey(tile.x, tile.y));
                             return;
                         }
                         keyCount++;
@@ -583,9 +576,7 @@
                 g.drawImage(Images.getImage("tiles/key.png"), new Rectangle(position.x - 8, position.y, 64, 64), new Rectangle(0, 0, 8, 8));
             }
         }
-        if (evilKey != null) {
-            evilKey.render(g, this, game);
-        }
+        evilKeys.forEach(evilKey ->  evilKey.render(g, this, game));
         if (!warpingOut())
             drawTrail(g);
         powerup.preDrawPlayer(g, game);
@@ -662,7 +653,7 @@
                 game.addParticle(new Particle(hitbox.x + hitbox.width / 2 - 24, hitbox.y + hitbox.height / 2 - 16, (float) ((Math.random() - 0.5) * -6), (float) ((Math.random() - 0.5) * -6), 32, 32, 4, 4, 1, 0.98f, 0f,
                         (int) (Math.random() * 4), 0, "particles/evil_smoke.png", 30, 0.02f));
             }
-            Point target = player.previousPositions.get(30);
+            Point target = player.previousPositions.get(30 + 30 * player.evilKeys.indexOf(this));
             keyVelX = (target.x - hitbox.x) / 3;
             keyVelY = (target.y - hitbox.y) / 3;
             hitbox.x += keyVelX;
Index: core/src/com/sab/littleh/game/level/LevelEditor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.level;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.mainmenu.LevelEditorMenu;\r\nimport com.sab.littleh.settings.Settings;\r\nimport com.sab.littleh.util.DynamicCamera;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.Images;\r\n\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\npublic class LevelEditor {\r\n    protected static DynamicCamera camera = LittleH.program.dynamicCamera;\r\n    protected Level level;\r\n    public static boolean saved;\r\n    protected Set<Point> fillTiles;\r\n    protected static Rectangle selection;\r\n    protected static boolean selectionAlive;\r\n    protected static TileSelection tileSelection;\r\n    protected static Vector2 selectionAnchor;\r\n    protected static boolean movingSelection;\r\n    protected static boolean nudgingSelection;\r\n    protected List<UndoAction> undoQueue;\r\n    protected int undoIndex;\r\n    protected String layer;\r\n\r\n    public LevelEditor(Level level, String layer) {\r\n        this.level = level;\r\n        setSaved(true);\r\n        fillTiles = new HashSet<>();\r\n        undoQueue = new ArrayList<>();\r\n        this.layer = layer;\r\n    }\r\n\r\n    public void setSaved(boolean value) {\r\n        saved = value;\r\n        String title = \" | Editing level: \" + level.mapData.getValue(\"name\");\r\n        if (!saved)\r\n            title += \" (Unsaved)\";\r\n        LittleH.setTitle(title);\r\n    }\r\n\r\n    public Point addTile(Tile tileToCopy, int x, int y, boolean addToUndoQueue) {\r\n        Tile tile = tileToCopy;\r\n        if (!tileToCopy.image.equals(\"delete\"))\r\n            tile = tileToCopy.copy();\r\n        tile.x = x;\r\n        tile.y = y;\r\n\r\n        Point amountNegativeResize = resizeAround(x, y);\r\n\r\n        tile.x = Math.max(0, x);\r\n        tile.y = Math.max(0, y);\r\n\r\n        level.removeTile(layer, tile.x, tile.y);\r\n\r\n        if (!tileToCopy.image.equals(\"delete\"))\r\n            level.addTile(layer, tile);\r\n\r\n        if (amountNegativeResize.x > 0 || amountNegativeResize.y > 0) {\r\n            undoQueue.forEach(undoAction -> {\r\n                undoAction.resize(amountNegativeResize);\r\n            });\r\n        }\r\n\r\n        if (addToUndoQueue) {\r\n            Tile tileAt = level.mapLayers.get(layer).tileMap.get(tile.x).get(tile.y);\r\n            if (tileAt == null) {\r\n                tileAt = new Tile(\"delete\");\r\n                tileAt.x = tile.x;\r\n                tileAt.y = tile.y;\r\n            } else {\r\n                tileAt = tileAt.copy();\r\n            }\r\n            if (!Tile.tilesEqual(tileAt, tile))\r\n                addUndoAction(new UndoTile(tile.copy(), tileAt));\r\n        }\r\n\r\n        if (tile.image.equals(\"delete\")) {\r\n            level.mapLayers.get(layer).tileMap.get(tile.x).set(tile.y, null);\r\n        } else {\r\n            level.mapLayers.get(layer).tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n\r\n        Tile[][] neighbors = getNeighbors(tile.x, tile.y);\r\n\r\n        for (Tile[] tiles : neighbors)\r\n            for (Tile neighborTile : tiles)\r\n                if (neighborTile != null)\r\n                    checkTiling(getNeighbors(neighborTile.x, neighborTile.y), neighborTile);\r\n        setSaved(false);\r\n\r\n        return amountNegativeResize;\r\n    }\r\n\r\n    public void select(Point position) {\r\n        if (selectionActive()) {\r\n            updateSelection(position);\r\n        } else {\r\n            startSelection(position);\r\n        }\r\n    }\r\n\r\n    public void startSelection(Point point) {\r\n        endSelection();\r\n        selection = new Rectangle(point.x, point.y, 1, 1);\r\n        selectionAlive = true;\r\n    }\r\n\r\n    public void updateSelection(Point point) {\r\n        if (selection == null) {\r\n            startSelection(point);\r\n        } else {\r\n            Point range = new Point(point.x - selection.x - selection.width + 1, point.y - selection.y - selection.height + 1);\r\n            selection.width += range.x;\r\n            selection.height += range.y;\r\n        }\r\n    }\r\n\r\n    public void selectionReleased() {\r\n        if (selection != null) {\r\n            selection = selectionNormalized();\r\n            if (tileSelection != null)\r\n                tileSelection.setRect(selection);\r\n        }\r\n        selectionAlive = false;\r\n        selectionAnchor = null;\r\n        movingSelection = false;\r\n        nudgingSelection = false;\r\n    }\r\n\r\n    public boolean selectionActive() {\r\n        return selection != null && selectionAlive;\r\n    }\r\n\r\n    public void endSelection() {\r\n        selection = null;\r\n        tileSelection = null;\r\n    }\r\n\r\n    public void startMovingSelection(Vector2 relativeTo) {\r\n        nudgingSelection = true;\r\n        selectionAnchor = new Vector2();\r\n        selectionAnchor.x = selection.x * 64 - relativeTo.x;\r\n        selectionAnchor.y = selection.y * 64 - relativeTo.y;\r\n        if (tileSelection == null)\r\n            tileSelection = new TileSelection(selection, level, false, layer);\r\n    }\r\n\r\n    public void updateSelectionPosition(Vector2 mousePosition) {\r\n        if (selection != null) {\r\n            if (selectionAnchor == null)\r\n                startMovingSelection(mousePosition);\r\n            selection.x = (int) (selectionAnchor.x + mousePosition.x) / 64;\r\n            selection.y = (int) (selectionAnchor.y + mousePosition.y) / 64;\r\n            if (tileSelection != null)\r\n                tileSelection.translate();\r\n        }\r\n    }\r\n\r\n    public void setSelectionPosition(Vector2 mousePosition) {\r\n        if (selection != null) {\r\n            movingSelection = true;\r\n            selection.x = (int) (mousePosition.x) / 64 - selection.width / 2;\r\n            selection.y = (int) (mousePosition.y) / 64 - selection.height / 2;\r\n            if (tileSelection != null)\r\n                tileSelection.translate();\r\n        }\r\n    }\r\n\r\n    public Point resizeAround(int x, int y) {\r\n        int widthToAdd = 0;\r\n        int heightToAdd = 0;\r\n\r\n        if (x < 0) {\r\n            widthToAdd = Math.abs(x);\r\n            for (int i = 0; i < widthToAdd; i++) {\r\n                Collection<MapLayer> layers = level.mapLayers.values();\r\n                for (MapLayer mapLayer : layers) {\r\n                    List<Tile> tiles = new ArrayList<>(level.getHeight());\r\n                    for (int j = 0; j < level.getHeight(); j++)\r\n                        tiles.add(null);\r\n                    mapLayer.tileMap.add(0, tiles);\r\n                }\r\n                camera.targetPosition.x += 64;\r\n                camera.position.x += 64;\r\n            }\r\n        } else if (x >= level.getWidth()) {\r\n            int expandX = x - level.getWidth() + 1;\r\n            for (int i = 0; i < expandX; i++) {\r\n                Collection<MapLayer> layers = level.mapLayers.values();\r\n                for (MapLayer mapLayer : layers) {\r\n                    List<Tile> tiles = new ArrayList<>(level.getHeight());\r\n                    for (int j = 0; j < level.getHeight(); j++)\r\n                        tiles.add(null);\r\n                    mapLayer.tileMap.add(tiles);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (y < 0) {\r\n            heightToAdd = Math.abs(y);\r\n            boolean cameraShifted = false;\r\n\r\n            Collection<MapLayer> layers = level.mapLayers.values();\r\n            for (MapLayer mapLayer : layers) {\r\n                for (List<Tile> tiles : mapLayer.tileMap) {\r\n                    for (int i = 0; i < heightToAdd; i++) {\r\n                        tiles.add(0, null);\r\n                        if (!cameraShifted) {\r\n                            camera.targetPosition.y += 64;\r\n                            camera.position.y += 64;\r\n                        }\r\n                    }\r\n                    cameraShifted = true;\r\n                }\r\n            }\r\n        } else if (y >= level.getHeight()) {\r\n            int expandY = y - level.getHeight() + 1;\r\n\r\n            Collection<MapLayer> layers = level.mapLayers.values();\r\n            for (MapLayer mapLayer : layers) {\r\n                for (List<Tile> tiles : mapLayer.tileMap) {\r\n                    for (int i = 0; i < expandY; i++) {\r\n                        tiles.add(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (widthToAdd > 0 || heightToAdd > 0) {\r\n            Collection<MapLayer> layers = level.mapLayers.values();\r\n            for (MapLayer mapLayer : layers) {\r\n                for (Tile tile : mapLayer.allTiles) {\r\n                    tile.x += widthToAdd;\r\n                    tile.y += heightToAdd;\r\n                }\r\n            }\r\n\r\n            if (selection != null) {\r\n                selection.x += widthToAdd;\r\n                selection.y += heightToAdd;\r\n                if (tileSelection != null) {\r\n                    tileSelection.resize(widthToAdd, heightToAdd);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (LittleH.program.getMenu() instanceof LevelEditorMenu) {\r\n            ((LevelEditorMenu) LittleH.program.getMenu()).negativeResize(widthToAdd, heightToAdd);\r\n        }\r\n\r\n        return new Point(widthToAdd, heightToAdd);\r\n    }\r\n\r\n    public boolean isNudging() {\r\n        return nudgingSelection;\r\n    }\r\n\r\n    public boolean isMoving() {\r\n        return movingSelection;\r\n    }\r\n\r\n    public Tile[][] getNeighbors(int tileX, int tileY) {\r\n        // Magic\r\n        Tile[][] neighbors = new Tile[3][3];\r\n        for (int i = tileX - 1; i < tileX + 2; i++) {\r\n            for (int j = tileY - 1; j < tileY + 2; j++) {\r\n                if (!(i < 0 || j < 0 || i >= level.getWidth() || j >= level.getHeight()) && level.getTileAt(layer, i, j) != null && !level.getTileAt(layer, i, j).ignoreTiling) {\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = level.getTileAt(layer, i, j);\r\n                } else {\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = null;\r\n                }\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    public int numNeighbors(Tile[][] tileMatrix) {\r\n        int count = 0;\r\n        for (Tile[] tiles : tileMatrix) {\r\n            for (Tile tile : tiles) {\r\n                if (tile != null) count++;\r\n            }\r\n        }\r\n        // Subtract one to remove itself\r\n        return count - 1;\r\n    }\r\n\r\n    public void checkTiling(Tile[][] neighbors, Tile tile) {\r\n        if (tile.ignoreTiling) return;\r\n        int tileType = 0;\r\n\r\n        int numNeighbors = numNeighbors(neighbors);\r\n        // No neighbors\r\n        if (numNeighbors == 0) {\r\n            tileType = 0;\r\n        // Max neighbors\r\n        } else if (numNeighbors == 8) {\r\n            tileType = 5;\r\n        } else {\r\n            // Seven connecting pieces\r\n            if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = rotateType(6, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = rotateType(6, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 2), new Point(0, 1), new Point(2, 2), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = 6;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 2), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = rotateType(6, 3);\r\n\r\n                // Six connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 2), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = 7;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 2), new Point(1, 2), new Point(2, 2))) {\r\n                tileType = rotateType(7, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0), new Point(2, 1), new Point(0, 2), new Point(0, 1), new Point(0, 0))) {\r\n                tileType = rotateType(7, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(2, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0))) {\r\n                tileType = rotateType(7, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = 8;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 0))) {\r\n                tileType = rotateType(8, 1);\r\n\r\n                // Five connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(2, 1), new Point(2, 0), new Point(1, 0)) && neighbors[0][1] == null) {\r\n                tileType = rotateType(4, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && neighbors[1][2] == null) {\r\n                tileType = rotateType(4, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0)) && neighbors[2][1] == null) {\r\n                tileType = 4;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 2), new Point(1, 2), new Point(2, 2), new Point(2, 1)) && neighbors[1][0] == null) {\r\n                tileType = rotateType(4, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 2))) {\r\n                tileType = rotateType(9, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = rotateType(9, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 0))) {\r\n                tileType = rotateType(9, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 2))) {\r\n                tileType = 9;\r\n\r\n                // Four connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = 10;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = rotateType(11, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = rotateType(11, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(1, 0))) {\r\n                tileType = 11;\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(2, 2), new Point(1, 2), new Point(0, 1))) {\r\n                tileType = rotateType(11, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = rotateType(12, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(2, 1), new Point(1, 0))) {\r\n                tileType = rotateType(12, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0))) {\r\n                tileType = 12;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(2, 1))) {\r\n                tileType = rotateType(12, 1);\r\n\r\n                // Three connecting pieces\r\n\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0))) {\r\n                tileType = 13;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = rotateType(13, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = rotateType(13, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(2, 1))) {\r\n                tileType = rotateType(13, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1))) {\r\n                tileType = 2;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(2, 1))) {\r\n                tileType = rotateType(2, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(2, 0), new Point(1, 0))) {\r\n                tileType = rotateType(2, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 0), new Point(1, 0))) {\r\n                tileType = rotateType(2, 3);\r\n\r\n                // Two connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0))) {\r\n                tileType = 3;\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(0, 1))) {\r\n                tileType = rotateType(3, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 2))) {\r\n                tileType = 14;\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(1, 2))) {\r\n                tileType = rotateType(14, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(1, 0))) {\r\n                tileType = rotateType(14, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0))) {\r\n                tileType = rotateType(14, 3);\r\n\r\n                // One connecting piece\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2))) {\r\n                tileType = 1;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1))) {\r\n                tileType = rotateType(1, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 0))) {\r\n                tileType = rotateType(1, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1))) {\r\n                tileType = rotateType(1, 1);\r\n            }\r\n        }\r\n\r\n        if (!tile.image.equals(\"delete\"))\r\n            tile.setTileType(tileType);\r\n    }\r\n\r\n    public int rotateType(int baseType, int rotations) {\r\n        return baseType + rotations * 15;\r\n    }\r\n\r\n    public boolean checkNeighbors(Tile[][] neighbors, Point... positions) {\r\n        for (Point relPos : positions) {\r\n            if (neighbors[relPos.x][relPos.y] == null) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void drawLine(Tile tile, int endX, int endY, int startX, int startY) {\r\n        Point resize = new Point();\r\n        for (Point point : getLinePoints(endX, endY, startX, startY)) {\r\n            Point tileResize = addTile(tile, point.x + resize.x, point.y + resize.y, true);\r\n            resize.x += tileResize.x;\r\n            resize.y += tileResize.y;\r\n        }\r\n        addTile(tile, endX + resize.x, endY + resize.y, true);\r\n    }\r\n\r\n    public void fill(Tile fillTile, int originX, int originY) {\r\n        // Don't let people fill out of bounds\r\n        if (!(originX >= 0 && originY >= 0 && originX < level.getWidth() && originY < level.getHeight())) return;\r\n        // Don't fill tiles of the same type\r\n        if (Tile.tilesEqual(fillTile, level.getTileAt(layer, originX, originY)) || fillTile.image.equals(\"delete\") && level.getTileAt(layer, originX, originY) == null) return;\r\n        fillTiles.clear();\r\n\r\n        List<Point> open = new ArrayList<>();\r\n        Set<Point> closed = new HashSet<>();\r\n\r\n        Point origin = new Point(originX, originY);\r\n        Tile tileToFill = level.getTileAt(layer, originX, originY);\r\n        open.add(origin);\r\n        closed.add(origin);\r\n\r\n        int tilesFilled = 0;\r\n        while (open.size() > 0) {\r\n            Point current = open.get(0);\r\n            open.remove(0);\r\n\r\n            fillTiles.add(current);\r\n            tilesFilled++;\r\n\r\n            int x = current.x;\r\n            int y = current.y;\r\n\r\n            if (x + 1 < level.getWidth() && !Tile.tilesEqual(level.getTileAt(layer, x + 1, y), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x + 1, y), tileToFill)\r\n                    && !closed.contains(new Point(x + 1, y)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x + 1, y))) {\r\n                open.add(new Point(x + 1, y));\r\n                closed.add(new Point(x + 1, y));\r\n            }\r\n            if (x - 1 >= 0 && !Tile.tilesEqual(level.getTileAt(layer, x - 1, y), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x - 1, y), tileToFill)\r\n                    && !closed.contains(new Point(x - 1, y)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x - 1, y))) {\r\n                open.add(new Point(x - 1, y));\r\n                closed.add(new Point(x - 1, y));\r\n            }\r\n            if (y + 1 < level.getHeight() && !Tile.tilesEqual(level.getTileAt(layer, x, y + 1), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x, y + 1), tileToFill)\r\n                    && !closed.contains(new Point(x, y + 1)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x, y + 1))) {\r\n                open.add(new Point(x, y + 1));\r\n                closed.add(new Point(x, y + 1));\r\n            }\r\n            if (y - 1 >= 0 && !Tile.tilesEqual(level.getTileAt(layer, x, y - 1), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x, y - 1), tileToFill)\r\n                    && !closed.contains(new Point(x, y - 1)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x, y - 1))) {\r\n                open.add(new Point(x, y - 1));\r\n                closed.add(new Point(x, y - 1));\r\n            }\r\n        }\r\n\r\n        // Add a \"fill\" action to the undo queue\r\n        if (tileToFill == null) {\r\n            // Save undo actions of null instead as tiles with the tag \"delete\"\r\n            tileToFill = new Tile(\"delete\");\r\n        }\r\n//        fillTile = fillTile.copy();\r\n\r\n        // Add/delete all tiles\r\n        for (Point point : fillTiles) {\r\n            addTile(fillTile, point.x, point.y, false);\r\n        }\r\n\r\n        addUndoAction(new UndoFill(fillTile.copy(), tileToFill.copy(), Set.copyOf(fillTiles)));\r\n\r\n        // Empty the list for good measure\r\n        fillTiles.clear();\r\n    }\r\n\r\n    public Rectangle selectionAsWorldCoords() {\r\n        Rectangle selection = selectionNormalized();\r\n        return new Rectangle(selection.x * 64, selection.y * 64, selection.width * 64, selection.height * 64);\r\n    }\r\n\r\n    public Rectangle selectionNormalized() {\r\n        Rectangle selection = new Rectangle(this.selection);\r\n\r\n        if (selection.width <= 0) {\r\n            selection.x += selection.width - 1;\r\n            selection.width = Math.abs(selection.width) + 2;\r\n        }\r\n\r\n        if (selection.height <= 0) {\r\n            selection.y += selection.height - 1;\r\n            selection.height = Math.abs(selection.height) + 2;\r\n        }\r\n\r\n        return selection;\r\n    }\r\n\r\n    public void renderSelection(Graphics g) {\r\n        if (tileSelection != null) {\r\n            tileSelection.render(g);\r\n        }\r\n\r\n        Texture selectionImage = Images.getImage(!Settings.localSettings.selectionContrast.value ? \"ui/selection.png\" : \"ui/selection_high_con.png\");\r\n\r\n        if (selection != null) {\r\n            Rectangle selection = selectionNormalized();\r\n            Rectangle rect = selectionAsWorldCoords();\r\n            int frameY = LittleH.getTick() / 12 % 4 * 8;\r\n            com.badlogic.gdx.math.Rectangle frame = new com.badlogic.gdx.math.Rectangle(0, frameY, 8, 8);\r\n            for (int i = 0; i < selection.width; i++) {\r\n                g.drawImage(selectionImage, rect.x + 64 * i, rect.y, 64, 64,\r\n                        frame, 180);\r\n                g.drawImage(selectionImage, rect.x + 64 * i, rect.y + rect.height - 64, 64, 64,\r\n                        frame);\r\n            }\r\n            for (int i = 0; i < selection.height; i++) {\r\n                g.drawImage(selectionImage, rect.x, rect.y + i * 64, 64, 64,\r\n                        frame, 90);\r\n                g.drawImage(selectionImage, rect.x + rect.width - 64, rect.y + i * 64, 64, 64,\r\n                        frame, 270);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void deleteSelection() {\r\n        if (selection != null && !selectionAlive) {\r\n            UndoSelection undoSelection = new UndoSelection();\r\n            for (int i = 0; i < selection.width; i++) {\r\n                for (int j = 0; j < selection.height; j++) {\r\n                    Tile tileAt = level.getTileAt(layer, selection.x + i, selection.y + j);\r\n                    if (tileAt != null) {\r\n                        undoSelection.add(tileAt.copy(), new Tile(\"delete\"));\r\n                        addTile(new Tile(\"delete\"), selection.x + i, selection.y + j, false);\r\n                    }\r\n                }\r\n            }\r\n            addUndoAction(undoSelection);\r\n            setSaved(false);\r\n        }\r\n    }\r\n\r\n    public void undo() {\r\n        if (undoIndex < undoQueue.size()) {\r\n            undoQueue.get(undoIndex).undo(this);\r\n            undoIndex++;\r\n        }\r\n    }\r\n\r\n    public void redo() {\r\n        if (undoIndex > 0) {\r\n            undoIndex--;\r\n            undoQueue.get(undoIndex).redo(this);\r\n        }\r\n    }\r\n\r\n    public void trimUndoQueue() {\r\n        for (int i = undoIndex - 1; i >= 0; i--) {\r\n            undoQueue.remove(i);\r\n        }\r\n        undoIndex = 0;\r\n    }\r\n\r\n    public void addUndoAction(UndoAction action) {\r\n        trimUndoQueue();\r\n        undoQueue.add(0, action);\r\n    }\r\n\r\n    public void pasteSelection() {\r\n        if (tileSelection != null) {\r\n            tileSelection.paste(this);\r\n        }\r\n        setSaved(false);\r\n    }\r\n\r\n    public void copySelection() {\r\n        tileSelection = new TileSelection(selection, level, layer);\r\n    }\r\n\r\n    public boolean hasSelection() {\r\n        return selection != null;\r\n    }\r\n\r\n    public Level getLevel() {\r\n        return level;\r\n    }\r\n\r\n    public boolean hasTileSelection() {\r\n        return tileSelection != null;\r\n    }\r\n\r\n    public Tile getTileAt(int x, int y) {\r\n        return level.getTileAt(layer, x, y);\r\n    }\r\n\r\n    public List<Point> getLinePoints(int endX, int endY, int startX, int startY) {\r\n        List<Point> points = new ArrayList<>();\r\n        int dX = endX - startX;\r\n        int dY = endY - startY;\r\n\r\n        dX *= 64;\r\n        dY *= 64;\r\n\r\n        float dLen = (float) Math.sqrt(dX * dX + dY * dY);\r\n        float sclX = ((float) dX / dLen);\r\n        float sclY = ((float) dY / dLen);\r\n        System.out.println(sclX + \", \" + sclY);\r\n\r\n        int[] delta = new int[]{ dX, dY };\r\n        int[] point = new int[]{ startX * 64 + 32, startY * 64 + 32 };\r\n        Vector2 spillover = new Vector2();\r\n\r\n        int len = 0;\r\n        while (true) {\r\n            Vector2 vec = new Vector2(sclX * 64, sclY * 64);\r\n            Point step = new Point((int) (sclX * 64 + spillover.x), (int) (sclY * 64 + spillover.y));\r\n            vec.x -= step.x;\r\n            vec.y -= step.y;\r\n            spillover.add(vec);\r\n\r\n            Point linePoint = new Point((point[0]) / 64, (point[1]) / 64);\r\n            points.add(linePoint);\r\n            if (linePoint.x == endX && linePoint.y == endY || Math.abs(delta[0]) < 64 && Math.abs(delta[1]) < 64)\r\n                break;\r\n\r\n            point[0] += step.x;\r\n            point[1] += step.y;\r\n            delta[0] -= step.x;\r\n            delta[1] -= step.y;\r\n            len++;\r\n            if (len > 512)\r\n                break;\r\n        }\r\n        return points;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/level/LevelEditor.java b/core/src/com/sab/littleh/game/level/LevelEditor.java
--- a/core/src/com/sab/littleh/game/level/LevelEditor.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/level/LevelEditor.java	(date 1708571415450)
@@ -89,12 +89,12 @@
             level.mapLayers.get(layer).tileMap.get(tile.x).set(tile.y, tile);
         }
 
-        Tile[][] neighbors = getNeighbors(tile.x, tile.y);
+        Tile[][] neighbors = getNeighbors(null, tile.x, tile.y);
 
         for (Tile[] tiles : neighbors)
             for (Tile neighborTile : tiles)
                 if (neighborTile != null)
-                    checkTiling(getNeighbors(neighborTile.x, neighborTile.y), neighborTile);
+                    checkTiling(getNeighbors(neighborTile, neighborTile.x, neighborTile.y), neighborTile);
         setSaved(false);
 
         return amountNegativeResize;
@@ -268,13 +268,18 @@
         return movingSelection;
     }
 
-    public Tile[][] getNeighbors(int tileX, int tileY) {
+    public Tile[][] getNeighbors(Tile tile, int tileX, int tileY) {
         // Magic
         Tile[][] neighbors = new Tile[3][3];
         for (int i = tileX - 1; i < tileX + 2; i++) {
             for (int j = tileY - 1; j < tileY + 2; j++) {
-                if (!(i < 0 || j < 0 || i >= level.getWidth() || j >= level.getHeight()) && level.getTileAt(layer, i, j) != null && !level.getTileAt(layer, i, j).ignoreTiling) {
-                    neighbors[tileX - i + 1][tileY - j + 1] = level.getTileAt(layer, i, j);
+                Tile otherTile = level.getTileAt(layer, i, j);
+                if (otherTile != null && !otherTile.ignoreTiling) {
+                    if (tile != null && !tile.image.equals("delete") && tile.hasTag("exclusive_tiling") && !otherTile.image.equals(tile.image)) {
+                        neighbors[tileX - i + 1][tileY - j + 1] = null;
+                        continue;
+                    }
+                    neighbors[tileX - i + 1][tileY - j + 1] = otherTile;
                 } else {
                     neighbors[tileX - i + 1][tileY - j + 1] = null;
                 }
@@ -633,7 +638,6 @@
         float dLen = (float) Math.sqrt(dX * dX + dY * dY);
         float sclX = ((float) dX / dLen);
         float sclY = ((float) dY / dLen);
-        System.out.println(sclX + ", " + sclY);
 
         int[] delta = new int[]{ dX, dY };
         int[] point = new int[]{ startX * 64 + 32, startY * 64 + 32 };
Index: core/src/com/sab/littleh/settings/Settings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.settings;\r\n\r\nimport com.badlogic.gdx.math.RandomXS128;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.util.Images;\r\nimport com.sab.littleh.util.SoundEngine;\r\nimport com.sab.littleh.util.sab_format.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class Settings {\r\n    public static final Settings localSettings = new Settings();\r\n    \r\n    // Gameplay\r\n    public final BoolSetting debugMode = new BoolSetting(\"debug_mode\", \"Developer Mode\", false);\r\n    public final BoolSetting backgroundVisibility = new BoolSetting(\"background_visibility\", \"Default Background Visibility\", true);\r\n    public final BoolSetting dividedTileSelection = new BoolSetting(\"divided_tile_selection\", \"Divide Tile Selector\", false);\r\n    public final StringSetting authorName = new StringSetting(\"author_name\", \"Change Author Name\", getRandomName());\r\n\r\n    // Video\r\n    public final ListSetting fullscreen = new ListSetting(\"fullscreen\", \"Default Display Mode\", 1, new String[] {\r\n            \"windowed\",\r\n            \"windowed_fullscreen\",\r\n            \"fullscreen\"\r\n    }, new String[] {\r\n            \"Windowed\",\r\n            \"Windowed Fullscreen\",\r\n            \"Fullscreen\"\r\n    });\r\n    public final BoolSetting screenShake = new BoolSetting(\"screen_shake\", \"Screen Shake\", true);\r\n    public final BoolSetting rainbowTitle = new BoolSetting(\"rainbow_title\", \"Rainbow Title\", false);\r\n    public final BoolSetting grid = new BoolSetting(\"grid_enabled\", \"Grid Enabled\", true);\r\n    public final BoolSetting useShaders = new BoolSetting(\"use_shaders\", \"Use Shaders\", true);\r\n    public final BoolSetting selectionContrast = new BoolSetting(\"high_contrast_selection\", \"High Contrast Selection\", false);\r\n    public final PercentageSetting zoomScalar = new PercentageSetting(\"zoom_scalar\", \"In-Game Zoom Multiplier\", 100, 50, 200);\r\n    public final FontSetting font = new FontSetting(\"font\", \"Default Font\", 0, new String[] {\r\n            \"minecraft\",\r\n            \"sab_font\",\r\n            \"shitfont23\",\r\n            \"arial\",\r\n            \"comic_snas\"\r\n    }, new String[] {\r\n            \"Minecraft\",\r\n            \"SAB Font\",\r\n            \"shitfont23\",\r\n            \"Arial\",\r\n            \"Comic Sans\"\r\n    }, new float[] {\r\n            0.24f,\r\n            0.2f,\r\n            0.2f,\r\n            0.36f,\r\n            0.3f\r\n    });\r\n\r\n    // Audio\r\n    public final BoolSetting muteGame = new BoolSetting(\"mute_game\", \"Mute Game\", false) {\r\n        @Override\r\n        public void next() {\r\n            super.next();\r\n            SoundEngine.resetCurrentMusicVolume();\r\n        }\r\n    };\r\n    public final PercentageSetting masterVolume = new PercentageSetting(\"master_volume\", \"Master Volume\", 50);\r\n    public final PercentageSetting musicVolume = new PercentageSetting(\"music_volume\", \"Music Volume\", 100);\r\n    public final PercentageSetting sfxVolume = new PercentageSetting(\"sfx_volume\", \"SFX Volume\", 100);\r\n\r\n    // Misc\r\n    public final StringSetting buildingSong = new StringSetting(\"building_song\", \"Building Song\", \"menu/building_song.ogg\");\r\n    public final PercentageSetting hColor = new PercentageSetting(\"h_color\", \"Player Color\", 0, -1, 360, \" hue\");\r\n    public final PercentageSetting dialogueSpeed = new PercentageSetting(\"dialogue_speed\", \"Dialogue Speed\", 100, 50, 200);\r\n    public final BoolSetting controllerVibration = new BoolSetting(\"vibration\", \"Controller Vibration\", true);\r\n    public final BoolSetting autoDialogue = new BoolSetting(\"auto_dialogue\", \"Auto Dialogue\", false);\r\n    public final BoolSetting retroMode = new BoolSetting(\"retro_mode\", \"Retro Mode (Requires shaders)\", false);\r\n    public final BoolSetting upEqualsJump = new BoolSetting(\"up_equals_jump\", \"Up Equals Jump\", true);\r\n\r\n    public final Setting<?>[] settings = new Setting[] {\r\n            // Gameplay\r\n            debugMode, backgroundVisibility, authorName, rainbowTitle, dividedTileSelection, upEqualsJump,\r\n            // Video\r\n            fullscreen, grid, screenShake, zoomScalar, font, selectionContrast, useShaders, retroMode,\r\n            // Audio\r\n            muteGame, masterVolume, musicVolume, sfxVolume,\r\n            // Misc\r\n            buildingSong, hColor, controllerVibration, autoDialogue\r\n    };\r\n\r\n    public static String getRandomName() {\r\n        Random random = new RandomXS128();\r\n        String[] prefixes = new String[]{ \"The Big\", \"The Little\", \"The Medium\", \"The Colossal\", \"The Microscopic\", \"The Minuscule\" };\r\n        String[] bases = new String[]{ \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\r\n        String[] suffixes = new String[]{ \"Fan\", \"Enjoyer\", \"Appreciator\", \"Stan\", \"Hater\", \"Critic\", \"Scorner\", \"Murderer\", \"Elater\", \"Skeptic\", \"Actualizer\" };\r\n        return prefixes[random.nextInt(prefixes.length)] + \" \" + bases[random.nextInt(bases.length)] + \" \" + suffixes[random.nextInt(suffixes.length)];\r\n    }\r\n\r\n    public void resetAll() {\r\n        for (Setting<?> setting : settings) {\r\n            setting.reset();\r\n        }\r\n    }\r\n\r\n    public void save() {\r\n        try {\r\n            SabWriter.write(LittleH.getFileResource(\"settings.sab\"), toSabData());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void loadSettings() {\r\n        localSettings.load();\r\n    }\r\n\r\n    private void load() {\r\n        File resourcesFolder = new File(\"resources\");\r\n        if (!resourcesFolder.exists())\r\n            resourcesFolder.mkdir();\r\n        File settingsFile = LittleH.getFileResource(\"settings.sab\");\r\n        if (!settingsFile.exists()) {\r\n            try {\r\n                settingsFile.createNewFile();\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(\"Program does not have sufficient permissions to create settings file.\");\r\n            }\r\n        }\r\n        try {\r\n            SabData data = SabReader.read(settingsFile);\r\n\r\n            List<Setting<?>> unloaded = setFrom(data);\r\n            for (Setting<?> setting : unloaded) {\r\n                data.insertValue(setting.id, new SabValue(setting.asRawValue()));\r\n            }\r\n\r\n            if (unloaded.size() > 0) {\r\n                save();\r\n            }\r\n        } catch (SabParsingException e) {\r\n            e.printStackTrace();\r\n            resetAll();\r\n            save();\r\n        }\r\n    }\r\n\r\n    private SabData toSabData() {\r\n        SabData data = new SabData();\r\n        for (Setting<?> setting : settings) {\r\n            data.insertValue(setting.id, new SabValue(setting.asRawValue()));\r\n        }\r\n        return data;\r\n    }\r\n\r\n    private List<Setting<?>> setFrom(SabData data) {\r\n        List<Setting<?>> unloaded = new ArrayList<>();\r\n\r\n        for (Setting<?> setting : settings) {\r\n            if (data.hasValue(setting.id) && setting.isValid(data.getValue(setting.id).getRawValue())) {\r\n                setting.set(data.getValue(setting.id).getRawValue());\r\n            } else {\r\n                unloaded.add(setting);\r\n            }\r\n        }\r\n\r\n        return unloaded;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/settings/Settings.java b/core/src/com/sab/littleh/settings/Settings.java
--- a/core/src/com/sab/littleh/settings/Settings.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/settings/Settings.java	(date 1708571415455)
@@ -91,10 +91,11 @@
 
     public static String getRandomName() {
         Random random = new RandomXS128();
-        String[] prefixes = new String[]{ "The Big", "The Little", "The Medium", "The Colossal", "The Microscopic", "The Minuscule" };
+        String[] prefixes = new String[]{ "Big", "Little", "Medium", "Colossal", "Microscopic", "Minuscule", "Infinitesimal", "Voluminous", "Plump", "Scrawny", "Expansive",
+                "Diminutive", "Cavernous", "Tiny", "Wee", "Giant", "Mammoth", "Kilometerous", "Gargantuan", "Puny", "Monumental" };
         String[] bases = new String[]{ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
-        String[] suffixes = new String[]{ "Fan", "Enjoyer", "Appreciator", "Stan", "Hater", "Critic", "Scorner", "Murderer", "Elater", "Skeptic", "Actualizer" };
-        return prefixes[random.nextInt(prefixes.length)] + " " + bases[random.nextInt(bases.length)] + " " + suffixes[random.nextInt(suffixes.length)];
+        String[] suffixes = new String[]{ "Fan", "Enjoyer", "Appreciator", "Stan", "Hater", "Critic", "Scorner", "Murderer", "Elater", "Skeptic", "Actualizer", "Dictator", "Mortician" };
+        return "The " + prefixes[random.nextInt(prefixes.length)] + " " + bases[random.nextInt(bases.length)] + " " + suffixes[random.nextInt(suffixes.length)];
     }
 
     public void resetAll() {
Index: assets/maps/hyperspace/pinball.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@is_deluxe true\r\n@crouching false\r\n@look_around true\r\n@time_limit -1\r\n@background hyperspace\r\n@author AshQuimby\r\n@name Walouis Pinball\r\n@double_jumping false\r\n@version 0.1.5\r\n@wall_sliding false\r\n39 30 tiles/sets/location_bricks 43 \r\n39 40 tiles/sets/location_bricks 43 \r\n38 9 tiles/sets/location_bricks 36 \r\n37 20 tiles/sets/location_bricks 13 \r\n39 59 tiles/sets/location_bricks 3 \r\n14 70 tiles/sets/location_bricks 18 \r\n38 44 tiles/sets/bounce 18 \r\n41 25 tiles/sets/location_bricks 3 \r\n40 25 tiles/color_cube 4 \r\n41 23 tiles/sets/location_bricks 3 \r\n24 70 tiles/sets/location_bricks 18 \r\n23 70 tiles/sets/location_bricks 18 \r\n39 15 tiles/sets/location_bricks 3 \r\n41 45 tiles/sets/location_bricks 3 \r\n41 47 tiles/sets/location_bricks 3 \r\n21 70 tiles/sets/location_bricks 18 \r\n41 19 tiles/sets/location_bricks 3 \r\n41 44 tiles/sets/location_bricks 3 \r\n38 62 tiles/sets/bounce 18 \r\n39 33 tiles/sets/location_bricks 3 \r\n41 46 tiles/sets/location_bricks 3 \r\n38 20 tiles/sets/bounce 18 \r\n22 68 tiles/sets/location_bricks 18 \r\n39 24 tiles/sets/location_bricks 43 \r\n35 16 tiles/sets/location_bricks 19 \r\n31 70 tiles/sets/location_bricks 18 \r\n39 58 tiles/sets/location_bricks 43 \r\n39 18 tiles/sets/location_bricks 43 \r\n10 10 tiles/sets/location_bricks 19 \r\n38 54 tiles/sets/bounce 18 \r\n29 68 tiles/sets/location_bricks 18 \r\n19 70 tiles/sets/location_bricks 18 \r\n41 63 tiles/sets/location_bricks 3 \r\n40 57 tiles/color_cube 6 \r\n41 34 tiles/sets/location_bricks 3 \r\n40 8 tiles/sets/location_bricks 32 \r\n10 16 tiles/sets/location_bricks 19 \r\n42 10 tiles/sets/location_bricks 6 \r\n39 39 tiles/sets/location_bricks 3 \r\n41 22 tiles/sets/location_bricks 3 \r\n41 33 tiles/sets/location_bricks 3 \r\n41 64 tiles/sets/location_bricks 3 \r\n28 69 tiles/color_cube 5 \r\n41 24 tiles/sets/location_bricks 3 \r\n39 63 tiles/sets/location_bricks 3 \r\n40 47 tiles/color_cube 3 \r\n31 69 tiles/color_cube 4 \r\n41 54 tiles/sets/location_bricks 3 \r\n37 38 tiles/sets/location_bricks 13 \r\n10 15 tiles/sets/location_bricks 49 \r\n40 49 tiles/color_cube 3 \r\n26 70 tiles/sets/location_bricks 18 \r\n32 69 tiles/color_cube 4 \r\n33 44 tiles/coin 0 \r\n23 69 tiles/color_cube 7 \r\n41 49 tiles/sets/location_bricks 3 \r\n39 53 tiles/sets/location_bricks 3 \r\n37 55 tiles/sets/location_bricks 3 \r\n16 69 tiles/color_cube 0 \r\n40 22 tiles/color_cube 3 \r\n16 68 tiles/sets/location_bricks 18 \r\n41 65 tiles/sets/location_bricks 3 \r\n24 69 tiles/color_cube 6 \r\n36 35 tiles/coin 0 \r\n40 33 tiles/color_cube 7 \r\n37 24 tiles/sets/location_bricks 39 \r\n35 10 tiles/sets/location_bricks 19 \r\n36 9 tiles/sets/location_bricks 49 \r\n18 52 tiles/sets/location_bricks 17 \r\n41 20 tiles/sets/location_bricks 3 \r\n37 48 tiles/sets/location_bricks 13 \r\n33 42 tiles/sets/location_bricks 32 \r\n41 62 tiles/sets/location_bricks 3 \r\n38 22 tiles/sets/bounce 18 \r\n44 10 tiles/sets/location_bricks 17 \r\n41 67 tiles/sets/location_bricks 3 \r\n25 69 tiles/color_cube 6 \r\n40 68 tiles/color_cube 1 \r\n40 28 tiles/color_cube 5 \r\n40 26 tiles/color_cube 5 \r\n39 46 tiles/sets/location_bricks 43 \r\n40 66 tiles/color_cube 0 \r\n41 60 tiles/sets/location_bricks 3 \r\n38 32 tiles/sets/bounce 18 \r\n40 34 tiles/color_cube 7 \r\n38 64 tiles/sets/bounce 18 \r\n37 33 tiles/sets/location_bricks 3 \r\n37 34 tiles/sets/location_bricks 13 \r\n39 16 tiles/sets/location_bricks 43 \r\n41 41 tiles/sets/location_bricks 3 \r\n39 26 tiles/sets/location_bricks 43 \r\n37 18 tiles/sets/location_bricks 13 \r\n40 15 tiles/color_cube 1 \r\n39 8 tiles/sets/location_bricks 49 \r\n37 30 tiles/sets/location_bricks 13 \r\n39 57 tiles/sets/location_bricks 3 \r\n37 39 tiles/sets/location_bricks 3 \r\n38 60 tiles/sets/bounce 18 \r\n40 39 tiles/color_cube 0 \r\n39 51 tiles/sets/location_bricks 3 \r\n38 48 tiles/sets/bounce 18 \r\n40 30 tiles/color_cube 6 \r\n20 70 tiles/sets/location_bricks 18 \r\n41 31 tiles/sets/location_bricks 3 \r\n40 40 tiles/color_cube 0 \r\n39 32 tiles/sets/location_bricks 43 \r\n37 61 tiles/sets/location_bricks 3 \r\n37 67 tiles/one_way 1 \r\n40 59 tiles/color_cube 7 \r\n27 69 tiles/color_cube 5 \r\n39 36 tiles/sets/location_bricks 43 \r\n39 35 tiles/sets/location_bricks 3 \r\n37 47 tiles/sets/location_bricks 3 \r\n34 52 tiles/coin 0 \r\n40 58 tiles/color_cube 6 \r\n38 26 tiles/sets/bounce 18 \r\n40 44 tiles/color_cube 2 \r\n41 68 tiles/sets/location_bricks 12 \r\n39 47 tiles/sets/location_bricks 3 \r\n40 54 tiles/color_cube 5 \r\n36 16 tiles/sets/location_bricks 51 \r\n39 23 tiles/sets/location_bricks 3 \r\n40 19 tiles/color_cube 2 \r\n39 70 tiles/sets/location_bricks 49 \r\n38 42 tiles/sets/bounce 18 \r\n40 48 tiles/color_cube 3 \r\n38 52 tiles/sets/bounce 18 \r\n40 50 tiles/color_cube 4 \r\n41 39 tiles/sets/location_bricks 3 \r\n40 24 tiles/color_cube 4 \r\n41 43 tiles/sets/location_bricks 3 \r\n33 43 tiles/sets/location_bricks 17 \r\n37 53 tiles/sets/location_bricks 3 \r\n38 15 tiles/power_fruit 1 \r\n39 22 tiles/sets/location_bricks 43 \r\n37 63 tiles/sets/location_bricks 3 \r\n22 70 tiles/sets/location_bricks 18 \r\n41 17 tiles/sets/location_bricks 3 \r\n28 70 tiles/sets/location_bricks 18 \r\n44 9 tiles/sets/location_bricks 32 \r\n39 61 tiles/sets/location_bricks 3 \r\n39 34 tiles/sets/location_bricks 43 \r\n41 51 tiles/sets/location_bricks 3 \r\n41 36 tiles/sets/location_bricks 3 \r\n37 17 tiles/sets/location_bricks 42 \r\n17 68 tiles/sets/location_bricks 18 \r\n38 36 tiles/sets/bounce 18 \r\n37 40 tiles/sets/location_bricks 13 \r\n30 70 tiles/sets/location_bricks 18 \r\n38 50 tiles/sets/bounce 18 \r\n36 52 tiles/coin 0 \r\n19 68 tiles/sets/location_bricks 18 \r\n39 19 tiles/sets/location_bricks 3 \r\n11 70 tiles/sets/location_bricks 18 \r\n20 68 tiles/sets/location_bricks 18 \r\n41 18 tiles/sets/location_bricks 3 \r\n18 51 tiles/sets/location_bricks 32 \r\n29 70 tiles/sets/location_bricks 18 \r\n39 54 tiles/sets/location_bricks 43 \r\n41 55 tiles/sets/location_bricks 3 \r\n37 50 tiles/sets/location_bricks 39 \r\n37 70 tiles/sets/location_bricks 18 \r\n41 37 tiles/sets/location_bricks 3 \r\n40 56 tiles/color_cube 6 \r\n41 40 tiles/sets/location_bricks 3 \r\n40 17 tiles/color_cube 2 \r\n40 12 tiles/color_cube 0 \r\n32 42 tiles/sets/location_bricks 47 \r\n37 45 tiles/sets/location_bricks 3 \r\n39 42 tiles/sets/location_bricks 43 \r\n34 68 tiles/sets/location_bricks 18 \r\n39 21 tiles/sets/location_bricks 3 \r\n41 50 tiles/sets/location_bricks 3 \r\n40 65 tiles/color_cube 0 \r\n40 21 tiles/color_cube 3 \r\n41 30 tiles/sets/location_bricks 3 \r\n41 11 tiles/sets/location_bricks 11 \r\n10 9 tiles/sets/location_bricks 49 \r\n40 60 tiles/color_cube 7 \r\n41 15 tiles/sets/location_bricks 3 \r\n37 26 tiles/sets/location_bricks 24 \r\n40 31 tiles/color_cube 6 \r\n40 70 tiles/sets/location_bricks 57 \r\n41 42 tiles/sets/location_bricks 3 \r\n17 52 tiles/sets/location_bricks 2 \r\n27 70 tiles/sets/location_bricks 18 \r\n39 69 tiles/color_cube 1 \r\n40 61 tiles/color_cube 7 \r\n25 70 tiles/sets/location_bricks 18 \r\n37 68 tiles/sets/location_bricks 18 \r\n39 62 tiles/sets/location_bricks 43 \r\n25 68 tiles/sets/location_bricks 18 \r\n32 70 tiles/sets/location_bricks 18 \r\n40 11 tiles/color_cube 0 \r\n39 17 tiles/sets/location_bricks 3 \r\n42 9 tiles/sets/location_bricks 49 \r\n39 29 tiles/sets/location_bricks 3 \r\n40 18 tiles/color_cube 2 \r\n39 25 tiles/sets/location_bricks 3 \r\n37 15 tiles/sets/location_bricks 32 \r\n37 46 tiles/sets/location_bricks 13 \r\n35 52 tiles/coin 0 \r\n40 69 tiles/color_cube 1 \r\n38 24 tiles/sets/bounce 18 \r\n20 69 tiles/color_cube 8 \r\n41 27 tiles/sets/location_bricks 3 \r\n12 70 tiles/sets/location_bricks 18 \r\n41 52 tiles/sets/location_bricks 3 \r\n15 69 tiles/color_cube 0 \r\n37 57 tiles/sets/location_bricks 3 \r\n37 29 tiles/sets/location_bricks 3 \r\n39 45 tiles/sets/location_bricks 3 \r\n37 52 tiles/sets/location_bricks 13 \r\n38 40 tiles/sets/bounce 18 \r\n39 43 tiles/sets/location_bricks 3 \r\n37 69 tiles/color_cube 2 \r\n38 68 tiles/sets/location_bricks 18 \r\n40 52 tiles/color_cube 4 \r\n11 69 tiles/color_cube 2 \r\n29 69 tiles/color_cube 5 \r\n41 12 tiles/sets/location_bricks 3 \r\n37 10 tiles/sets/location_bricks 19 \r\n38 58 tiles/sets/bounce 18 \r\n42 11 tiles/sets/location_bricks 17 \r\n41 28 tiles/sets/location_bricks 3 \r\n43 10 tiles/sets/location_bricks 19 \r\n41 56 tiles/sets/location_bricks 3 \r\n37 23 tiles/sets/location_bricks 3 \r\n34 70 tiles/sets/location_bricks 18 \r\n41 9 tiles/sets/location_bricks 49 \r\n26 68 tiles/sets/location_bricks 18 \r\n39 52 tiles/sets/location_bricks 43 \r\n39 20 tiles/sets/location_bricks 43 \r\n37 41 tiles/sets/location_bricks 3 \r\n36 70 tiles/sets/location_bricks 18 \r\n40 29 tiles/color_cube 6 \r\n12 69 tiles/color_cube 1 \r\n40 35 tiles/color_cube 8 \r\n39 27 tiles/sets/location_bricks 3 \r\n41 32 tiles/sets/location_bricks 3 \r\n10 70 tiles/sets/location_bricks 18 \r\n40 63 tiles/color_cube 8 \r\n38 30 tiles/sets/bounce 18 \r\n37 44 tiles/sets/location_bricks 13 \r\n40 37 tiles/color_cube 8 \r\n37 35 tiles/sets/location_bricks 3 \r\n41 61 tiles/sets/location_bricks 3 \r\n18 68 tiles/sets/location_bricks 18 \r\n37 9 tiles/sets/location_bricks 49 \r\n33 69 tiles/color_cube 3 \r\n37 19 tiles/sets/location_bricks 3 \r\n35 15 tiles/sets/location_bricks 49 \r\n26 69 tiles/color_cube 6 \r\n38 56 tiles/sets/bounce 18 \r\n18 54 tiles/coin 0 \r\n40 9 tiles/sets/location_bricks 21 \r\n37 36 tiles/sets/location_bricks 13 \r\n40 41 tiles/color_cube 1 \r\n30 68 tiles/sets/location_bricks 18 \r\n37 14 tiles/one_way 3 \r\n35 51 tiles/sets/location_bricks 18 \r\n41 69 tiles/sets/location_bricks 4 \r\n15 68 tiles/sets/location_bricks 18 \r\n12 68 tiles/sets/location_bricks 18 \r\n11 68 tiles/sets/location_bricks 18 \r\n39 38 tiles/sets/location_bricks 43 \r\n40 16 tiles/color_cube 1 \r\n32 43 tiles/sets/location_bricks 2 \r\n39 65 tiles/sets/location_bricks 3 \r\n37 37 tiles/sets/location_bricks 3 \r\n38 34 tiles/sets/bounce 18 \r\n40 36 tiles/color_cube 8 \r\n36 15 tiles/sets/location_bricks 49 \r\n37 16 tiles/sets/location_bricks 7 \r\n19 69 tiles/color_cube 8 \r\n36 36 tiles/coin 0 \r\n18 70 tiles/sets/location_bricks 18 \r\n40 67 tiles/color_cube 0 \r\n40 27 tiles/color_cube 5 \r\n37 58 tiles/sets/location_bricks 13 \r\n41 57 tiles/sets/location_bricks 3 \r\n38 28 tiles/sets/bounce 18 \r\n40 45 tiles/color_cube 2 \r\n40 55 tiles/color_cube 5 \r\n39 31 tiles/sets/location_bricks 3 \r\n40 46 tiles/color_cube 2 \r\n41 53 tiles/sets/location_bricks 3 \r\n32 44 tiles/coin 0 \r\n24 68 tiles/sets/location_bricks 18 \r\n40 43 tiles/color_cube 1 \r\n38 10 tiles/sets/location_bricks 19 \r\n37 56 tiles/sets/location_bricks 13 \r\n41 59 tiles/sets/location_bricks 3 \r\n40 14 tiles/color_cube 1 \r\n30 69 tiles/color_cube 4 \r\n14 68 tiles/sets/location_bricks 18 \r\n36 10 tiles/sets/location_bricks 19 \r\n33 68 tiles/sets/location_bricks 18 \r\n41 35 tiles/sets/location_bricks 3 \r\n37 22 tiles/sets/location_bricks 13 \r\n37 59 tiles/sets/location_bricks 3 \r\n36 38 tiles/coin 0 \r\n21 69 tiles/color_cube 7 \r\n36 51 tiles/sets/location_bricks 27 \r\n37 25 tiles/sets/location_bricks 34 \r\n40 38 tiles/color_cube 0 \r\n43 9 tiles/sets/location_bricks 49 \r\n40 13 tiles/color_cube 0 \r\n39 12 tiles/sets/location_bricks 3 \r\n41 58 tiles/sets/location_bricks 3 \r\n34 51 tiles/sets/location_bricks 46 \r\n13 69 tiles/color_cube 1 \r\n10 68 tiles/sets/location_bricks 18 \r\n27 68 tiles/sets/location_bricks 18 \r\n40 51 tiles/color_cube 4 \r\n41 48 tiles/sets/location_bricks 3 \r\n40 64 tiles/color_cube 8 \r\n39 37 tiles/sets/location_bricks 3 \r\n16 70 tiles/sets/location_bricks 18 \r\n39 66 tiles/sets/location_bricks 43 \r\n17 70 tiles/sets/location_bricks 18 \r\n39 14 tiles/sets/location_bricks 3 \r\n37 28 tiles/sets/location_bricks 13 \r\n36 37 tiles/coin 0 \r\n39 10 tiles/sets/location_bricks 52 \r\n35 68 tiles/sets/location_bricks 18 \r\n14 69 tiles/color_cube 1 \r\n38 46 tiles/sets/bounce 18 \r\n35 69 tiles/color_cube 3 \r\n17 69 tiles/color_cube 0 \r\n31 68 tiles/sets/location_bricks 18 \r\n38 70 tiles/sets/location_bricks 56 \r\n13 70 tiles/sets/location_bricks 18 \r\n40 53 tiles/color_cube 5 \r\n37 49 tiles/sets/location_bricks 3 \r\n39 11 tiles/sets/location_bricks 3 \r\n40 20 tiles/color_cube 3 \r\n37 21 tiles/sets/location_bricks 3 \r\n37 51 tiles/sets/location_bricks 42 \r\n10 69 tiles/color_cube 2 \r\n35 9 tiles/sets/location_bricks 49 \r\n17 51 tiles/sets/location_bricks 47 \r\n33 70 tiles/sets/location_bricks 18 \r\n41 10 tiles/sets/location_bricks 51 \r\n40 62 tiles/color_cube 8 \r\n38 8 tiles/sets/location_bricks 47 \r\n39 56 tiles/sets/location_bricks 43 \r\n36 68 tiles/sets/location_bricks 18 \r\n40 32 tiles/color_cube 7 \r\n38 69 tiles/color_cube 2 \r\n34 69 tiles/color_cube 3 \r\n39 44 tiles/sets/location_bricks 43 \r\n36 50 tiles/sets/location_bricks 47 \r\n41 38 tiles/sets/location_bricks 3 \r\n18 69 tiles/color_cube 8 \r\n37 42 tiles/sets/location_bricks 13 \r\n38 66 tiles/sets/bounce 46 \r\n38 18 tiles/sets/bounce 18 \r\n37 65 tiles/sets/location_bricks 1 \r\n41 14 tiles/sets/location_bricks 3 \r\n41 21 tiles/sets/location_bricks 3 \r\n37 32 tiles/sets/location_bricks 13 \r\n41 66 tiles/sets/location_bricks 3 \r\n22 69 tiles/color_cube 7 \r\n37 43 tiles/sets/location_bricks 3 \r\n39 60 tiles/sets/location_bricks 43 \r\n37 54 tiles/sets/location_bricks 13 \r\n37 27 tiles/sets/location_bricks 3 \r\n38 13 tiles/one_way 2 \r\n40 23 tiles/color_cube 4 \r\n39 55 tiles/sets/location_bricks 3 \r\n39 68 tiles/sets/location_bricks 29 \r\n39 64 tiles/sets/location_bricks 43 \r\n39 28 tiles/sets/location_bricks 43 \r\n13 68 tiles/sets/location_bricks 18 \r\n37 62 tiles/sets/location_bricks 13 \r\n39 48 tiles/sets/location_bricks 43 \r\n41 26 tiles/sets/location_bricks 3 \r\n21 68 tiles/sets/location_bricks 18 \r\n39 9 tiles/sets/location_bricks 5 \r\n41 29 tiles/sets/location_bricks 3 \r\n35 70 tiles/sets/location_bricks 18 \r\n15 70 tiles/sets/location_bricks 18 \r\n41 70 tiles/sets/location_bricks 27 \r\n17 54 tiles/coin 0 \r\n23 68 tiles/sets/location_bricks 18 \r\n28 68 tiles/sets/location_bricks 18 \r\n38 16 tiles/sets/bounce 18 \r\n37 31 tiles/sets/location_bricks 3 \r\n39 41 tiles/sets/location_bricks 3 \r\n41 16 tiles/sets/location_bricks 3 \r\n40 42 tiles/color_cube 1 \r\n37 60 tiles/sets/location_bricks 13 \r\n39 13 tiles/sets/location_bricks 3 \r\n40 10 tiles/sets/location_bricks 19 \r\n36 69 tiles/color_cube 2 \r\n32 68 tiles/sets/location_bricks 18 \r\n38 38 tiles/sets/bounce 18 \r\n37 64 tiles/sets/location_bricks 13 \r\n39 50 tiles/sets/location_bricks 43 \r\n41 13 tiles/sets/location_bricks 3 \r\n39 49 tiles/sets/location_bricks 3 \r\n40 71 tiles/sets/location_bricks 17 \r\n39 71 tiles/sets/location_bricks 19 \r\n38 71 tiles/sets/location_bricks 2 \r\n42 68 tiles/sets/location_bricks 32 \r\n42 69 tiles/sets/location_bricks 21 \r\n42 70 tiles/sets/location_bricks 19 \r\n43 69 tiles/sets/location_bricks 49 \r\n43 70 tiles/sets/location_bricks 19 \r\n44 69 tiles/sets/location_bricks 32 \r\n44 70 tiles/sets/location_bricks 17 \r\n37 66 tiles/one_way 1 \r\n39 67 tiles/sets/location_bricks 3 \r\n38 67 tiles/slope 3 \r\n9 10 tiles/sets/location_bricks 19 \r\n9 68 tiles/sets/location_bricks 18 \r\n9 70 tiles/sets/location_bricks 18 \r\n0 9 tiles/sets/location_bricks 47 \r\n0 10 tiles/sets/location_bricks 2 \r\n0 69 tiles/sets/location_bricks 47 \r\n0 70 tiles/sets/location_bricks 2 \r\n1 9 tiles/sets/location_bricks 49 \r\n1 10 tiles/sets/location_bricks 19 \r\n1 69 tiles/sets/location_bricks 49 \r\n1 70 tiles/sets/location_bricks 19 \r\n2 9 tiles/sets/location_bricks 49 \r\n2 10 tiles/sets/location_bricks 51 \r\n2 11 tiles/sets/location_bricks 2 \r\n2 68 tiles/sets/location_bricks 47 \r\n2 69 tiles/sets/location_bricks 36 \r\n2 70 tiles/sets/location_bricks 19 \r\n3 9 tiles/sets/location_bricks 49 \r\n3 10 tiles/sets/location_bricks 6 \r\n3 11 tiles/sets/location_bricks 42 \r\n3 12 tiles/sets/location_bricks 3 \r\n3 13 tiles/sets/location_bricks 3 \r\n3 14 tiles/sets/location_bricks 3 \r\n3 15 tiles/sets/location_bricks 3 \r\n3 16 tiles/sets/location_bricks 3 \r\n3 17 tiles/sets/location_bricks 3 \r\n3 18 tiles/sets/location_bricks 3 \r\n3 19 tiles/sets/location_bricks 3 \r\n3 20 tiles/sets/location_bricks 3 \r\n3 21 tiles/sets/location_bricks 3 \r\n3 22 tiles/sets/location_bricks 3 \r\n3 23 tiles/sets/location_bricks 3 \r\n3 24 tiles/sets/location_bricks 3 \r\n3 25 tiles/sets/location_bricks 3 \r\n3 26 tiles/sets/location_bricks 3 \r\n3 27 tiles/sets/location_bricks 3 \r\n3 28 tiles/sets/location_bricks 3 \r\n3 29 tiles/sets/location_bricks 3 \r\n3 30 tiles/sets/location_bricks 3 \r\n3 31 tiles/sets/location_bricks 3 \r\n3 32 tiles/sets/location_bricks 3 \r\n3 33 tiles/sets/location_bricks 3 \r\n3 34 tiles/sets/location_bricks 3 \r\n3 35 tiles/sets/location_bricks 3 \r\n3 36 tiles/sets/location_bricks 3 \r\n3 37 tiles/sets/location_bricks 3 \r\n3 38 tiles/sets/location_bricks 3 \r\n3 39 tiles/sets/location_bricks 3 \r\n3 40 tiles/sets/location_bricks 3 \r\n3 41 tiles/sets/location_bricks 3 \r\n3 42 tiles/sets/location_bricks 3 \r\n3 43 tiles/sets/location_bricks 3 \r\n3 44 tiles/sets/location_bricks 3 \r\n3 45 tiles/sets/location_bricks 3 \r\n3 46 tiles/sets/location_bricks 3 \r\n3 47 tiles/sets/location_bricks 3 \r\n3 48 tiles/sets/location_bricks 3 \r\n3 49 tiles/sets/location_bricks 3 \r\n3 50 tiles/sets/location_bricks 3 \r\n3 51 tiles/sets/location_bricks 3 \r\n3 52 tiles/sets/location_bricks 3 \r\n3 53 tiles/sets/location_bricks 3 \r\n3 54 tiles/sets/location_bricks 3 \r\n3 55 tiles/sets/location_bricks 3 \r\n3 56 tiles/sets/location_bricks 3 \r\n3 57 tiles/sets/location_bricks 3 \r\n3 58 tiles/sets/location_bricks 3 \r\n3 59 tiles/sets/location_bricks 3 \r\n3 60 tiles/sets/location_bricks 3 \r\n3 61 tiles/sets/location_bricks 3 \r\n3 62 tiles/sets/location_bricks 3 \r\n3 63 tiles/sets/location_bricks 3 \r\n3 64 tiles/sets/location_bricks 3 \r\n3 65 tiles/sets/location_bricks 3 \r\n3 66 tiles/sets/location_bricks 3 \r\n3 67 tiles/sets/location_bricks 3 \r\n3 68 tiles/sets/location_bricks 41 \r\n3 69 tiles/sets/location_bricks 34 \r\n3 70 tiles/sets/location_bricks 26 \r\n4 8 tiles/sets/location_bricks 47 \r\n4 9 tiles/sets/location_bricks 36 \r\n4 10 tiles/sets/location_bricks 19 \r\n4 70 tiles/sets/location_bricks 56 \r\n4 71 tiles/sets/location_bricks 2 \r\n5 8 tiles/sets/location_bricks 49 \r\n5 9 tiles/sets/location_bricks 5 \r\n5 10 tiles/sets/location_bricks 52 \r\n5 11 tiles/sets/location_bricks 3 \r\n5 12 tiles/sets/location_bricks 3 \r\n5 13 tiles/sets/location_bricks 3 \r\n5 14 tiles/sets/location_bricks 3 \r\n5 15 tiles/sets/location_bricks 3 \r\n5 16 tiles/sets/location_bricks 13 \r\n5 17 tiles/sets/location_bricks 3 \r\n5 18 tiles/sets/location_bricks 13 \r\n5 19 tiles/sets/location_bricks 3 \r\n5 20 tiles/sets/location_bricks 13 \r\n5 21 tiles/sets/location_bricks 3 \r\n5 22 tiles/sets/location_bricks 13 \r\n5 23 tiles/sets/location_bricks 3 \r\n5 24 tiles/sets/location_bricks 13 \r\n5 25 tiles/sets/location_bricks 3 \r\n5 26 tiles/sets/location_bricks 13 \r\n5 27 tiles/sets/location_bricks 3 \r\n5 28 tiles/sets/location_bricks 13 \r\n5 29 tiles/sets/location_bricks 3 \r\n5 30 tiles/sets/location_bricks 13 \r\n5 31 tiles/sets/location_bricks 3 \r\n5 32 tiles/sets/location_bricks 13 \r\n5 33 tiles/sets/location_bricks 3 \r\n5 34 tiles/sets/location_bricks 13 \r\n5 35 tiles/sets/location_bricks 3 \r\n5 36 tiles/sets/location_bricks 13 \r\n5 37 tiles/sets/location_bricks 3 \r\n5 38 tiles/sets/location_bricks 13 \r\n5 39 tiles/sets/location_bricks 3 \r\n5 40 tiles/sets/location_bricks 13 \r\n5 41 tiles/sets/location_bricks 3 \r\n5 42 tiles/sets/location_bricks 13 \r\n5 43 tiles/sets/location_bricks 3 \r\n5 44 tiles/sets/location_bricks 13 \r\n5 45 tiles/sets/location_bricks 3 \r\n5 46 tiles/sets/location_bricks 13 \r\n5 47 tiles/sets/location_bricks 3 \r\n5 48 tiles/sets/location_bricks 13 \r\n5 49 tiles/sets/location_bricks 3 \r\n5 50 tiles/sets/location_bricks 13 \r\n5 51 tiles/sets/location_bricks 3 \r\n5 52 tiles/sets/location_bricks 13 \r\n5 53 tiles/sets/location_bricks 3 \r\n5 54 tiles/sets/location_bricks 13 \r\n5 55 tiles/sets/location_bricks 3 \r\n5 56 tiles/sets/location_bricks 13 \r\n5 57 tiles/sets/location_bricks 3 \r\n5 58 tiles/sets/location_bricks 13 \r\n5 59 tiles/sets/location_bricks 3 \r\n5 60 tiles/sets/location_bricks 13 \r\n5 61 tiles/sets/location_bricks 3 \r\n5 62 tiles/sets/location_bricks 13 \r\n5 63 tiles/sets/location_bricks 3 \r\n5 64 tiles/sets/location_bricks 13 \r\n5 65 tiles/sets/location_bricks 3 \r\n5 66 tiles/sets/location_bricks 13 \r\n5 67 tiles/sets/location_bricks 3 \r\n5 68 tiles/sets/location_bricks 14 \r\n5 70 tiles/sets/location_bricks 49 \r\n5 71 tiles/sets/location_bricks 19 \r\n6 8 tiles/sets/location_bricks 32 \r\n6 9 tiles/sets/location_bricks 21 \r\n6 10 tiles/sets/location_bricks 19 \r\n6 13 tiles/one_way 2 \r\n6 15 tiles/power_fruit 1 \r\n6 16 tiles/sets/bounce 18 \r\n6 18 tiles/sets/bounce 18 \r\n6 20 tiles/sets/bounce 18 \r\n6 22 tiles/sets/bounce 18 \r\n6 24 tiles/sets/bounce 18 \r\n6 26 tiles/sets/bounce 18 \r\n6 28 tiles/sets/bounce 18 \r\n6 30 tiles/sets/bounce 18 \r\n6 32 tiles/sets/bounce 18 \r\n6 34 tiles/sets/bounce 18 \r\n6 36 tiles/sets/bounce 18 \r\n6 38 tiles/sets/bounce 18 \r\n6 40 tiles/sets/bounce 18 \r\n6 42 tiles/sets/bounce 18 \r\n6 44 tiles/sets/bounce 18 \r\n6 46 tiles/sets/bounce 18 \r\n6 48 tiles/sets/bounce 18 \r\n6 50 tiles/sets/bounce 18 \r\n6 52 tiles/sets/bounce 18 \r\n6 54 tiles/sets/bounce 18 \r\n6 56 tiles/sets/bounce 18 \r\n6 58 tiles/sets/bounce 18 \r\n6 60 tiles/sets/bounce 18 \r\n6 62 tiles/sets/bounce 18 \r\n6 64 tiles/sets/bounce 18 \r\n6 66 tiles/sets/bounce 16 \r\n6 67 tiles/slope 2 \r\n6 68 tiles/sets/location_bricks 18 \r\n6 70 tiles/sets/location_bricks 57 \r\n6 71 tiles/sets/location_bricks 17 \r\n7 10 tiles/sets/location_bricks 19 \r\n7 14 tiles/one_way 1 \r\n7 15 tiles/sets/location_bricks 47 \r\n7 16 tiles/sets/location_bricks 37 \r\n7 17 tiles/sets/location_bricks 11 \r\n7 18 tiles/sets/location_bricks 43 \r\n7 19 tiles/sets/location_bricks 3 \r\n7 20 tiles/sets/location_bricks 43 \r\n7 21 tiles/sets/location_bricks 3 \r\n7 22 tiles/sets/location_bricks 43 \r\n7 23 tiles/sets/location_bricks 3 \r\n7 24 tiles/sets/location_bricks 54 \r\n7 25 tiles/sets/location_bricks 4 \r\n7 26 tiles/sets/location_bricks 9 \r\n7 27 tiles/sets/location_bricks 3 \r\n7 28 tiles/sets/location_bricks 43 \r\n7 29 tiles/sets/location_bricks 3 \r\n7 30 tiles/sets/location_bricks 43 \r\n7 31 tiles/sets/location_bricks 3 \r\n7 32 tiles/sets/location_bricks 43 \r\n7 33 tiles/sets/location_bricks 3 \r\n7 34 tiles/sets/location_bricks 43 \r\n7 35 tiles/sets/location_bricks 3 \r\n7 36 tiles/sets/location_bricks 43 \r\n7 37 tiles/sets/location_bricks 3 \r\n7 38 tiles/sets/location_bricks 43 \r\n7 39 tiles/sets/location_bricks 3 \r\n7 40 tiles/sets/location_bricks 43 \r\n7 41 tiles/sets/location_bricks 3 \r\n7 42 tiles/sets/location_bricks 43 \r\n7 43 tiles/sets/location_bricks 3 \r\n7 44 tiles/sets/location_bricks 43 \r\n7 45 tiles/sets/location_bricks 3 \r\n7 46 tiles/sets/location_bricks 43 \r\n7 47 tiles/sets/location_bricks 3 \r\n7 48 tiles/sets/location_bricks 54 \r\n7 49 tiles/sets/location_bricks 4 \r\n7 50 tiles/sets/location_bricks 37 \r\n7 51 tiles/sets/location_bricks 4 \r\n7 52 tiles/sets/location_bricks 37 \r\n7 53 tiles/sets/location_bricks 4 \r\n7 54 tiles/sets/location_bricks 37 \r\n7 55 tiles/sets/location_bricks 4 \r\n7 56 tiles/sets/location_bricks 9 \r\n7 57 tiles/sets/location_bricks 3 \r\n7 58 tiles/sets/location_bricks 43 \r\n7 59 tiles/sets/location_bricks 3 \r\n7 60 tiles/sets/location_bricks 43 \r\n7 61 tiles/sets/location_bricks 3 \r\n7 62 tiles/sets/location_bricks 43 \r\n7 63 tiles/sets/location_bricks 3 \r\n7 64 tiles/sets/location_bricks 43 \r\n7 65 tiles/sets/location_bricks 1 \r\n7 66 tiles/one_way 3 \r\n7 67 tiles/one_way 3 \r\n7 68 tiles/sets/location_bricks 18 \r\n7 70 tiles/sets/location_bricks 18 \r\n9 69 tiles/color_cube 2 \r\n8 69 tiles/color_cube 3 \r\n7 69 tiles/color_cube 3 \r\n6 69 tiles/color_cube 3 \r\n5 69 tiles/color_cube 4 \r\n4 69 tiles/color_cube 4 \r\n4 67 tiles/color_cube 5 \r\n4 66 tiles/color_cube 5 \r\n4 64 tiles/color_cube 6 \r\n4 63 tiles/color_cube 6 \r\n4 61 tiles/color_cube 7 \r\n4 60 tiles/color_cube 7 \r\n4 59 tiles/color_cube 7 \r\n4 68 tiles/color_cube 4 \r\n4 65 tiles/color_cube 5 \r\n4 62 tiles/color_cube 6 \r\n4 58 tiles/color_cube 8 \r\n4 57 tiles/color_cube 8 \r\n4 56 tiles/color_cube 8 \r\n4 55 tiles/color_cube 0 \r\n4 54 tiles/color_cube 0 \r\n4 52 tiles/color_cube 1 \r\n4 51 tiles/color_cube 1 \r\n4 50 tiles/color_cube 1 \r\n4 53 tiles/color_cube 0 \r\n4 49 tiles/color_cube 2 \r\n4 48 tiles/color_cube 2 \r\n4 47 tiles/color_cube 2 \r\n4 46 tiles/color_cube 3 \r\n4 45 tiles/color_cube 3 \r\n4 44 tiles/color_cube 3 \r\n4 43 tiles/color_cube 4 \r\n4 42 tiles/color_cube 4 \r\n4 41 tiles/color_cube 4 \r\n4 40 tiles/color_cube 5 \r\n4 39 tiles/color_cube 5 \r\n4 38 tiles/color_cube 5 \r\n4 37 tiles/color_cube 6 \r\n4 36 tiles/color_cube 6 \r\n4 35 tiles/color_cube 6 \r\n4 34 tiles/color_cube 7 \r\n4 33 tiles/color_cube 7 \r\n4 32 tiles/color_cube 7 \r\n4 29 tiles/color_cube 8 \r\n4 30 tiles/color_cube 8 \r\n4 31 tiles/color_cube 8 \r\n4 26 tiles/color_cube 0 \r\n4 27 tiles/color_cube 0 \r\n4 28 tiles/color_cube 0 \r\n4 25 tiles/color_cube 1 \r\n4 24 tiles/color_cube 1 \r\n4 23 tiles/color_cube 1 \r\n4 22 tiles/color_cube 2 \r\n4 21 tiles/color_cube 2 \r\n4 20 tiles/color_cube 2 \r\n4 19 tiles/color_cube 3 \r\n4 18 tiles/color_cube 3 \r\n4 17 tiles/color_cube 3 \r\n4 16 tiles/color_cube 4 \r\n4 15 tiles/color_cube 4 \r\n4 14 tiles/color_cube 4 \r\n4 13 tiles/color_cube 5 \r\n4 12 tiles/color_cube 5 \r\n4 11 tiles/color_cube 5 \r\n7 9 tiles/sets/location_bricks 49 \r\n9 9 tiles/sets/location_bricks 49 \r\n8 9 tiles/sets/location_bricks 49 \r\n8 10 tiles/sets/location_bricks 19 \r\n8 70 tiles/sets/location_bricks 18 \r\n8 68 tiles/sets/location_bricks 18 \r\n16 45 tiles/coin 0 \r\n17 45 tiles/coin 0 \r\n18 44 tiles/coin 0 \r\n18 45 tiles/coin 0 \r\n18 46 tiles/coin 0 \r\n20 43 tiles/sets/location_bricks 59 \r\n20 44 tiles/sets/location_bricks 3 \r\n20 45 tiles/sets/location_bricks 3 \r\n20 46 tiles/sets/location_bricks 3 \r\n20 47 tiles/sets/location_bricks 14 \r\n21 41 tiles/coin 0 \r\n21 43 tiles/sets/location_bricks 18 \r\n21 44 tiles/color_cube 0 \r\n21 45 tiles/color_cube 0 \r\n21 46 tiles/color_cube 0 \r\n21 47 tiles/sets/location_bricks 18 \r\n22 40 tiles/coin 0 \r\n22 41 tiles/coin 0 \r\n22 43 tiles/sets/location_bricks 18 \r\n22 44 tiles/color_cube 14 \r\n22 45 tiles/color_cube 0 \r\n22 46 tiles/color_cube 14 \r\n22 47 tiles/sets/location_bricks 18 \r\n23 41 tiles/coin 0 \r\n23 43 tiles/sets/location_bricks 18 \r\n23 44 tiles/color_cube 0 \r\n23 45 tiles/color_cube 0 \r\n23 46 tiles/color_cube 0 \r\n23 47 tiles/sets/location_bricks 18 \r\n24 43 tiles/sets/location_bricks 44 \r\n24 44 tiles/sets/location_bricks 3 \r\n24 45 tiles/sets/location_bricks 3 \r\n24 46 tiles/sets/location_bricks 3 \r\n24 47 tiles/sets/location_bricks 29 \r\n26 44 tiles/coin 0 \r\n26 45 tiles/coin 0 \r\n26 46 tiles/coin 0 \r\n27 45 tiles/coin 0 \r\n28 45 tiles/coin 0 \r\n8 15 tiles/sets/location_bricks 49 \r\n8 16 tiles/sets/location_bricks 6 \r\n9 15 tiles/sets/location_bricks 49 \r\n9 16 tiles/sets/location_bricks 19 \r\n11 9 tiles/sets/location_bricks 49 \r\n11 10 tiles/sets/location_bricks 19 \r\n11 11 tiles/one_way 1 \r\n11 12 tiles/one_way 1 \r\n11 13 tiles/one_way 1 \r\n11 14 tiles/one_way 1 \r\n11 15 tiles/sets/location_bricks 49 \r\n11 16 tiles/sets/location_bricks 19 \r\n12 9 tiles/sets/location_bricks 49 \r\n12 10 tiles/sets/location_bricks 19 \r\n12 11 tiles/color_cube 6 \r\n12 12 tiles/color_cube 6 \r\n12 13 tiles/color_cube 6 \r\n12 14 tiles/color_cube 6 \r\n12 15 tiles/sets/location_bricks 49 \r\n12 16 tiles/sets/location_bricks 19 \r\n13 9 tiles/sets/location_bricks 49 \r\n13 10 tiles/sets/location_bricks 19 \r\n13 11 tiles/color_cube 6 \r\n13 12 tiles/color_cube 6 \r\n13 13 tiles/color_cube 6 \r\n13 14 tiles/color_cube 6 \r\n13 15 tiles/sets/location_bricks 49 \r\n13 16 tiles/sets/location_bricks 19 \r\n14 2 tiles/sets/location_bricks 2 \r\n14 8 tiles/sets/location_bricks 47 \r\n14 9 tiles/sets/location_bricks 36 \r\n14 10 tiles/sets/location_bricks 19 \r\n14 11 tiles/color_cube 6 \r\n14 12 tiles/color_cube 6 \r\n14 13 tiles/color_cube 6 \r\n14 14 tiles/color_cube 6 \r\n14 15 tiles/sets/location_bricks 49 \r\n14 16 tiles/sets/location_bricks 19 \r\n15 0 tiles/sets/location_bricks 47 \r\n15 2 tiles/sets/location_bricks 51 \r\n15 3 tiles/sets/location_bricks 4 \r\n15 4 tiles/sets/location_bricks 4 \r\n15 5 tiles/sets/location_bricks 4 \r\n15 6 tiles/sets/location_bricks 4 \r\n15 7 tiles/sets/location_bricks 4 \r\n15 8 tiles/sets/location_bricks 36 \r\n15 9 tiles/sets/location_bricks 5 \r\n15 10 tiles/sets/location_bricks 19 \r\n15 11 tiles/color_cube 6 \r\n15 12 tiles/color_cube 6 \r\n15 13 tiles/color_cube 6 \r\n15 14 tiles/color_cube 6 \r\n15 15 tiles/sets/location_bricks 49 \r\n15 16 tiles/sets/location_bricks 19 \r\n16 0 tiles/sets/location_bricks 32 \r\n16 2 tiles/sets/location_bricks 6 \r\n16 3 tiles/sets/location_bricks 34 \r\n16 4 tiles/sets/location_bricks 34 \r\n16 5 tiles/sets/location_bricks 34 \r\n16 6 tiles/sets/location_bricks 34 \r\n16 7 tiles/sets/location_bricks 34 \r\n16 8 tiles/sets/location_bricks 34 \r\n16 9 tiles/sets/location_bricks 21 \r\n16 10 tiles/sets/location_bricks 19 \r\n16 11 tiles/color_cube 6 \r\n16 12 tiles/color_cube 6 \r\n16 13 tiles/color_cube 6 \r\n16 14 tiles/color_cube 6 \r\n16 15 tiles/sets/location_bricks 49 \r\n16 16 tiles/sets/location_bricks 19 \r\n16 18 tiles/sets/bounce 47 \r\n16 19 tiles/sets/bounce 2 \r\n17 2 tiles/sets/location_bricks 17 \r\n17 9 tiles/sets/location_bricks 49 \r\n17 10 tiles/sets/location_bricks 19 \r\n17 13 tiles/color_cube 6 \r\n17 15 tiles/sets/location_bricks 49 \r\n17 16 tiles/sets/location_bricks 51 \r\n17 17 tiles/sets/bounce 4 \r\n17 18 tiles/sets/bounce 8 \r\n17 19 tiles/sets/bounce 17 \r\n18 1 tiles/sets/location_bricks 18 \r\n18 8 tiles/sets/location_bricks 47 \r\n18 9 tiles/sets/location_bricks 36 \r\n18 10 tiles/sets/location_bricks 19 \r\n18 14 tiles/color_cube 2 \r\n18 15 tiles/sets/location_bricks 49 \r\n18 16 tiles/sets/bounce 5 \r\n18 17 tiles/sets/bounce 6 \r\n18 18 tiles/sets/bounce 17 \r\n19 1 tiles/sets/location_bricks 18 \r\n19 4 tiles/sets/location_bricks 59 \r\n19 5 tiles/sets/location_bricks 3 \r\n19 6 tiles/sets/location_bricks 3 \r\n19 7 tiles/sets/location_bricks 3 \r\n19 8 tiles/sets/location_bricks 41 \r\n19 9 tiles/sets/location_bricks 34 \r\n19 10 tiles/sets/location_bricks 17 \r\n19 11 tiles/color_cube 6 \r\n19 12 tiles/color_cube 6 \r\n19 13 tiles/color_cube 6 \r\n19 15 tiles/sets/location_bricks 32 \r\n19 17 tiles/sets/bounce 17 \r\n20 1 tiles/sets/location_bricks 18 \r\n20 4 tiles/sets/location_bricks 18 \r\n20 10 tiles/coin_box 0 \r\n20 15 tiles/one_way 0 \r\n21 1 tiles/sets/location_bricks 18 \r\n21 4 tiles/sets/location_bricks 18 \r\n21 10 tiles/coin_box 0 \r\n21 15 tiles/one_way 0 \r\n22 1 tiles/sets/location_bricks 18 \r\n22 4 tiles/sets/location_bricks 18 \r\n22 7 tiles/end 0 \r\n22 10 tiles/coin_box 0 \r\n22 11 tiles/spawn 0 \r\n22 15 tiles/one_way 0 \r\n23 1 tiles/sets/location_bricks 18 \r\n23 4 tiles/sets/location_bricks 18 \r\n23 10 tiles/coin_box 0 \r\n23 15 tiles/one_way 0 \r\n24 1 tiles/sets/location_bricks 18 \r\n24 4 tiles/sets/location_bricks 18 \r\n24 10 tiles/coin_box 0 \r\n24 15 tiles/one_way 0 \r\n25 1 tiles/sets/location_bricks 18 \r\n25 4 tiles/sets/location_bricks 44 \r\n25 5 tiles/sets/location_bricks 3 \r\n25 6 tiles/sets/location_bricks 3 \r\n25 7 tiles/sets/location_bricks 3 \r\n25 8 tiles/sets/location_bricks 12 \r\n25 9 tiles/sets/location_bricks 4 \r\n25 10 tiles/sets/location_bricks 2 \r\n25 11 tiles/color_cube 6 \r\n25 12 tiles/color_cube 6 \r\n25 13 tiles/color_cube 6 \r\n25 15 tiles/sets/location_bricks 47 \r\n25 17 tiles/sets/bounce 2 \r\n26 1 tiles/sets/location_bricks 18 \r\n26 8 tiles/sets/location_bricks 32 \r\n26 9 tiles/sets/location_bricks 21 \r\n26 10 tiles/sets/location_bricks 19 \r\n26 14 tiles/color_cube 2 \r\n26 15 tiles/sets/location_bricks 49 \r\n26 16 tiles/sets/bounce 5 \r\n26 17 tiles/sets/bounce 51 \r\n26 18 tiles/sets/bounce 2 \r\n27 1 tiles/sets/location_bricks 56 \r\n27 2 tiles/sets/location_bricks 2 \r\n27 9 tiles/sets/location_bricks 49 \r\n27 10 tiles/sets/location_bricks 19 \r\n27 11 tiles/color_cube 6 \r\n27 12 tiles/color_cube 6 \r\n27 13 tiles/color_cube 6 \r\n27 15 tiles/sets/location_bricks 49 \r\n27 16 tiles/sets/location_bricks 6 \r\n27 17 tiles/sets/bounce 34 \r\n27 18 tiles/sets/bounce 23 \r\n27 19 tiles/sets/bounce 2 \r\n28 0 tiles/sets/location_bricks 47 \r\n28 1 tiles/sets/location_bricks 36 \r\n28 2 tiles/sets/location_bricks 51 \r\n28 3 tiles/sets/location_bricks 4 \r\n28 4 tiles/sets/location_bricks 4 \r\n28 5 tiles/sets/location_bricks 4 \r\n28 6 tiles/sets/location_bricks 4 \r\n28 7 tiles/sets/location_bricks 4 \r\n28 8 tiles/sets/location_bricks 4 \r\n28 9 tiles/sets/location_bricks 36 \r\n28 10 tiles/sets/location_bricks 19 \r\n28 11 tiles/color_cube 6 \r\n28 12 tiles/color_cube 6 \r\n28 13 tiles/color_cube 6 \r\n28 14 tiles/color_cube 6 \r\n28 15 tiles/sets/location_bricks 49 \r\n28 16 tiles/sets/location_bricks 19 \r\n28 18 tiles/sets/bounce 32 \r\n28 19 tiles/sets/bounce 17 \r\n29 0 tiles/sets/location_bricks 32 \r\n29 1 tiles/sets/location_bricks 21 \r\n29 2 tiles/sets/location_bricks 6 \r\n29 3 tiles/sets/location_bricks 34 \r\n29 4 tiles/sets/location_bricks 34 \r\n29 5 tiles/sets/location_bricks 34 \r\n29 6 tiles/sets/location_bricks 34 \r\n29 7 tiles/sets/location_bricks 34 \r\n29 8 tiles/sets/location_bricks 21 \r\n29 9 tiles/sets/location_bricks 5 \r\n29 10 tiles/sets/location_bricks 19 \r\n29 11 tiles/color_cube 6 \r\n29 12 tiles/color_cube 6 \r\n29 13 tiles/color_cube 6 \r\n29 14 tiles/color_cube 6 \r\n29 15 tiles/sets/location_bricks 49 \r\n29 16 tiles/sets/location_bricks 19 \r\n30 1 tiles/sets/location_bricks 32 \r\n30 2 tiles/sets/location_bricks 17 \r\n30 8 tiles/sets/location_bricks 32 \r\n30 9 tiles/sets/location_bricks 21 \r\n30 10 tiles/sets/location_bricks 19 \r\n30 11 tiles/color_cube 6 \r\n30 12 tiles/color_cube 6 \r\n30 13 tiles/color_cube 6 \r\n30 14 tiles/color_cube 6 \r\n30 15 tiles/sets/location_bricks 49 \r\n30 16 tiles/sets/location_bricks 19 \r\n31 9 tiles/sets/location_bricks 49 \r\n31 10 tiles/sets/location_bricks 19 \r\n31 11 tiles/color_cube 6 \r\n31 12 tiles/color_cube 6 \r\n31 13 tiles/color_cube 6 \r\n31 14 tiles/color_cube 6 \r\n31 15 tiles/sets/location_bricks 49 \r\n31 16 tiles/sets/location_bricks 19 \r\n32 9 tiles/sets/location_bricks 49 \r\n32 10 tiles/sets/location_bricks 19 \r\n32 11 tiles/color_cube 6 \r\n32 12 tiles/color_cube 6 \r\n32 13 tiles/color_cube 6 \r\n32 14 tiles/color_cube 6 \r\n32 15 tiles/sets/location_bricks 49 \r\n32 16 tiles/sets/location_bricks 19 \r\n33 9 tiles/sets/location_bricks 49 \r\n33 10 tiles/sets/location_bricks 19 \r\n33 11 tiles/one_way 3 \r\n33 12 tiles/one_way 3 \r\n33 13 tiles/one_way 3 \r\n33 14 tiles/one_way 3 \r\n33 15 tiles/sets/location_bricks 49 \r\n33 16 tiles/sets/location_bricks 19 \r\n34 16 tiles/sets/location_bricks 19 \r\n34 15 tiles/sets/location_bricks 49 \r\n34 10 tiles/sets/location_bricks 19 \r\n34 9 tiles/sets/location_bricks 49 \r\n25 16 tiles/sets/bounce 4 \r\n19 16 tiles/sets/bounce 34 \r\n28 29 tiles/coin 0 \r\n28 30 tiles/coin 0 \r\n29 29 tiles/coin 0 \r\n29 30 tiles/coin 0 \r\n35 26 tiles/sets/bounce 2 \r\n36 25 tiles/sets/bounce 36 \r\n36 26 tiles/sets/bounce 19 \r\n16 35 tiles/sets/location_bricks 47 \r\n16 36 tiles/sets/location_bricks 2 \r\n17 35 tiles/sets/location_bricks 49 \r\n17 36 tiles/sets/location_bricks 19 \r\n17 37 tiles/coin 0 \r\n18 35 tiles/sets/location_bricks 57 \r\n19 34 tiles/sets/location_bricks 47 \r\n19 35 tiles/sets/location_bricks 27 \r\n20 34 tiles/sets/location_bricks 32 \r\n20 35 tiles/sets/location_bricks 17 \r\n24 34 tiles/sets/location_bricks 47 \r\n24 35 tiles/sets/location_bricks 2 \r\n25 34 tiles/sets/location_bricks 32 \r\n25 35 tiles/sets/location_bricks 26 \r\n26 35 tiles/sets/location_bricks 56 \r\n27 35 tiles/sets/location_bricks 49 \r\n27 36 tiles/sets/location_bricks 19 \r\n27 37 tiles/coin 0 \r\n28 35 tiles/sets/location_bricks 32 \r\n28 36 tiles/sets/location_bricks 17 \r\n22 39 tiles/coin 0 \r\n10 34 tiles/coin 0 \r\n10 35 tiles/coin 0 \r\n10 36 tiles/coin 0 \r\n10 37 tiles/coin 0 \r\n11 39 tiles/sets/location_bricks 59 \r\n11 40 tiles/sets/location_bricks 3 \r\n11 41 tiles/sets/location_bricks 14 \r\n12 39 tiles/sets/location_bricks 18 \r\n12 40 tiles/color_cube 6 \r\n12 41 tiles/sets/location_bricks 18 \r\n13 39 tiles/sets/location_bricks 44 \r\n13 40 tiles/sets/location_bricks 3 \r\n13 41 tiles/sets/location_bricks 29 \r\n23 8 tiles/color_cube 13 \r\n22 8 tiles/color_cube 13 \r\n21 8 tiles/color_cube 13 \r\n21 7 tiles/color_cube 13 \r\n21 6 tiles/color_cube 13 \r\n22 6 tiles/color_cube 13 \r\n23 6 tiles/color_cube 13 \r\n23 7 tiles/color_cube 13 \r\n17 12 tiles/color_cube 6 \r\n17 11 tiles/color_cube 6 \r\n17 14 tiles/color_cube 6 \r\n19 14 tiles/color_cube 6 \r\n25 14 tiles/color_cube 6 \r\n27 14 tiles/color_cube 6 \r\n18 36 tiles/sets/location_bricks 17 \r\n26 36 tiles/sets/location_bricks 2 \r\n21 49 tiles/coin 0 \r\n22 50 tiles/coin 0 \r\n22 51 tiles/coin 0 \r\n23 49 tiles/coin 0 \r\n22 49 tiles/coin 0 \r\n8 17 tiles/sets/location_bricks 17 \r\n36 17 tiles/sets/location_bricks 2 \r\n11 63 tiles/sets/location_bricks 31 \r\n11 64 tiles/sets/location_bricks 14 \r\n12 62 tiles/sets/location_bricks 46 \r\n12 63 tiles/color_cube 2 \r\n12 64 tiles/sets/location_bricks 16 \r\n13 62 tiles/sets/location_bricks 44 \r\n13 63 tiles/sets/location_bricks 1 \r\n8 48 tiles/sets/location_bricks 49 \r\n8 49 tiles/sets/location_bricks 5 \r\n8 50 tiles/sets/location_bricks 5 \r\n8 51 tiles/sets/location_bricks 5 \r\n8 52 tiles/sets/location_bricks 5 \r\n8 53 tiles/sets/location_bricks 5 \r\n8 54 tiles/sets/location_bricks 5 \r\n8 55 tiles/sets/location_bricks 5 \r\n8 56 tiles/sets/location_bricks 19 \r\n9 48 tiles/sets/location_bricks 32 \r\n9 49 tiles/sets/location_bricks 34 \r\n9 50 tiles/sets/location_bricks 34 \r\n9 51 tiles/sets/location_bricks 34 \r\n9 52 tiles/sets/location_bricks 34 \r\n9 53 tiles/sets/location_bricks 34 \r\n9 54 tiles/sets/location_bricks 34 \r\n9 55 tiles/sets/location_bricks 34 \r\n9 56 tiles/sets/location_bricks 17 \r\n10 49 tiles/coin 0 \r\n10 50 tiles/coin 0 \r\n10 51 tiles/coin 0 \r\n10 52 tiles/coin 0 \r\n10 53 tiles/coin 0 \r\n10 54 tiles/coin 0 \r\n10 55 tiles/coin 0 \r\n11 48 tiles/sets/location_bricks 47 \r\n11 49 tiles/sets/location_bricks 4 \r\n11 50 tiles/sets/location_bricks 4 \r\n11 51 tiles/sets/location_bricks 4 \r\n11 52 tiles/sets/location_bricks 4 \r\n11 53 tiles/sets/location_bricks 4 \r\n11 54 tiles/sets/location_bricks 4 \r\n11 55 tiles/sets/location_bricks 4 \r\n11 56 tiles/sets/location_bricks 2 \r\n12 48 tiles/sets/location_bricks 32 \r\n12 49 tiles/sets/location_bricks 34 \r\n12 50 tiles/sets/location_bricks 34 \r\n12 51 tiles/sets/location_bricks 34 \r\n12 52 tiles/sets/location_bricks 34 \r\n12 53 tiles/sets/location_bricks 34 \r\n12 54 tiles/sets/location_bricks 34 \r\n12 55 tiles/sets/location_bricks 34 \r\n12 56 tiles/sets/location_bricks 17 \r\n30 49 tiles/coin 0 \r\n30 50 tiles/coin 0 \r\n30 51 tiles/coin 0 \r\n30 52 tiles/coin 0 \r\n25 56 tiles/sets/location_bricks 0 \r\n27 57 tiles/coin 0 \r\n27 62 tiles/sets/location_bricks 0 \r\n28 60 tiles/coin 0 \r\n29 58 tiles/sets/location_bricks 0 \r\n30 56 tiles/coin 0 \r\n31 54 tiles/sets/location_bricks 0 \r\n31 59 tiles/coin 0 \r\n33 60 tiles/sets/location_bricks 0 \r\n18 60 tiles/sets/location_bricks 47 \r\n18 61 tiles/sets/location_bricks 2 \r\n18 62 tiles/coin 0 \r\n19 60 tiles/sets/location_bricks 49 \r\n19 61 tiles/sets/location_bricks 19 \r\n19 62 tiles/coin 0 \r\n20 60 tiles/sets/location_bricks 49 \r\n20 61 tiles/sets/location_bricks 19 \r\n20 62 tiles/coin 0 \r\n21 60 tiles/sets/location_bricks 32 \r\n21 61 tiles/sets/location_bricks 17 \r\n21 62 tiles/coin 0 \r\n13 27 tiles/sets/location_bricks 31 \r\n13 28 tiles/sets/location_bricks 14 \r\n14 26 tiles/sets/location_bricks 0 \r\n14 27 tiles/color_cube 2 \r\n14 28 tiles/sets/location_bricks 16 \r\n15 25 tiles/sets/location_bricks 46 \r\n15 26 tiles/color_cube 2 \r\n15 27 tiles/sets/location_bricks 0 \r\n15 30 tiles/coin 0 \r\n16 25 tiles/sets/location_bricks 44 \r\n16 26 tiles/sets/location_bricks 1 \r\n16 29 tiles/coin 0 \r\n17 28 tiles/coin 0 \r\n18 27 tiles/coin 0 \r\n8 25 tiles/sets/bounce 21 \r\n8 26 tiles/sets/bounce 19 \r\n9 26 tiles/sets/bounce 17 \r\n9 25 tiles/sets/bounce 32 \r\n8 24 tiles/sets/bounce 32 \r\n35 25 tiles/sets/bounce 47 \r\n36 24 tiles/sets/bounce 47 \r\n30 25 tiles/sets/location_bricks 59 \r\n30 26 tiles/sets/location_bricks 3 \r\n30 27 tiles/sets/location_bricks 14 \r\n31 25 tiles/sets/location_bricks 18 \r\n31 26 tiles/color_cube 6 \r\n31 27 tiles/sets/location_bricks 18 \r\n32 25 tiles/sets/location_bricks 44 \r\n32 26 tiles/sets/location_bricks 3 \r\n32 27 tiles/sets/location_bricks 29 \r\n14 1 tiles/sets/location_bricks 47 \r\n15 1 tiles/sets/location_bricks 36 \r\n16 1 tiles/sets/location_bricks 21 \r\n17 1 tiles/sets/location_bricks 57 \r\n@background_tiles\r\n38 16 tiles/sets/bounce 5 \r\n38 17 tiles/sets/bounce 5 \r\n38 18 tiles/sets/bounce 5 \r\n38 19 tiles/sets/bounce 5 \r\n38 20 tiles/sets/bounce 5 \r\n38 21 tiles/sets/bounce 5 \r\n38 22 tiles/sets/bounce 5 \r\n38 23 tiles/sets/bounce 5 \r\n38 24 tiles/sets/bounce 5 \r\n38 25 tiles/sets/bounce 5 \r\n38 26 tiles/sets/bounce 5 \r\n38 27 tiles/sets/bounce 5 \r\n38 28 tiles/sets/bounce 5 \r\n38 29 tiles/sets/bounce 5 \r\n38 30 tiles/sets/bounce 5 \r\n38 31 tiles/sets/bounce 5 \r\n38 32 tiles/sets/bounce 5 \r\n38 33 tiles/sets/bounce 5 \r\n38 34 tiles/sets/bounce 5 \r\n38 35 tiles/sets/bounce 5 \r\n38 36 tiles/sets/bounce 5 \r\n38 37 tiles/sets/bounce 5 \r\n38 38 tiles/sets/bounce 5 \r\n38 39 tiles/sets/bounce 5 \r\n38 40 tiles/sets/bounce 5 \r\n38 41 tiles/sets/bounce 5 \r\n38 42 tiles/sets/bounce 5 \r\n38 43 tiles/sets/bounce 5 \r\n38 44 tiles/sets/bounce 5 \r\n38 45 tiles/sets/bounce 5 \r\n38 46 tiles/sets/bounce 5 \r\n38 47 tiles/sets/bounce 5 \r\n38 48 tiles/sets/bounce 5 \r\n38 49 tiles/sets/bounce 5 \r\n38 50 tiles/sets/bounce 5 \r\n38 51 tiles/sets/bounce 5 \r\n38 52 tiles/sets/bounce 5 \r\n38 53 tiles/sets/bounce 5 \r\n38 54 tiles/sets/bounce 5 \r\n38 55 tiles/sets/bounce 5 \r\n38 56 tiles/sets/bounce 5 \r\n38 57 tiles/sets/bounce 5 \r\n38 58 tiles/sets/bounce 5 \r\n38 59 tiles/sets/bounce 5 \r\n38 60 tiles/sets/bounce 5 \r\n38 61 tiles/sets/bounce 5 \r\n38 62 tiles/sets/bounce 5 \r\n38 63 tiles/sets/bounce 5 \r\n38 64 tiles/sets/bounce 5 \r\n38 65 tiles/sets/bounce 5 \r\n38 66 tiles/sets/bounce 5 \r\n38 67 tiles/sets/bounce 19 \r\n37 67 tiles/sets/location_bricks 2 \r\n37 66 tiles/sets/location_bricks 4 \r\n37 65 tiles/sets/location_bricks 4 \r\n37 64 tiles/sets/location_bricks 4 \r\n37 63 tiles/sets/location_bricks 4 \r\n37 62 tiles/sets/location_bricks 4 \r\n37 61 tiles/sets/location_bricks 4 \r\n37 60 tiles/sets/location_bricks 4 \r\n37 59 tiles/sets/location_bricks 4 \r\n37 58 tiles/sets/location_bricks 4 \r\n37 57 tiles/sets/location_bricks 4 \r\n37 56 tiles/sets/location_bricks 4 \r\n37 55 tiles/sets/location_bricks 4 \r\n37 54 tiles/sets/location_bricks 4 \r\n37 53 tiles/sets/location_bricks 4 \r\n37 52 tiles/sets/location_bricks 4 \r\n37 51 tiles/sets/location_bricks 4 \r\n37 50 tiles/sets/location_bricks 4 \r\n37 49 tiles/sets/location_bricks 4 \r\n37 48 tiles/sets/location_bricks 4 \r\n37 47 tiles/sets/location_bricks 4 \r\n37 46 tiles/sets/location_bricks 4 \r\n37 45 tiles/sets/location_bricks 4 \r\n37 44 tiles/sets/location_bricks 4 \r\n37 43 tiles/sets/location_bricks 4 \r\n37 42 tiles/sets/location_bricks 4 \r\n37 41 tiles/sets/location_bricks 4 \r\n37 40 tiles/sets/location_bricks 4 \r\n37 39 tiles/sets/location_bricks 4 \r\n37 38 tiles/sets/location_bricks 4 \r\n37 37 tiles/sets/location_bricks 4 \r\n37 36 tiles/sets/location_bricks 4 \r\n37 35 tiles/sets/location_bricks 4 \r\n37 34 tiles/sets/location_bricks 4 \r\n37 33 tiles/sets/location_bricks 4 \r\n37 32 tiles/sets/location_bricks 4 \r\n37 31 tiles/sets/location_bricks 4 \r\n37 30 tiles/sets/location_bricks 4 \r\n37 29 tiles/sets/location_bricks 4 \r\n37 28 tiles/sets/location_bricks 4 \r\n37 27 tiles/sets/location_bricks 4 \r\n37 26 tiles/sets/location_bricks 4 \r\n37 25 tiles/sets/location_bricks 4 \r\n37 24 tiles/sets/location_bricks 4 \r\n37 23 tiles/sets/location_bricks 4 \r\n37 22 tiles/sets/location_bricks 4 \r\n37 21 tiles/sets/location_bricks 4 \r\n37 20 tiles/sets/location_bricks 4 \r\n37 19 tiles/sets/location_bricks 4 \r\n37 18 tiles/sets/location_bricks 4 \r\n37 17 tiles/sets/location_bricks 4 \r\n37 16 tiles/sets/location_bricks 4 \r\n37 15 tiles/sets/location_bricks 4 \r\n39 15 tiles/sets/location_bricks 34 \r\n39 16 tiles/sets/location_bricks 34 \r\n39 17 tiles/sets/location_bricks 34 \r\n39 18 tiles/sets/location_bricks 34 \r\n39 19 tiles/sets/location_bricks 34 \r\n39 20 tiles/sets/location_bricks 34 \r\n39 21 tiles/sets/location_bricks 34 \r\n39 22 tiles/sets/location_bricks 34 \r\n39 23 tiles/sets/location_bricks 34 \r\n39 24 tiles/sets/location_bricks 34 \r\n39 25 tiles/sets/location_bricks 34 \r\n39 26 tiles/sets/location_bricks 34 \r\n39 27 tiles/sets/location_bricks 34 \r\n39 28 tiles/sets/location_bricks 34 \r\n39 29 tiles/sets/location_bricks 34 \r\n39 30 tiles/sets/location_bricks 34 \r\n39 31 tiles/sets/location_bricks 34 \r\n39 32 tiles/sets/location_bricks 34 \r\n39 33 tiles/sets/location_bricks 34 \r\n39 34 tiles/sets/location_bricks 34 \r\n39 35 tiles/sets/location_bricks 34 \r\n39 36 tiles/sets/location_bricks 34 \r\n39 37 tiles/sets/location_bricks 34 \r\n39 38 tiles/sets/location_bricks 34 \r\n39 39 tiles/sets/location_bricks 34 \r\n39 40 tiles/sets/location_bricks 34 \r\n39 41 tiles/sets/location_bricks 34 \r\n39 42 tiles/sets/location_bricks 34 \r\n39 43 tiles/sets/location_bricks 34 \r\n39 44 tiles/sets/location_bricks 34 \r\n39 45 tiles/sets/location_bricks 34 \r\n39 46 tiles/sets/location_bricks 34 \r\n39 47 tiles/sets/location_bricks 34 \r\n39 48 tiles/sets/location_bricks 34 \r\n39 49 tiles/sets/location_bricks 34 \r\n39 50 tiles/sets/location_bricks 34 \r\n39 51 tiles/sets/location_bricks 34 \r\n39 52 tiles/sets/location_bricks 34 \r\n39 53 tiles/sets/location_bricks 34 \r\n39 54 tiles/sets/location_bricks 34 \r\n39 55 tiles/sets/location_bricks 34 \r\n39 56 tiles/sets/location_bricks 34 \r\n39 57 tiles/sets/location_bricks 34 \r\n39 58 tiles/sets/location_bricks 34 \r\n39 59 tiles/sets/location_bricks 34 \r\n39 60 tiles/sets/location_bricks 34 \r\n39 61 tiles/sets/location_bricks 34 \r\n39 62 tiles/sets/location_bricks 34 \r\n39 63 tiles/sets/location_bricks 34 \r\n39 64 tiles/sets/location_bricks 34 \r\n39 65 tiles/sets/location_bricks 34 \r\n39 66 tiles/sets/location_bricks 34 \r\n39 67 tiles/sets/location_bricks 17 \r\n38 15 tiles/sets/bounce 5 \r\n5 15 tiles/sets/location_bricks 4 \r\n5 16 tiles/sets/location_bricks 4 \r\n5 17 tiles/sets/location_bricks 4 \r\n5 18 tiles/sets/location_bricks 4 \r\n5 19 tiles/sets/location_bricks 4 \r\n5 20 tiles/sets/location_bricks 4 \r\n5 21 tiles/sets/location_bricks 4 \r\n5 22 tiles/sets/location_bricks 4 \r\n5 23 tiles/sets/location_bricks 4 \r\n5 24 tiles/sets/location_bricks 4 \r\n5 25 tiles/sets/location_bricks 4 \r\n5 26 tiles/sets/location_bricks 4 \r\n5 27 tiles/sets/location_bricks 4 \r\n5 28 tiles/sets/location_bricks 4 \r\n5 29 tiles/sets/location_bricks 4 \r\n5 30 tiles/sets/location_bricks 4 \r\n5 31 tiles/sets/location_bricks 4 \r\n5 32 tiles/sets/location_bricks 4 \r\n5 33 tiles/sets/location_bricks 4 \r\n5 34 tiles/sets/location_bricks 4 \r\n5 35 tiles/sets/location_bricks 4 \r\n5 36 tiles/sets/location_bricks 4 \r\n5 37 tiles/sets/location_bricks 4 \r\n5 38 tiles/sets/location_bricks 4 \r\n5 39 tiles/sets/location_bricks 4 \r\n5 40 tiles/sets/location_bricks 4 \r\n5 41 tiles/sets/location_bricks 4 \r\n5 42 tiles/sets/location_bricks 4 \r\n5 43 tiles/sets/location_bricks 4 \r\n5 44 tiles/sets/location_bricks 4 \r\n5 45 tiles/sets/location_bricks 4 \r\n5 46 tiles/sets/location_bricks 4 \r\n5 47 tiles/sets/location_bricks 4 \r\n5 48 tiles/sets/location_bricks 4 \r\n5 49 tiles/sets/location_bricks 4 \r\n5 50 tiles/sets/location_bricks 4 \r\n5 51 tiles/sets/location_bricks 4 \r\n5 52 tiles/sets/location_bricks 4 \r\n5 53 tiles/sets/location_bricks 4 \r\n5 54 tiles/sets/location_bricks 4 \r\n5 55 tiles/sets/location_bricks 4 \r\n5 56 tiles/sets/location_bricks 4 \r\n5 57 tiles/sets/location_bricks 4 \r\n5 58 tiles/sets/location_bricks 4 \r\n5 59 tiles/sets/location_bricks 4 \r\n5 60 tiles/sets/location_bricks 4 \r\n5 61 tiles/sets/location_bricks 4 \r\n5 62 tiles/sets/location_bricks 4 \r\n5 63 tiles/sets/location_bricks 4 \r\n5 64 tiles/sets/location_bricks 4 \r\n5 65 tiles/sets/location_bricks 4 \r\n5 66 tiles/sets/location_bricks 4 \r\n5 67 tiles/sets/location_bricks 2 \r\n6 15 tiles/sets/bounce 5 \r\n6 16 tiles/sets/bounce 5 \r\n6 17 tiles/sets/bounce 5 \r\n6 18 tiles/sets/bounce 5 \r\n6 19 tiles/sets/bounce 5 \r\n6 20 tiles/sets/bounce 5 \r\n6 21 tiles/sets/bounce 5 \r\n6 22 tiles/sets/bounce 5 \r\n6 23 tiles/sets/bounce 5 \r\n6 24 tiles/sets/bounce 5 \r\n6 25 tiles/sets/bounce 5 \r\n6 26 tiles/sets/bounce 5 \r\n6 27 tiles/sets/bounce 5 \r\n6 28 tiles/sets/bounce 5 \r\n6 29 tiles/sets/bounce 5 \r\n6 30 tiles/sets/bounce 5 \r\n6 31 tiles/sets/bounce 5 \r\n6 32 tiles/sets/bounce 5 \r\n6 33 tiles/sets/bounce 5 \r\n6 34 tiles/sets/bounce 5 \r\n6 35 tiles/sets/bounce 5 \r\n6 36 tiles/sets/bounce 5 \r\n6 37 tiles/sets/bounce 5 \r\n6 38 tiles/sets/bounce 5 \r\n6 39 tiles/sets/bounce 5 \r\n6 40 tiles/sets/bounce 5 \r\n6 41 tiles/sets/bounce 5 \r\n6 42 tiles/sets/bounce 5 \r\n6 43 tiles/sets/bounce 5 \r\n6 44 tiles/sets/bounce 5 \r\n6 45 tiles/sets/bounce 5 \r\n6 46 tiles/sets/bounce 5 \r\n6 47 tiles/sets/bounce 5 \r\n6 48 tiles/sets/bounce 5 \r\n6 49 tiles/sets/bounce 5 \r\n6 50 tiles/sets/bounce 5 \r\n6 51 tiles/sets/bounce 5 \r\n6 52 tiles/sets/bounce 5 \r\n6 53 tiles/sets/bounce 5 \r\n6 54 tiles/sets/bounce 5 \r\n6 55 tiles/sets/bounce 5 \r\n6 56 tiles/sets/bounce 5 \r\n6 57 tiles/sets/bounce 5 \r\n6 58 tiles/sets/bounce 5 \r\n6 59 tiles/sets/bounce 5 \r\n6 60 tiles/sets/bounce 5 \r\n6 61 tiles/sets/bounce 5 \r\n6 62 tiles/sets/bounce 5 \r\n6 63 tiles/sets/bounce 5 \r\n6 64 tiles/sets/bounce 5 \r\n6 65 tiles/sets/bounce 5 \r\n6 66 tiles/sets/bounce 5 \r\n6 67 tiles/sets/bounce 19 \r\n7 15 tiles/sets/location_bricks 34 \r\n7 16 tiles/sets/location_bricks 34 \r\n7 17 tiles/sets/location_bricks 34 \r\n7 18 tiles/sets/location_bricks 34 \r\n7 19 tiles/sets/location_bricks 34 \r\n7 20 tiles/sets/location_bricks 34 \r\n7 21 tiles/sets/location_bricks 34 \r\n7 22 tiles/sets/location_bricks 34 \r\n7 23 tiles/sets/location_bricks 34 \r\n7 24 tiles/sets/location_bricks 34 \r\n7 25 tiles/sets/location_bricks 34 \r\n7 26 tiles/sets/location_bricks 34 \r\n7 27 tiles/sets/location_bricks 34 \r\n7 28 tiles/sets/location_bricks 34 \r\n7 29 tiles/sets/location_bricks 34 \r\n7 30 tiles/sets/location_bricks 34 \r\n7 31 tiles/sets/location_bricks 34 \r\n7 32 tiles/sets/location_bricks 34 \r\n7 33 tiles/sets/location_bricks 34 \r\n7 34 tiles/sets/location_bricks 34 \r\n7 35 tiles/sets/location_bricks 34 \r\n7 36 tiles/sets/location_bricks 34 \r\n7 37 tiles/sets/location_bricks 34 \r\n7 38 tiles/sets/location_bricks 34 \r\n7 39 tiles/sets/location_bricks 34 \r\n7 40 tiles/sets/location_bricks 34 \r\n7 41 tiles/sets/location_bricks 34 \r\n7 42 tiles/sets/location_bricks 34 \r\n7 43 tiles/sets/location_bricks 34 \r\n7 44 tiles/sets/location_bricks 21 \r\n7 45 tiles/sets/location_bricks 5 \r\n7 46 tiles/sets/location_bricks 5 \r\n7 47 tiles/sets/location_bricks 5 \r\n7 48 tiles/sets/location_bricks 6 \r\n7 49 tiles/sets/location_bricks 34 \r\n7 50 tiles/sets/location_bricks 34 \r\n7 51 tiles/sets/location_bricks 34 \r\n7 52 tiles/sets/location_bricks 34 \r\n7 53 tiles/sets/location_bricks 34 \r\n7 54 tiles/sets/location_bricks 34 \r\n7 55 tiles/sets/location_bricks 34 \r\n7 56 tiles/sets/location_bricks 21 \r\n7 57 tiles/sets/location_bricks 5 \r\n7 58 tiles/sets/location_bricks 5 \r\n7 59 tiles/sets/location_bricks 5 \r\n7 60 tiles/sets/location_bricks 6 \r\n7 61 tiles/sets/location_bricks 34 \r\n7 62 tiles/sets/location_bricks 34 \r\n7 63 tiles/sets/location_bricks 34 \r\n7 64 tiles/sets/location_bricks 34 \r\n7 65 tiles/sets/location_bricks 34 \r\n7 66 tiles/sets/location_bricks 34 \r\n7 67 tiles/sets/location_bricks 17 \r\n16 45 tiles/color_cube 1 \r\n22 39 tiles/color_cube 6 \r\n22 51 tiles/color_cube 0 \r\n27 45 tiles/color_cube 1 \r\n28 45 tiles/color_cube 1 \r\n7 14 tiles/sets/location_bricks 34 \r\n5 14 tiles/sets/location_bricks 4 \r\n7 13 tiles/sets/location_bricks 34 \r\n6 12 tiles/sets/location_bricks 5 \r\n7 12 tiles/sets/location_bricks 34 \r\n7 11 tiles/sets/location_bricks 34 \r\n6 11 tiles/sets/location_bricks 5 \r\n6 13 tiles/sets/location_bricks 5 \r\n5 13 tiles/sets/location_bricks 4 \r\n5 12 tiles/sets/location_bricks 4 \r\n5 11 tiles/sets/location_bricks 4 \r\n5 10 tiles/sets/location_bricks 47 \r\n6 10 tiles/sets/location_bricks 49 \r\n7 10 tiles/sets/location_bricks 32 \r\n37 14 tiles/sets/location_bricks 4 \r\n37 13 tiles/sets/location_bricks 4 \r\n37 12 tiles/sets/location_bricks 4 \r\n37 11 tiles/sets/location_bricks 4 \r\n37 10 tiles/sets/location_bricks 47 \r\n39 10 tiles/sets/location_bricks 32 \r\n39 11 tiles/sets/location_bricks 34 \r\n39 12 tiles/sets/location_bricks 34 \r\n39 13 tiles/sets/location_bricks 34 \r\n39 14 tiles/sets/location_bricks 34 \r\n38 13 tiles/sets/location_bricks 5 \r\n38 12 tiles/sets/location_bricks 5 \r\n38 11 tiles/sets/location_bricks 5 \r\n38 10 tiles/sets/location_bricks 49 \r\n6 14 tiles/sets/bounce 5 \r\n38 14 tiles/sets/bounce 5 \r\n20 5 tiles/color_cube 13 \r\n20 6 tiles/color_cube 13 \r\n20 7 tiles/color_cube 13 \r\n20 8 tiles/color_cube 13 \r\n20 9 tiles/color_cube 13 \r\n21 9 tiles/color_cube 13 \r\n22 9 tiles/color_cube 13 \r\n23 9 tiles/color_cube 13 \r\n24 9 tiles/color_cube 13 \r\n24 8 tiles/color_cube 13 \r\n24 7 tiles/color_cube 13 \r\n24 6 tiles/color_cube 13 \r\n24 5 tiles/color_cube 13 \r\n23 5 tiles/color_cube 13 \r\n22 5 tiles/color_cube 13 \r\n21 5 tiles/color_cube 13 \r\n20 10 tiles/color_cube 13 \r\n21 10 tiles/color_cube 13 \r\n22 10 tiles/color_cube 13 \r\n23 10 tiles/color_cube 13 \r\n24 10 tiles/color_cube 13 \r\n27 8 tiles/color_cube 13 \r\n27 7 tiles/color_cube 13 \r\n27 6 tiles/color_cube 13 \r\n27 5 tiles/color_cube 13 \r\n27 4 tiles/color_cube 13 \r\n27 3 tiles/color_cube 13 \r\n26 2 tiles/color_cube 13 \r\n17 3 tiles/color_cube 13 \r\n17 4 tiles/color_cube 13 \r\n17 5 tiles/color_cube 13 \r\n17 6 tiles/color_cube 13 \r\n17 7 tiles/color_cube 13 \r\n17 8 tiles/color_cube 13 \r\n18 7 tiles/color_cube 13 \r\n26 7 tiles/color_cube 13 \r\n26 6 tiles/color_cube 13 \r\n26 5 tiles/color_cube 13 \r\n26 4 tiles/color_cube 13 \r\n26 3 tiles/color_cube 13 \r\n25 3 tiles/color_cube 13 \r\n24 3 tiles/color_cube 13 \r\n23 3 tiles/color_cube 13 \r\n22 3 tiles/color_cube 13 \r\n21 3 tiles/color_cube 13 \r\n20 3 tiles/color_cube 13 \r\n19 3 tiles/color_cube 13 \r\n18 6 tiles/color_cube 13 \r\n18 5 tiles/color_cube 13 \r\n18 4 tiles/color_cube 13 \r\n18 3 tiles/color_cube 13 \r\n18 2 tiles/color_cube 13 \r\n19 2 tiles/color_cube 13 \r\n20 2 tiles/color_cube 13 \r\n21 2 tiles/color_cube 13 \r\n22 2 tiles/color_cube 13 \r\n23 2 tiles/color_cube 13 \r\n24 2 tiles/color_cube 13 \r\n25 2 tiles/color_cube 13 \r\n22 7 tiles/color_cube 11 \r\n26 13 tiles/color_cube 13 \r\n26 12 tiles/color_cube 13 \r\n26 11 tiles/color_cube 13 \r\n18 13 tiles/color_cube 13 \r\n18 12 tiles/color_cube 13 \r\n18 11 tiles/color_cube 13 \r\n34 14 tiles/color_cube 6 \r\n34 13 tiles/color_cube 6 \r\n34 12 tiles/color_cube 6 \r\n34 11 tiles/color_cube 6 \r\n35 11 tiles/color_cube 6 \r\n36 11 tiles/color_cube 6 \r\n35 13 tiles/color_cube 6 \r\n35 14 tiles/color_cube 6 \r\n36 14 tiles/color_cube 6 \r\n36 13 tiles/color_cube 6 \r\n36 12 tiles/color_cube 6 \r\n35 12 tiles/color_cube 6 \r\n9 14 tiles/color_cube 6 \r\n8 14 tiles/color_cube 6 \r\n8 13 tiles/color_cube 6 \r\n8 12 tiles/color_cube 6 \r\n10 11 tiles/color_cube 6 \r\n10 12 tiles/color_cube 6 \r\n10 14 tiles/color_cube 6 \r\n10 13 tiles/color_cube 6 \r\n9 13 tiles/color_cube 6 \r\n9 12 tiles/color_cube 6 \r\n9 11 tiles/color_cube 6 \r\n8 11 tiles/color_cube 6 \r\n18 19 tiles/color_cube 13 \r\n18 20 tiles/color_cube 13 \r\n18 21 tiles/color_cube 13 \r\n18 22 tiles/color_cube 13 \r\n18 23 tiles/color_cube 13 \r\n18 24 tiles/color_cube 13 \r\n18 25 tiles/color_cube 13 \r\n18 26 tiles/color_cube 13 \r\n18 27 tiles/color_cube 13 \r\n18 28 tiles/color_cube 13 \r\n18 29 tiles/color_cube 13 \r\n18 30 tiles/color_cube 13 \r\n18 31 tiles/color_cube 13 \r\n18 32 tiles/color_cube 13 \r\n18 33 tiles/color_cube 13 \r\n18 34 tiles/color_cube 13 \r\n18 35 tiles/color_cube 13 \r\n18 36 tiles/color_cube 13 \r\n18 37 tiles/color_cube 13 \r\n18 38 tiles/color_cube 13 \r\n18 39 tiles/color_cube 13 \r\n18 40 tiles/color_cube 13 \r\n18 42 tiles/color_cube 13 \r\n18 48 tiles/color_cube 13 \r\n18 49 tiles/color_cube 13 \r\n18 50 tiles/color_cube 13 \r\n18 51 tiles/color_cube 13 \r\n18 52 tiles/color_cube 13 \r\n18 53 tiles/color_cube 13 \r\n18 54 tiles/color_cube 13 \r\n18 55 tiles/color_cube 13 \r\n18 56 tiles/color_cube 13 \r\n18 57 tiles/color_cube 13 \r\n18 58 tiles/color_cube 13 \r\n18 59 tiles/color_cube 13 \r\n18 60 tiles/color_cube 13 \r\n18 61 tiles/color_cube 13 \r\n18 62 tiles/color_cube 13 \r\n18 63 tiles/color_cube 13 \r\n18 64 tiles/color_cube 13 \r\n18 65 tiles/color_cube 13 \r\n18 66 tiles/color_cube 13 \r\n18 67 tiles/color_cube 13 \r\n26 48 tiles/color_cube 13 \r\n26 49 tiles/color_cube 13 \r\n26 50 tiles/color_cube 13 \r\n26 51 tiles/color_cube 13 \r\n26 52 tiles/color_cube 13 \r\n26 53 tiles/color_cube 13 \r\n26 54 tiles/color_cube 13 \r\n26 55 tiles/color_cube 13 \r\n26 56 tiles/color_cube 13 \r\n26 57 tiles/color_cube 13 \r\n26 58 tiles/color_cube 13 \r\n26 59 tiles/color_cube 13 \r\n26 60 tiles/color_cube 13 \r\n26 61 tiles/color_cube 13 \r\n26 62 tiles/color_cube 13 \r\n26 63 tiles/color_cube 13 \r\n26 64 tiles/color_cube 13 \r\n26 65 tiles/color_cube 13 \r\n26 66 tiles/color_cube 13 \r\n26 67 tiles/color_cube 13 \r\n26 42 tiles/color_cube 13 \r\n26 40 tiles/color_cube 13 \r\n26 39 tiles/color_cube 13 \r\n26 38 tiles/color_cube 13 \r\n26 37 tiles/color_cube 13 \r\n26 36 tiles/color_cube 13 \r\n26 35 tiles/color_cube 13 \r\n26 34 tiles/color_cube 13 \r\n26 33 tiles/color_cube 13 \r\n26 32 tiles/color_cube 13 \r\n26 31 tiles/color_cube 13 \r\n26 30 tiles/color_cube 13 \r\n26 29 tiles/color_cube 13 \r\n26 28 tiles/color_cube 13 \r\n26 27 tiles/color_cube 13 \r\n26 26 tiles/color_cube 13 \r\n26 25 tiles/color_cube 13 \r\n26 24 tiles/color_cube 13 \r\n26 23 tiles/color_cube 13 \r\n26 22 tiles/color_cube 13 \r\n26 21 tiles/color_cube 13 \r\n26 20 tiles/color_cube 13 \r\n26 19 tiles/color_cube 13 \r\n26 18 tiles/color_cube 13 \r\n25 41 tiles/color_cube 13 \r\n26 41 tiles/color_cube 13 \r\n27 41 tiles/color_cube 13 \r\n28 41 tiles/color_cube 13 \r\n29 41 tiles/color_cube 13 \r\n30 41 tiles/color_cube 13 \r\n31 41 tiles/color_cube 13 \r\n32 41 tiles/color_cube 13 \r\n33 41 tiles/color_cube 13 \r\n34 41 tiles/color_cube 13 \r\n35 41 tiles/color_cube 13 \r\n36 41 tiles/color_cube 13 \r\n19 41 tiles/color_cube 13 \r\n18 41 tiles/color_cube 13 \r\n17 41 tiles/color_cube 13 \r\n16 41 tiles/color_cube 13 \r\n15 41 tiles/color_cube 13 \r\n14 41 tiles/color_cube 13 \r\n13 41 tiles/color_cube 13 \r\n12 41 tiles/color_cube 13 \r\n11 41 tiles/color_cube 13 \r\n10 41 tiles/color_cube 13 \r\n9 41 tiles/color_cube 13 \r\n8 41 tiles/color_cube 13 \r\n18 18 tiles/color_cube 13 \r\n17 49 tiles/color_cube 13 \r\n16 49 tiles/color_cube 13 \r\n15 49 tiles/color_cube 13 \r\n14 49 tiles/color_cube 13 \r\n13 49 tiles/color_cube 13 \r\n27 49 tiles/color_cube 13 \r\n28 49 tiles/color_cube 13 \r\n29 49 tiles/color_cube 13 \r\n30 49 tiles/color_cube 13 \r\n31 49 tiles/color_cube 13 \r\n32 49 tiles/color_cube 13 \r\n33 49 tiles/color_cube 13 \r\n34 49 tiles/color_cube 13 \r\n35 49 tiles/color_cube 13 \r\n36 49 tiles/color_cube 13 \r\n25 49 tiles/color_cube 13 \r\n19 49 tiles/color_cube 13 \r\n19 46 tiles/color_cube 11 \r\n19 45 tiles/color_cube 11 \r\n19 44 tiles/color_cube 11 \r\n19 43 tiles/color_cube 11 \r\n20 42 tiles/color_cube 11 \r\n21 42 tiles/color_cube 11 \r\n22 42 tiles/color_cube 11 \r\n23 42 tiles/color_cube 11 \r\n24 42 tiles/color_cube 11 \r\n25 43 tiles/color_cube 11 \r\n25 44 tiles/color_cube 11 \r\n25 45 tiles/color_cube 11 \r\n25 46 tiles/color_cube 11 \r\n23 48 tiles/color_cube 11 \r\n22 48 tiles/color_cube 11 \r\n21 48 tiles/color_cube 11 \r\n25 47 tiles/color_cube 11 \r\n24 48 tiles/color_cube 11 \r\n20 48 tiles/color_cube 11 \r\n19 47 tiles/color_cube 11 \r\n25 48 tiles/color_cube 12 \r\n19 48 tiles/color_cube 12 \r\n19 42 tiles/color_cube 12 \r\n25 42 tiles/color_cube 12 \r\n14 45 tiles/color_cube 1 \r\n15 45 tiles/color_cube 1 \r\n29 45 tiles/color_cube 1 \r\n30 45 tiles/color_cube 1 \r\n22 38 tiles/color_cube 6 \r\n22 37 tiles/color_cube 6 \r\n22 53 tiles/color_cube 0 \r\n22 52 tiles/color_cube 0 \r\n20 49 tiles/color_cube 0 \r\n21 49 tiles/color_cube 0 \r\n22 49 tiles/color_cube 0 \r\n23 49 tiles/color_cube 0 \r\n24 49 tiles/color_cube 0 \r\n26 47 tiles/color_cube 1 \r\n26 46 tiles/color_cube 1 \r\n26 45 tiles/color_cube 1 \r\n26 44 tiles/color_cube 1 \r\n26 43 tiles/color_cube 1 \r\n18 47 tiles/color_cube 1 \r\n18 46 tiles/color_cube 1 \r\n18 45 tiles/color_cube 1 \r\n18 43 tiles/color_cube 1 \r\n18 44 tiles/color_cube 1 \r\n17 45 tiles/color_cube 1 \r\n22 50 tiles/color_cube 0 \r\n22 40 tiles/color_cube 6 \r\n24 41 tiles/color_cube 6 \r\n23 41 tiles/color_cube 6 \r\n22 41 tiles/color_cube 6 \r\n21 41 tiles/color_cube 6 \r\n20 41 tiles/color_cube 6 \r\n10 38 tiles/color_cube 4 \r\n10 33 tiles/color_cube 4 \r\n28 28 tiles/color_cube 4 \r\n27 29 tiles/color_cube 4 \r\n29 31 tiles/color_cube 4 \r\n30 30 tiles/color_cube 4 \r\n30 31 tiles/color_cube 5 \r\n27 28 tiles/color_cube 5 \r\n10 32 tiles/color_cube 5 \r\n10 39 tiles/color_cube 5 \r\n12 36 tiles/color_cube 5 \r\n12 35 tiles/color_cube 5 \r\n8 36 tiles/color_cube 5 \r\n8 35 tiles/color_cube 5 \r\n28 33 tiles/color_cube 5 \r\n29 33 tiles/color_cube 5 \r\n32 30 tiles/color_cube 5 \r\n32 29 tiles/color_cube 5 \r\n29 30 tiles/color_cube 11 \r\n10 37 tiles/color_cube 11 \r\n10 36 tiles/color_cube 11 \r\n10 35 tiles/color_cube 11 \r\n10 34 tiles/color_cube 11 \r\n28 30 tiles/color_cube 11 \r\n28 29 tiles/color_cube 11 \r\n29 29 tiles/color_cube 11 \r\n8 44 tiles/sets/location_bricks 57 \r\n8 45 tiles/sets/location_bricks 34 \r\n8 46 tiles/sets/location_bricks 34 \r\n8 47 tiles/sets/location_bricks 34 \r\n8 48 tiles/sets/location_bricks 17 \r\n8 56 tiles/sets/location_bricks 32 \r\n8 57 tiles/sets/location_bricks 34 \r\n8 58 tiles/sets/location_bricks 34 \r\n8 59 tiles/sets/location_bricks 34 \r\n8 60 tiles/sets/location_bricks 26 \r\n9 44 tiles/sets/location_bricks 18 \r\n9 45 tiles/color_cube 4 \r\n9 46 tiles/color_cube 4 \r\n9 47 tiles/color_cube 4 \r\n9 57 tiles/color_cube 4 \r\n9 58 tiles/color_cube 4 \r\n9 59 tiles/color_cube 4 \r\n9 60 tiles/sets/location_bricks 18 \r\n10 44 tiles/sets/location_bricks 18 \r\n10 45 tiles/color_cube 4 \r\n10 46 tiles/color_cube 4 \r\n10 47 tiles/color_cube 4 \r\n10 48 tiles/color_cube 9 \r\n10 49 tiles/color_cube 9 \r\n10 50 tiles/color_cube 9 \r\n10 51 tiles/color_cube 11 \r\n10 52 tiles/color_cube 11 \r\n10 53 tiles/color_cube 11 \r\n10 54 tiles/color_cube 9 \r\n10 55 tiles/color_cube 9 \r\n10 56 tiles/color_cube 9 \r\n10 57 tiles/color_cube 4 \r\n10 58 tiles/color_cube 4 \r\n10 59 tiles/color_cube 4 \r\n10 60 tiles/sets/location_bricks 18 \r\n11 44 tiles/sets/location_bricks 18 \r\n11 45 tiles/color_cube 4 \r\n11 46 tiles/color_cube 4 \r\n11 47 tiles/color_cube 4 \r\n11 57 tiles/color_cube 4 \r\n11 58 tiles/color_cube 4 \r\n11 59 tiles/color_cube 4 \r\n11 60 tiles/sets/location_bricks 18 \r\n12 44 tiles/sets/location_bricks 44 \r\n12 45 tiles/sets/location_bricks 3 \r\n12 46 tiles/sets/location_bricks 3 \r\n12 47 tiles/sets/location_bricks 3 \r\n12 48 tiles/sets/location_bricks 1 \r\n12 56 tiles/sets/location_bricks 31 \r\n12 57 tiles/sets/location_bricks 3 \r\n12 58 tiles/sets/location_bricks 3 \r\n12 59 tiles/sets/location_bricks 3 \r\n12 60 tiles/sets/location_bricks 29 \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/maps/hyperspace/pinball.map b/assets/maps/hyperspace/pinball.map
--- a/assets/maps/hyperspace/pinball.map	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/assets/maps/hyperspace/pinball.map	(date 1708571415463)
@@ -8,1882 +8,3 @@
 @double_jumping false
 @version 0.1.5
 @wall_sliding false
-39 30 tiles/sets/location_bricks 43 
-39 40 tiles/sets/location_bricks 43 
-38 9 tiles/sets/location_bricks 36 
-37 20 tiles/sets/location_bricks 13 
-39 59 tiles/sets/location_bricks 3 
-14 70 tiles/sets/location_bricks 18 
-38 44 tiles/sets/bounce 18 
-41 25 tiles/sets/location_bricks 3 
-40 25 tiles/color_cube 4 
-41 23 tiles/sets/location_bricks 3 
-24 70 tiles/sets/location_bricks 18 
-23 70 tiles/sets/location_bricks 18 
-39 15 tiles/sets/location_bricks 3 
-41 45 tiles/sets/location_bricks 3 
-41 47 tiles/sets/location_bricks 3 
-21 70 tiles/sets/location_bricks 18 
-41 19 tiles/sets/location_bricks 3 
-41 44 tiles/sets/location_bricks 3 
-38 62 tiles/sets/bounce 18 
-39 33 tiles/sets/location_bricks 3 
-41 46 tiles/sets/location_bricks 3 
-38 20 tiles/sets/bounce 18 
-22 68 tiles/sets/location_bricks 18 
-39 24 tiles/sets/location_bricks 43 
-35 16 tiles/sets/location_bricks 19 
-31 70 tiles/sets/location_bricks 18 
-39 58 tiles/sets/location_bricks 43 
-39 18 tiles/sets/location_bricks 43 
-10 10 tiles/sets/location_bricks 19 
-38 54 tiles/sets/bounce 18 
-29 68 tiles/sets/location_bricks 18 
-19 70 tiles/sets/location_bricks 18 
-41 63 tiles/sets/location_bricks 3 
-40 57 tiles/color_cube 6 
-41 34 tiles/sets/location_bricks 3 
-40 8 tiles/sets/location_bricks 32 
-10 16 tiles/sets/location_bricks 19 
-42 10 tiles/sets/location_bricks 6 
-39 39 tiles/sets/location_bricks 3 
-41 22 tiles/sets/location_bricks 3 
-41 33 tiles/sets/location_bricks 3 
-41 64 tiles/sets/location_bricks 3 
-28 69 tiles/color_cube 5 
-41 24 tiles/sets/location_bricks 3 
-39 63 tiles/sets/location_bricks 3 
-40 47 tiles/color_cube 3 
-31 69 tiles/color_cube 4 
-41 54 tiles/sets/location_bricks 3 
-37 38 tiles/sets/location_bricks 13 
-10 15 tiles/sets/location_bricks 49 
-40 49 tiles/color_cube 3 
-26 70 tiles/sets/location_bricks 18 
-32 69 tiles/color_cube 4 
-33 44 tiles/coin 0 
-23 69 tiles/color_cube 7 
-41 49 tiles/sets/location_bricks 3 
-39 53 tiles/sets/location_bricks 3 
-37 55 tiles/sets/location_bricks 3 
-16 69 tiles/color_cube 0 
-40 22 tiles/color_cube 3 
-16 68 tiles/sets/location_bricks 18 
-41 65 tiles/sets/location_bricks 3 
-24 69 tiles/color_cube 6 
-36 35 tiles/coin 0 
-40 33 tiles/color_cube 7 
-37 24 tiles/sets/location_bricks 39 
-35 10 tiles/sets/location_bricks 19 
-36 9 tiles/sets/location_bricks 49 
-18 52 tiles/sets/location_bricks 17 
-41 20 tiles/sets/location_bricks 3 
-37 48 tiles/sets/location_bricks 13 
-33 42 tiles/sets/location_bricks 32 
-41 62 tiles/sets/location_bricks 3 
-38 22 tiles/sets/bounce 18 
-44 10 tiles/sets/location_bricks 17 
-41 67 tiles/sets/location_bricks 3 
-25 69 tiles/color_cube 6 
-40 68 tiles/color_cube 1 
-40 28 tiles/color_cube 5 
-40 26 tiles/color_cube 5 
-39 46 tiles/sets/location_bricks 43 
-40 66 tiles/color_cube 0 
-41 60 tiles/sets/location_bricks 3 
-38 32 tiles/sets/bounce 18 
-40 34 tiles/color_cube 7 
-38 64 tiles/sets/bounce 18 
-37 33 tiles/sets/location_bricks 3 
-37 34 tiles/sets/location_bricks 13 
-39 16 tiles/sets/location_bricks 43 
-41 41 tiles/sets/location_bricks 3 
-39 26 tiles/sets/location_bricks 43 
-37 18 tiles/sets/location_bricks 13 
-40 15 tiles/color_cube 1 
-39 8 tiles/sets/location_bricks 49 
-37 30 tiles/sets/location_bricks 13 
-39 57 tiles/sets/location_bricks 3 
-37 39 tiles/sets/location_bricks 3 
-38 60 tiles/sets/bounce 18 
-40 39 tiles/color_cube 0 
-39 51 tiles/sets/location_bricks 3 
-38 48 tiles/sets/bounce 18 
-40 30 tiles/color_cube 6 
-20 70 tiles/sets/location_bricks 18 
-41 31 tiles/sets/location_bricks 3 
-40 40 tiles/color_cube 0 
-39 32 tiles/sets/location_bricks 43 
-37 61 tiles/sets/location_bricks 3 
-37 67 tiles/one_way 1 
-40 59 tiles/color_cube 7 
-27 69 tiles/color_cube 5 
-39 36 tiles/sets/location_bricks 43 
-39 35 tiles/sets/location_bricks 3 
-37 47 tiles/sets/location_bricks 3 
-34 52 tiles/coin 0 
-40 58 tiles/color_cube 6 
-38 26 tiles/sets/bounce 18 
-40 44 tiles/color_cube 2 
-41 68 tiles/sets/location_bricks 12 
-39 47 tiles/sets/location_bricks 3 
-40 54 tiles/color_cube 5 
-36 16 tiles/sets/location_bricks 51 
-39 23 tiles/sets/location_bricks 3 
-40 19 tiles/color_cube 2 
-39 70 tiles/sets/location_bricks 49 
-38 42 tiles/sets/bounce 18 
-40 48 tiles/color_cube 3 
-38 52 tiles/sets/bounce 18 
-40 50 tiles/color_cube 4 
-41 39 tiles/sets/location_bricks 3 
-40 24 tiles/color_cube 4 
-41 43 tiles/sets/location_bricks 3 
-33 43 tiles/sets/location_bricks 17 
-37 53 tiles/sets/location_bricks 3 
-38 15 tiles/power_fruit 1 
-39 22 tiles/sets/location_bricks 43 
-37 63 tiles/sets/location_bricks 3 
-22 70 tiles/sets/location_bricks 18 
-41 17 tiles/sets/location_bricks 3 
-28 70 tiles/sets/location_bricks 18 
-44 9 tiles/sets/location_bricks 32 
-39 61 tiles/sets/location_bricks 3 
-39 34 tiles/sets/location_bricks 43 
-41 51 tiles/sets/location_bricks 3 
-41 36 tiles/sets/location_bricks 3 
-37 17 tiles/sets/location_bricks 42 
-17 68 tiles/sets/location_bricks 18 
-38 36 tiles/sets/bounce 18 
-37 40 tiles/sets/location_bricks 13 
-30 70 tiles/sets/location_bricks 18 
-38 50 tiles/sets/bounce 18 
-36 52 tiles/coin 0 
-19 68 tiles/sets/location_bricks 18 
-39 19 tiles/sets/location_bricks 3 
-11 70 tiles/sets/location_bricks 18 
-20 68 tiles/sets/location_bricks 18 
-41 18 tiles/sets/location_bricks 3 
-18 51 tiles/sets/location_bricks 32 
-29 70 tiles/sets/location_bricks 18 
-39 54 tiles/sets/location_bricks 43 
-41 55 tiles/sets/location_bricks 3 
-37 50 tiles/sets/location_bricks 39 
-37 70 tiles/sets/location_bricks 18 
-41 37 tiles/sets/location_bricks 3 
-40 56 tiles/color_cube 6 
-41 40 tiles/sets/location_bricks 3 
-40 17 tiles/color_cube 2 
-40 12 tiles/color_cube 0 
-32 42 tiles/sets/location_bricks 47 
-37 45 tiles/sets/location_bricks 3 
-39 42 tiles/sets/location_bricks 43 
-34 68 tiles/sets/location_bricks 18 
-39 21 tiles/sets/location_bricks 3 
-41 50 tiles/sets/location_bricks 3 
-40 65 tiles/color_cube 0 
-40 21 tiles/color_cube 3 
-41 30 tiles/sets/location_bricks 3 
-41 11 tiles/sets/location_bricks 11 
-10 9 tiles/sets/location_bricks 49 
-40 60 tiles/color_cube 7 
-41 15 tiles/sets/location_bricks 3 
-37 26 tiles/sets/location_bricks 24 
-40 31 tiles/color_cube 6 
-40 70 tiles/sets/location_bricks 57 
-41 42 tiles/sets/location_bricks 3 
-17 52 tiles/sets/location_bricks 2 
-27 70 tiles/sets/location_bricks 18 
-39 69 tiles/color_cube 1 
-40 61 tiles/color_cube 7 
-25 70 tiles/sets/location_bricks 18 
-37 68 tiles/sets/location_bricks 18 
-39 62 tiles/sets/location_bricks 43 
-25 68 tiles/sets/location_bricks 18 
-32 70 tiles/sets/location_bricks 18 
-40 11 tiles/color_cube 0 
-39 17 tiles/sets/location_bricks 3 
-42 9 tiles/sets/location_bricks 49 
-39 29 tiles/sets/location_bricks 3 
-40 18 tiles/color_cube 2 
-39 25 tiles/sets/location_bricks 3 
-37 15 tiles/sets/location_bricks 32 
-37 46 tiles/sets/location_bricks 13 
-35 52 tiles/coin 0 
-40 69 tiles/color_cube 1 
-38 24 tiles/sets/bounce 18 
-20 69 tiles/color_cube 8 
-41 27 tiles/sets/location_bricks 3 
-12 70 tiles/sets/location_bricks 18 
-41 52 tiles/sets/location_bricks 3 
-15 69 tiles/color_cube 0 
-37 57 tiles/sets/location_bricks 3 
-37 29 tiles/sets/location_bricks 3 
-39 45 tiles/sets/location_bricks 3 
-37 52 tiles/sets/location_bricks 13 
-38 40 tiles/sets/bounce 18 
-39 43 tiles/sets/location_bricks 3 
-37 69 tiles/color_cube 2 
-38 68 tiles/sets/location_bricks 18 
-40 52 tiles/color_cube 4 
-11 69 tiles/color_cube 2 
-29 69 tiles/color_cube 5 
-41 12 tiles/sets/location_bricks 3 
-37 10 tiles/sets/location_bricks 19 
-38 58 tiles/sets/bounce 18 
-42 11 tiles/sets/location_bricks 17 
-41 28 tiles/sets/location_bricks 3 
-43 10 tiles/sets/location_bricks 19 
-41 56 tiles/sets/location_bricks 3 
-37 23 tiles/sets/location_bricks 3 
-34 70 tiles/sets/location_bricks 18 
-41 9 tiles/sets/location_bricks 49 
-26 68 tiles/sets/location_bricks 18 
-39 52 tiles/sets/location_bricks 43 
-39 20 tiles/sets/location_bricks 43 
-37 41 tiles/sets/location_bricks 3 
-36 70 tiles/sets/location_bricks 18 
-40 29 tiles/color_cube 6 
-12 69 tiles/color_cube 1 
-40 35 tiles/color_cube 8 
-39 27 tiles/sets/location_bricks 3 
-41 32 tiles/sets/location_bricks 3 
-10 70 tiles/sets/location_bricks 18 
-40 63 tiles/color_cube 8 
-38 30 tiles/sets/bounce 18 
-37 44 tiles/sets/location_bricks 13 
-40 37 tiles/color_cube 8 
-37 35 tiles/sets/location_bricks 3 
-41 61 tiles/sets/location_bricks 3 
-18 68 tiles/sets/location_bricks 18 
-37 9 tiles/sets/location_bricks 49 
-33 69 tiles/color_cube 3 
-37 19 tiles/sets/location_bricks 3 
-35 15 tiles/sets/location_bricks 49 
-26 69 tiles/color_cube 6 
-38 56 tiles/sets/bounce 18 
-18 54 tiles/coin 0 
-40 9 tiles/sets/location_bricks 21 
-37 36 tiles/sets/location_bricks 13 
-40 41 tiles/color_cube 1 
-30 68 tiles/sets/location_bricks 18 
-37 14 tiles/one_way 3 
-35 51 tiles/sets/location_bricks 18 
-41 69 tiles/sets/location_bricks 4 
-15 68 tiles/sets/location_bricks 18 
-12 68 tiles/sets/location_bricks 18 
-11 68 tiles/sets/location_bricks 18 
-39 38 tiles/sets/location_bricks 43 
-40 16 tiles/color_cube 1 
-32 43 tiles/sets/location_bricks 2 
-39 65 tiles/sets/location_bricks 3 
-37 37 tiles/sets/location_bricks 3 
-38 34 tiles/sets/bounce 18 
-40 36 tiles/color_cube 8 
-36 15 tiles/sets/location_bricks 49 
-37 16 tiles/sets/location_bricks 7 
-19 69 tiles/color_cube 8 
-36 36 tiles/coin 0 
-18 70 tiles/sets/location_bricks 18 
-40 67 tiles/color_cube 0 
-40 27 tiles/color_cube 5 
-37 58 tiles/sets/location_bricks 13 
-41 57 tiles/sets/location_bricks 3 
-38 28 tiles/sets/bounce 18 
-40 45 tiles/color_cube 2 
-40 55 tiles/color_cube 5 
-39 31 tiles/sets/location_bricks 3 
-40 46 tiles/color_cube 2 
-41 53 tiles/sets/location_bricks 3 
-32 44 tiles/coin 0 
-24 68 tiles/sets/location_bricks 18 
-40 43 tiles/color_cube 1 
-38 10 tiles/sets/location_bricks 19 
-37 56 tiles/sets/location_bricks 13 
-41 59 tiles/sets/location_bricks 3 
-40 14 tiles/color_cube 1 
-30 69 tiles/color_cube 4 
-14 68 tiles/sets/location_bricks 18 
-36 10 tiles/sets/location_bricks 19 
-33 68 tiles/sets/location_bricks 18 
-41 35 tiles/sets/location_bricks 3 
-37 22 tiles/sets/location_bricks 13 
-37 59 tiles/sets/location_bricks 3 
-36 38 tiles/coin 0 
-21 69 tiles/color_cube 7 
-36 51 tiles/sets/location_bricks 27 
-37 25 tiles/sets/location_bricks 34 
-40 38 tiles/color_cube 0 
-43 9 tiles/sets/location_bricks 49 
-40 13 tiles/color_cube 0 
-39 12 tiles/sets/location_bricks 3 
-41 58 tiles/sets/location_bricks 3 
-34 51 tiles/sets/location_bricks 46 
-13 69 tiles/color_cube 1 
-10 68 tiles/sets/location_bricks 18 
-27 68 tiles/sets/location_bricks 18 
-40 51 tiles/color_cube 4 
-41 48 tiles/sets/location_bricks 3 
-40 64 tiles/color_cube 8 
-39 37 tiles/sets/location_bricks 3 
-16 70 tiles/sets/location_bricks 18 
-39 66 tiles/sets/location_bricks 43 
-17 70 tiles/sets/location_bricks 18 
-39 14 tiles/sets/location_bricks 3 
-37 28 tiles/sets/location_bricks 13 
-36 37 tiles/coin 0 
-39 10 tiles/sets/location_bricks 52 
-35 68 tiles/sets/location_bricks 18 
-14 69 tiles/color_cube 1 
-38 46 tiles/sets/bounce 18 
-35 69 tiles/color_cube 3 
-17 69 tiles/color_cube 0 
-31 68 tiles/sets/location_bricks 18 
-38 70 tiles/sets/location_bricks 56 
-13 70 tiles/sets/location_bricks 18 
-40 53 tiles/color_cube 5 
-37 49 tiles/sets/location_bricks 3 
-39 11 tiles/sets/location_bricks 3 
-40 20 tiles/color_cube 3 
-37 21 tiles/sets/location_bricks 3 
-37 51 tiles/sets/location_bricks 42 
-10 69 tiles/color_cube 2 
-35 9 tiles/sets/location_bricks 49 
-17 51 tiles/sets/location_bricks 47 
-33 70 tiles/sets/location_bricks 18 
-41 10 tiles/sets/location_bricks 51 
-40 62 tiles/color_cube 8 
-38 8 tiles/sets/location_bricks 47 
-39 56 tiles/sets/location_bricks 43 
-36 68 tiles/sets/location_bricks 18 
-40 32 tiles/color_cube 7 
-38 69 tiles/color_cube 2 
-34 69 tiles/color_cube 3 
-39 44 tiles/sets/location_bricks 43 
-36 50 tiles/sets/location_bricks 47 
-41 38 tiles/sets/location_bricks 3 
-18 69 tiles/color_cube 8 
-37 42 tiles/sets/location_bricks 13 
-38 66 tiles/sets/bounce 46 
-38 18 tiles/sets/bounce 18 
-37 65 tiles/sets/location_bricks 1 
-41 14 tiles/sets/location_bricks 3 
-41 21 tiles/sets/location_bricks 3 
-37 32 tiles/sets/location_bricks 13 
-41 66 tiles/sets/location_bricks 3 
-22 69 tiles/color_cube 7 
-37 43 tiles/sets/location_bricks 3 
-39 60 tiles/sets/location_bricks 43 
-37 54 tiles/sets/location_bricks 13 
-37 27 tiles/sets/location_bricks 3 
-38 13 tiles/one_way 2 
-40 23 tiles/color_cube 4 
-39 55 tiles/sets/location_bricks 3 
-39 68 tiles/sets/location_bricks 29 
-39 64 tiles/sets/location_bricks 43 
-39 28 tiles/sets/location_bricks 43 
-13 68 tiles/sets/location_bricks 18 
-37 62 tiles/sets/location_bricks 13 
-39 48 tiles/sets/location_bricks 43 
-41 26 tiles/sets/location_bricks 3 
-21 68 tiles/sets/location_bricks 18 
-39 9 tiles/sets/location_bricks 5 
-41 29 tiles/sets/location_bricks 3 
-35 70 tiles/sets/location_bricks 18 
-15 70 tiles/sets/location_bricks 18 
-41 70 tiles/sets/location_bricks 27 
-17 54 tiles/coin 0 
-23 68 tiles/sets/location_bricks 18 
-28 68 tiles/sets/location_bricks 18 
-38 16 tiles/sets/bounce 18 
-37 31 tiles/sets/location_bricks 3 
-39 41 tiles/sets/location_bricks 3 
-41 16 tiles/sets/location_bricks 3 
-40 42 tiles/color_cube 1 
-37 60 tiles/sets/location_bricks 13 
-39 13 tiles/sets/location_bricks 3 
-40 10 tiles/sets/location_bricks 19 
-36 69 tiles/color_cube 2 
-32 68 tiles/sets/location_bricks 18 
-38 38 tiles/sets/bounce 18 
-37 64 tiles/sets/location_bricks 13 
-39 50 tiles/sets/location_bricks 43 
-41 13 tiles/sets/location_bricks 3 
-39 49 tiles/sets/location_bricks 3 
-40 71 tiles/sets/location_bricks 17 
-39 71 tiles/sets/location_bricks 19 
-38 71 tiles/sets/location_bricks 2 
-42 68 tiles/sets/location_bricks 32 
-42 69 tiles/sets/location_bricks 21 
-42 70 tiles/sets/location_bricks 19 
-43 69 tiles/sets/location_bricks 49 
-43 70 tiles/sets/location_bricks 19 
-44 69 tiles/sets/location_bricks 32 
-44 70 tiles/sets/location_bricks 17 
-37 66 tiles/one_way 1 
-39 67 tiles/sets/location_bricks 3 
-38 67 tiles/slope 3 
-9 10 tiles/sets/location_bricks 19 
-9 68 tiles/sets/location_bricks 18 
-9 70 tiles/sets/location_bricks 18 
-0 9 tiles/sets/location_bricks 47 
-0 10 tiles/sets/location_bricks 2 
-0 69 tiles/sets/location_bricks 47 
-0 70 tiles/sets/location_bricks 2 
-1 9 tiles/sets/location_bricks 49 
-1 10 tiles/sets/location_bricks 19 
-1 69 tiles/sets/location_bricks 49 
-1 70 tiles/sets/location_bricks 19 
-2 9 tiles/sets/location_bricks 49 
-2 10 tiles/sets/location_bricks 51 
-2 11 tiles/sets/location_bricks 2 
-2 68 tiles/sets/location_bricks 47 
-2 69 tiles/sets/location_bricks 36 
-2 70 tiles/sets/location_bricks 19 
-3 9 tiles/sets/location_bricks 49 
-3 10 tiles/sets/location_bricks 6 
-3 11 tiles/sets/location_bricks 42 
-3 12 tiles/sets/location_bricks 3 
-3 13 tiles/sets/location_bricks 3 
-3 14 tiles/sets/location_bricks 3 
-3 15 tiles/sets/location_bricks 3 
-3 16 tiles/sets/location_bricks 3 
-3 17 tiles/sets/location_bricks 3 
-3 18 tiles/sets/location_bricks 3 
-3 19 tiles/sets/location_bricks 3 
-3 20 tiles/sets/location_bricks 3 
-3 21 tiles/sets/location_bricks 3 
-3 22 tiles/sets/location_bricks 3 
-3 23 tiles/sets/location_bricks 3 
-3 24 tiles/sets/location_bricks 3 
-3 25 tiles/sets/location_bricks 3 
-3 26 tiles/sets/location_bricks 3 
-3 27 tiles/sets/location_bricks 3 
-3 28 tiles/sets/location_bricks 3 
-3 29 tiles/sets/location_bricks 3 
-3 30 tiles/sets/location_bricks 3 
-3 31 tiles/sets/location_bricks 3 
-3 32 tiles/sets/location_bricks 3 
-3 33 tiles/sets/location_bricks 3 
-3 34 tiles/sets/location_bricks 3 
-3 35 tiles/sets/location_bricks 3 
-3 36 tiles/sets/location_bricks 3 
-3 37 tiles/sets/location_bricks 3 
-3 38 tiles/sets/location_bricks 3 
-3 39 tiles/sets/location_bricks 3 
-3 40 tiles/sets/location_bricks 3 
-3 41 tiles/sets/location_bricks 3 
-3 42 tiles/sets/location_bricks 3 
-3 43 tiles/sets/location_bricks 3 
-3 44 tiles/sets/location_bricks 3 
-3 45 tiles/sets/location_bricks 3 
-3 46 tiles/sets/location_bricks 3 
-3 47 tiles/sets/location_bricks 3 
-3 48 tiles/sets/location_bricks 3 
-3 49 tiles/sets/location_bricks 3 
-3 50 tiles/sets/location_bricks 3 
-3 51 tiles/sets/location_bricks 3 
-3 52 tiles/sets/location_bricks 3 
-3 53 tiles/sets/location_bricks 3 
-3 54 tiles/sets/location_bricks 3 
-3 55 tiles/sets/location_bricks 3 
-3 56 tiles/sets/location_bricks 3 
-3 57 tiles/sets/location_bricks 3 
-3 58 tiles/sets/location_bricks 3 
-3 59 tiles/sets/location_bricks 3 
-3 60 tiles/sets/location_bricks 3 
-3 61 tiles/sets/location_bricks 3 
-3 62 tiles/sets/location_bricks 3 
-3 63 tiles/sets/location_bricks 3 
-3 64 tiles/sets/location_bricks 3 
-3 65 tiles/sets/location_bricks 3 
-3 66 tiles/sets/location_bricks 3 
-3 67 tiles/sets/location_bricks 3 
-3 68 tiles/sets/location_bricks 41 
-3 69 tiles/sets/location_bricks 34 
-3 70 tiles/sets/location_bricks 26 
-4 8 tiles/sets/location_bricks 47 
-4 9 tiles/sets/location_bricks 36 
-4 10 tiles/sets/location_bricks 19 
-4 70 tiles/sets/location_bricks 56 
-4 71 tiles/sets/location_bricks 2 
-5 8 tiles/sets/location_bricks 49 
-5 9 tiles/sets/location_bricks 5 
-5 10 tiles/sets/location_bricks 52 
-5 11 tiles/sets/location_bricks 3 
-5 12 tiles/sets/location_bricks 3 
-5 13 tiles/sets/location_bricks 3 
-5 14 tiles/sets/location_bricks 3 
-5 15 tiles/sets/location_bricks 3 
-5 16 tiles/sets/location_bricks 13 
-5 17 tiles/sets/location_bricks 3 
-5 18 tiles/sets/location_bricks 13 
-5 19 tiles/sets/location_bricks 3 
-5 20 tiles/sets/location_bricks 13 
-5 21 tiles/sets/location_bricks 3 
-5 22 tiles/sets/location_bricks 13 
-5 23 tiles/sets/location_bricks 3 
-5 24 tiles/sets/location_bricks 13 
-5 25 tiles/sets/location_bricks 3 
-5 26 tiles/sets/location_bricks 13 
-5 27 tiles/sets/location_bricks 3 
-5 28 tiles/sets/location_bricks 13 
-5 29 tiles/sets/location_bricks 3 
-5 30 tiles/sets/location_bricks 13 
-5 31 tiles/sets/location_bricks 3 
-5 32 tiles/sets/location_bricks 13 
-5 33 tiles/sets/location_bricks 3 
-5 34 tiles/sets/location_bricks 13 
-5 35 tiles/sets/location_bricks 3 
-5 36 tiles/sets/location_bricks 13 
-5 37 tiles/sets/location_bricks 3 
-5 38 tiles/sets/location_bricks 13 
-5 39 tiles/sets/location_bricks 3 
-5 40 tiles/sets/location_bricks 13 
-5 41 tiles/sets/location_bricks 3 
-5 42 tiles/sets/location_bricks 13 
-5 43 tiles/sets/location_bricks 3 
-5 44 tiles/sets/location_bricks 13 
-5 45 tiles/sets/location_bricks 3 
-5 46 tiles/sets/location_bricks 13 
-5 47 tiles/sets/location_bricks 3 
-5 48 tiles/sets/location_bricks 13 
-5 49 tiles/sets/location_bricks 3 
-5 50 tiles/sets/location_bricks 13 
-5 51 tiles/sets/location_bricks 3 
-5 52 tiles/sets/location_bricks 13 
-5 53 tiles/sets/location_bricks 3 
-5 54 tiles/sets/location_bricks 13 
-5 55 tiles/sets/location_bricks 3 
-5 56 tiles/sets/location_bricks 13 
-5 57 tiles/sets/location_bricks 3 
-5 58 tiles/sets/location_bricks 13 
-5 59 tiles/sets/location_bricks 3 
-5 60 tiles/sets/location_bricks 13 
-5 61 tiles/sets/location_bricks 3 
-5 62 tiles/sets/location_bricks 13 
-5 63 tiles/sets/location_bricks 3 
-5 64 tiles/sets/location_bricks 13 
-5 65 tiles/sets/location_bricks 3 
-5 66 tiles/sets/location_bricks 13 
-5 67 tiles/sets/location_bricks 3 
-5 68 tiles/sets/location_bricks 14 
-5 70 tiles/sets/location_bricks 49 
-5 71 tiles/sets/location_bricks 19 
-6 8 tiles/sets/location_bricks 32 
-6 9 tiles/sets/location_bricks 21 
-6 10 tiles/sets/location_bricks 19 
-6 13 tiles/one_way 2 
-6 15 tiles/power_fruit 1 
-6 16 tiles/sets/bounce 18 
-6 18 tiles/sets/bounce 18 
-6 20 tiles/sets/bounce 18 
-6 22 tiles/sets/bounce 18 
-6 24 tiles/sets/bounce 18 
-6 26 tiles/sets/bounce 18 
-6 28 tiles/sets/bounce 18 
-6 30 tiles/sets/bounce 18 
-6 32 tiles/sets/bounce 18 
-6 34 tiles/sets/bounce 18 
-6 36 tiles/sets/bounce 18 
-6 38 tiles/sets/bounce 18 
-6 40 tiles/sets/bounce 18 
-6 42 tiles/sets/bounce 18 
-6 44 tiles/sets/bounce 18 
-6 46 tiles/sets/bounce 18 
-6 48 tiles/sets/bounce 18 
-6 50 tiles/sets/bounce 18 
-6 52 tiles/sets/bounce 18 
-6 54 tiles/sets/bounce 18 
-6 56 tiles/sets/bounce 18 
-6 58 tiles/sets/bounce 18 
-6 60 tiles/sets/bounce 18 
-6 62 tiles/sets/bounce 18 
-6 64 tiles/sets/bounce 18 
-6 66 tiles/sets/bounce 16 
-6 67 tiles/slope 2 
-6 68 tiles/sets/location_bricks 18 
-6 70 tiles/sets/location_bricks 57 
-6 71 tiles/sets/location_bricks 17 
-7 10 tiles/sets/location_bricks 19 
-7 14 tiles/one_way 1 
-7 15 tiles/sets/location_bricks 47 
-7 16 tiles/sets/location_bricks 37 
-7 17 tiles/sets/location_bricks 11 
-7 18 tiles/sets/location_bricks 43 
-7 19 tiles/sets/location_bricks 3 
-7 20 tiles/sets/location_bricks 43 
-7 21 tiles/sets/location_bricks 3 
-7 22 tiles/sets/location_bricks 43 
-7 23 tiles/sets/location_bricks 3 
-7 24 tiles/sets/location_bricks 54 
-7 25 tiles/sets/location_bricks 4 
-7 26 tiles/sets/location_bricks 9 
-7 27 tiles/sets/location_bricks 3 
-7 28 tiles/sets/location_bricks 43 
-7 29 tiles/sets/location_bricks 3 
-7 30 tiles/sets/location_bricks 43 
-7 31 tiles/sets/location_bricks 3 
-7 32 tiles/sets/location_bricks 43 
-7 33 tiles/sets/location_bricks 3 
-7 34 tiles/sets/location_bricks 43 
-7 35 tiles/sets/location_bricks 3 
-7 36 tiles/sets/location_bricks 43 
-7 37 tiles/sets/location_bricks 3 
-7 38 tiles/sets/location_bricks 43 
-7 39 tiles/sets/location_bricks 3 
-7 40 tiles/sets/location_bricks 43 
-7 41 tiles/sets/location_bricks 3 
-7 42 tiles/sets/location_bricks 43 
-7 43 tiles/sets/location_bricks 3 
-7 44 tiles/sets/location_bricks 43 
-7 45 tiles/sets/location_bricks 3 
-7 46 tiles/sets/location_bricks 43 
-7 47 tiles/sets/location_bricks 3 
-7 48 tiles/sets/location_bricks 54 
-7 49 tiles/sets/location_bricks 4 
-7 50 tiles/sets/location_bricks 37 
-7 51 tiles/sets/location_bricks 4 
-7 52 tiles/sets/location_bricks 37 
-7 53 tiles/sets/location_bricks 4 
-7 54 tiles/sets/location_bricks 37 
-7 55 tiles/sets/location_bricks 4 
-7 56 tiles/sets/location_bricks 9 
-7 57 tiles/sets/location_bricks 3 
-7 58 tiles/sets/location_bricks 43 
-7 59 tiles/sets/location_bricks 3 
-7 60 tiles/sets/location_bricks 43 
-7 61 tiles/sets/location_bricks 3 
-7 62 tiles/sets/location_bricks 43 
-7 63 tiles/sets/location_bricks 3 
-7 64 tiles/sets/location_bricks 43 
-7 65 tiles/sets/location_bricks 1 
-7 66 tiles/one_way 3 
-7 67 tiles/one_way 3 
-7 68 tiles/sets/location_bricks 18 
-7 70 tiles/sets/location_bricks 18 
-9 69 tiles/color_cube 2 
-8 69 tiles/color_cube 3 
-7 69 tiles/color_cube 3 
-6 69 tiles/color_cube 3 
-5 69 tiles/color_cube 4 
-4 69 tiles/color_cube 4 
-4 67 tiles/color_cube 5 
-4 66 tiles/color_cube 5 
-4 64 tiles/color_cube 6 
-4 63 tiles/color_cube 6 
-4 61 tiles/color_cube 7 
-4 60 tiles/color_cube 7 
-4 59 tiles/color_cube 7 
-4 68 tiles/color_cube 4 
-4 65 tiles/color_cube 5 
-4 62 tiles/color_cube 6 
-4 58 tiles/color_cube 8 
-4 57 tiles/color_cube 8 
-4 56 tiles/color_cube 8 
-4 55 tiles/color_cube 0 
-4 54 tiles/color_cube 0 
-4 52 tiles/color_cube 1 
-4 51 tiles/color_cube 1 
-4 50 tiles/color_cube 1 
-4 53 tiles/color_cube 0 
-4 49 tiles/color_cube 2 
-4 48 tiles/color_cube 2 
-4 47 tiles/color_cube 2 
-4 46 tiles/color_cube 3 
-4 45 tiles/color_cube 3 
-4 44 tiles/color_cube 3 
-4 43 tiles/color_cube 4 
-4 42 tiles/color_cube 4 
-4 41 tiles/color_cube 4 
-4 40 tiles/color_cube 5 
-4 39 tiles/color_cube 5 
-4 38 tiles/color_cube 5 
-4 37 tiles/color_cube 6 
-4 36 tiles/color_cube 6 
-4 35 tiles/color_cube 6 
-4 34 tiles/color_cube 7 
-4 33 tiles/color_cube 7 
-4 32 tiles/color_cube 7 
-4 29 tiles/color_cube 8 
-4 30 tiles/color_cube 8 
-4 31 tiles/color_cube 8 
-4 26 tiles/color_cube 0 
-4 27 tiles/color_cube 0 
-4 28 tiles/color_cube 0 
-4 25 tiles/color_cube 1 
-4 24 tiles/color_cube 1 
-4 23 tiles/color_cube 1 
-4 22 tiles/color_cube 2 
-4 21 tiles/color_cube 2 
-4 20 tiles/color_cube 2 
-4 19 tiles/color_cube 3 
-4 18 tiles/color_cube 3 
-4 17 tiles/color_cube 3 
-4 16 tiles/color_cube 4 
-4 15 tiles/color_cube 4 
-4 14 tiles/color_cube 4 
-4 13 tiles/color_cube 5 
-4 12 tiles/color_cube 5 
-4 11 tiles/color_cube 5 
-7 9 tiles/sets/location_bricks 49 
-9 9 tiles/sets/location_bricks 49 
-8 9 tiles/sets/location_bricks 49 
-8 10 tiles/sets/location_bricks 19 
-8 70 tiles/sets/location_bricks 18 
-8 68 tiles/sets/location_bricks 18 
-16 45 tiles/coin 0 
-17 45 tiles/coin 0 
-18 44 tiles/coin 0 
-18 45 tiles/coin 0 
-18 46 tiles/coin 0 
-20 43 tiles/sets/location_bricks 59 
-20 44 tiles/sets/location_bricks 3 
-20 45 tiles/sets/location_bricks 3 
-20 46 tiles/sets/location_bricks 3 
-20 47 tiles/sets/location_bricks 14 
-21 41 tiles/coin 0 
-21 43 tiles/sets/location_bricks 18 
-21 44 tiles/color_cube 0 
-21 45 tiles/color_cube 0 
-21 46 tiles/color_cube 0 
-21 47 tiles/sets/location_bricks 18 
-22 40 tiles/coin 0 
-22 41 tiles/coin 0 
-22 43 tiles/sets/location_bricks 18 
-22 44 tiles/color_cube 14 
-22 45 tiles/color_cube 0 
-22 46 tiles/color_cube 14 
-22 47 tiles/sets/location_bricks 18 
-23 41 tiles/coin 0 
-23 43 tiles/sets/location_bricks 18 
-23 44 tiles/color_cube 0 
-23 45 tiles/color_cube 0 
-23 46 tiles/color_cube 0 
-23 47 tiles/sets/location_bricks 18 
-24 43 tiles/sets/location_bricks 44 
-24 44 tiles/sets/location_bricks 3 
-24 45 tiles/sets/location_bricks 3 
-24 46 tiles/sets/location_bricks 3 
-24 47 tiles/sets/location_bricks 29 
-26 44 tiles/coin 0 
-26 45 tiles/coin 0 
-26 46 tiles/coin 0 
-27 45 tiles/coin 0 
-28 45 tiles/coin 0 
-8 15 tiles/sets/location_bricks 49 
-8 16 tiles/sets/location_bricks 6 
-9 15 tiles/sets/location_bricks 49 
-9 16 tiles/sets/location_bricks 19 
-11 9 tiles/sets/location_bricks 49 
-11 10 tiles/sets/location_bricks 19 
-11 11 tiles/one_way 1 
-11 12 tiles/one_way 1 
-11 13 tiles/one_way 1 
-11 14 tiles/one_way 1 
-11 15 tiles/sets/location_bricks 49 
-11 16 tiles/sets/location_bricks 19 
-12 9 tiles/sets/location_bricks 49 
-12 10 tiles/sets/location_bricks 19 
-12 11 tiles/color_cube 6 
-12 12 tiles/color_cube 6 
-12 13 tiles/color_cube 6 
-12 14 tiles/color_cube 6 
-12 15 tiles/sets/location_bricks 49 
-12 16 tiles/sets/location_bricks 19 
-13 9 tiles/sets/location_bricks 49 
-13 10 tiles/sets/location_bricks 19 
-13 11 tiles/color_cube 6 
-13 12 tiles/color_cube 6 
-13 13 tiles/color_cube 6 
-13 14 tiles/color_cube 6 
-13 15 tiles/sets/location_bricks 49 
-13 16 tiles/sets/location_bricks 19 
-14 2 tiles/sets/location_bricks 2 
-14 8 tiles/sets/location_bricks 47 
-14 9 tiles/sets/location_bricks 36 
-14 10 tiles/sets/location_bricks 19 
-14 11 tiles/color_cube 6 
-14 12 tiles/color_cube 6 
-14 13 tiles/color_cube 6 
-14 14 tiles/color_cube 6 
-14 15 tiles/sets/location_bricks 49 
-14 16 tiles/sets/location_bricks 19 
-15 0 tiles/sets/location_bricks 47 
-15 2 tiles/sets/location_bricks 51 
-15 3 tiles/sets/location_bricks 4 
-15 4 tiles/sets/location_bricks 4 
-15 5 tiles/sets/location_bricks 4 
-15 6 tiles/sets/location_bricks 4 
-15 7 tiles/sets/location_bricks 4 
-15 8 tiles/sets/location_bricks 36 
-15 9 tiles/sets/location_bricks 5 
-15 10 tiles/sets/location_bricks 19 
-15 11 tiles/color_cube 6 
-15 12 tiles/color_cube 6 
-15 13 tiles/color_cube 6 
-15 14 tiles/color_cube 6 
-15 15 tiles/sets/location_bricks 49 
-15 16 tiles/sets/location_bricks 19 
-16 0 tiles/sets/location_bricks 32 
-16 2 tiles/sets/location_bricks 6 
-16 3 tiles/sets/location_bricks 34 
-16 4 tiles/sets/location_bricks 34 
-16 5 tiles/sets/location_bricks 34 
-16 6 tiles/sets/location_bricks 34 
-16 7 tiles/sets/location_bricks 34 
-16 8 tiles/sets/location_bricks 34 
-16 9 tiles/sets/location_bricks 21 
-16 10 tiles/sets/location_bricks 19 
-16 11 tiles/color_cube 6 
-16 12 tiles/color_cube 6 
-16 13 tiles/color_cube 6 
-16 14 tiles/color_cube 6 
-16 15 tiles/sets/location_bricks 49 
-16 16 tiles/sets/location_bricks 19 
-16 18 tiles/sets/bounce 47 
-16 19 tiles/sets/bounce 2 
-17 2 tiles/sets/location_bricks 17 
-17 9 tiles/sets/location_bricks 49 
-17 10 tiles/sets/location_bricks 19 
-17 13 tiles/color_cube 6 
-17 15 tiles/sets/location_bricks 49 
-17 16 tiles/sets/location_bricks 51 
-17 17 tiles/sets/bounce 4 
-17 18 tiles/sets/bounce 8 
-17 19 tiles/sets/bounce 17 
-18 1 tiles/sets/location_bricks 18 
-18 8 tiles/sets/location_bricks 47 
-18 9 tiles/sets/location_bricks 36 
-18 10 tiles/sets/location_bricks 19 
-18 14 tiles/color_cube 2 
-18 15 tiles/sets/location_bricks 49 
-18 16 tiles/sets/bounce 5 
-18 17 tiles/sets/bounce 6 
-18 18 tiles/sets/bounce 17 
-19 1 tiles/sets/location_bricks 18 
-19 4 tiles/sets/location_bricks 59 
-19 5 tiles/sets/location_bricks 3 
-19 6 tiles/sets/location_bricks 3 
-19 7 tiles/sets/location_bricks 3 
-19 8 tiles/sets/location_bricks 41 
-19 9 tiles/sets/location_bricks 34 
-19 10 tiles/sets/location_bricks 17 
-19 11 tiles/color_cube 6 
-19 12 tiles/color_cube 6 
-19 13 tiles/color_cube 6 
-19 15 tiles/sets/location_bricks 32 
-19 17 tiles/sets/bounce 17 
-20 1 tiles/sets/location_bricks 18 
-20 4 tiles/sets/location_bricks 18 
-20 10 tiles/coin_box 0 
-20 15 tiles/one_way 0 
-21 1 tiles/sets/location_bricks 18 
-21 4 tiles/sets/location_bricks 18 
-21 10 tiles/coin_box 0 
-21 15 tiles/one_way 0 
-22 1 tiles/sets/location_bricks 18 
-22 4 tiles/sets/location_bricks 18 
-22 7 tiles/end 0 
-22 10 tiles/coin_box 0 
-22 11 tiles/spawn 0 
-22 15 tiles/one_way 0 
-23 1 tiles/sets/location_bricks 18 
-23 4 tiles/sets/location_bricks 18 
-23 10 tiles/coin_box 0 
-23 15 tiles/one_way 0 
-24 1 tiles/sets/location_bricks 18 
-24 4 tiles/sets/location_bricks 18 
-24 10 tiles/coin_box 0 
-24 15 tiles/one_way 0 
-25 1 tiles/sets/location_bricks 18 
-25 4 tiles/sets/location_bricks 44 
-25 5 tiles/sets/location_bricks 3 
-25 6 tiles/sets/location_bricks 3 
-25 7 tiles/sets/location_bricks 3 
-25 8 tiles/sets/location_bricks 12 
-25 9 tiles/sets/location_bricks 4 
-25 10 tiles/sets/location_bricks 2 
-25 11 tiles/color_cube 6 
-25 12 tiles/color_cube 6 
-25 13 tiles/color_cube 6 
-25 15 tiles/sets/location_bricks 47 
-25 17 tiles/sets/bounce 2 
-26 1 tiles/sets/location_bricks 18 
-26 8 tiles/sets/location_bricks 32 
-26 9 tiles/sets/location_bricks 21 
-26 10 tiles/sets/location_bricks 19 
-26 14 tiles/color_cube 2 
-26 15 tiles/sets/location_bricks 49 
-26 16 tiles/sets/bounce 5 
-26 17 tiles/sets/bounce 51 
-26 18 tiles/sets/bounce 2 
-27 1 tiles/sets/location_bricks 56 
-27 2 tiles/sets/location_bricks 2 
-27 9 tiles/sets/location_bricks 49 
-27 10 tiles/sets/location_bricks 19 
-27 11 tiles/color_cube 6 
-27 12 tiles/color_cube 6 
-27 13 tiles/color_cube 6 
-27 15 tiles/sets/location_bricks 49 
-27 16 tiles/sets/location_bricks 6 
-27 17 tiles/sets/bounce 34 
-27 18 tiles/sets/bounce 23 
-27 19 tiles/sets/bounce 2 
-28 0 tiles/sets/location_bricks 47 
-28 1 tiles/sets/location_bricks 36 
-28 2 tiles/sets/location_bricks 51 
-28 3 tiles/sets/location_bricks 4 
-28 4 tiles/sets/location_bricks 4 
-28 5 tiles/sets/location_bricks 4 
-28 6 tiles/sets/location_bricks 4 
-28 7 tiles/sets/location_bricks 4 
-28 8 tiles/sets/location_bricks 4 
-28 9 tiles/sets/location_bricks 36 
-28 10 tiles/sets/location_bricks 19 
-28 11 tiles/color_cube 6 
-28 12 tiles/color_cube 6 
-28 13 tiles/color_cube 6 
-28 14 tiles/color_cube 6 
-28 15 tiles/sets/location_bricks 49 
-28 16 tiles/sets/location_bricks 19 
-28 18 tiles/sets/bounce 32 
-28 19 tiles/sets/bounce 17 
-29 0 tiles/sets/location_bricks 32 
-29 1 tiles/sets/location_bricks 21 
-29 2 tiles/sets/location_bricks 6 
-29 3 tiles/sets/location_bricks 34 
-29 4 tiles/sets/location_bricks 34 
-29 5 tiles/sets/location_bricks 34 
-29 6 tiles/sets/location_bricks 34 
-29 7 tiles/sets/location_bricks 34 
-29 8 tiles/sets/location_bricks 21 
-29 9 tiles/sets/location_bricks 5 
-29 10 tiles/sets/location_bricks 19 
-29 11 tiles/color_cube 6 
-29 12 tiles/color_cube 6 
-29 13 tiles/color_cube 6 
-29 14 tiles/color_cube 6 
-29 15 tiles/sets/location_bricks 49 
-29 16 tiles/sets/location_bricks 19 
-30 1 tiles/sets/location_bricks 32 
-30 2 tiles/sets/location_bricks 17 
-30 8 tiles/sets/location_bricks 32 
-30 9 tiles/sets/location_bricks 21 
-30 10 tiles/sets/location_bricks 19 
-30 11 tiles/color_cube 6 
-30 12 tiles/color_cube 6 
-30 13 tiles/color_cube 6 
-30 14 tiles/color_cube 6 
-30 15 tiles/sets/location_bricks 49 
-30 16 tiles/sets/location_bricks 19 
-31 9 tiles/sets/location_bricks 49 
-31 10 tiles/sets/location_bricks 19 
-31 11 tiles/color_cube 6 
-31 12 tiles/color_cube 6 
-31 13 tiles/color_cube 6 
-31 14 tiles/color_cube 6 
-31 15 tiles/sets/location_bricks 49 
-31 16 tiles/sets/location_bricks 19 
-32 9 tiles/sets/location_bricks 49 
-32 10 tiles/sets/location_bricks 19 
-32 11 tiles/color_cube 6 
-32 12 tiles/color_cube 6 
-32 13 tiles/color_cube 6 
-32 14 tiles/color_cube 6 
-32 15 tiles/sets/location_bricks 49 
-32 16 tiles/sets/location_bricks 19 
-33 9 tiles/sets/location_bricks 49 
-33 10 tiles/sets/location_bricks 19 
-33 11 tiles/one_way 3 
-33 12 tiles/one_way 3 
-33 13 tiles/one_way 3 
-33 14 tiles/one_way 3 
-33 15 tiles/sets/location_bricks 49 
-33 16 tiles/sets/location_bricks 19 
-34 16 tiles/sets/location_bricks 19 
-34 15 tiles/sets/location_bricks 49 
-34 10 tiles/sets/location_bricks 19 
-34 9 tiles/sets/location_bricks 49 
-25 16 tiles/sets/bounce 4 
-19 16 tiles/sets/bounce 34 
-28 29 tiles/coin 0 
-28 30 tiles/coin 0 
-29 29 tiles/coin 0 
-29 30 tiles/coin 0 
-35 26 tiles/sets/bounce 2 
-36 25 tiles/sets/bounce 36 
-36 26 tiles/sets/bounce 19 
-16 35 tiles/sets/location_bricks 47 
-16 36 tiles/sets/location_bricks 2 
-17 35 tiles/sets/location_bricks 49 
-17 36 tiles/sets/location_bricks 19 
-17 37 tiles/coin 0 
-18 35 tiles/sets/location_bricks 57 
-19 34 tiles/sets/location_bricks 47 
-19 35 tiles/sets/location_bricks 27 
-20 34 tiles/sets/location_bricks 32 
-20 35 tiles/sets/location_bricks 17 
-24 34 tiles/sets/location_bricks 47 
-24 35 tiles/sets/location_bricks 2 
-25 34 tiles/sets/location_bricks 32 
-25 35 tiles/sets/location_bricks 26 
-26 35 tiles/sets/location_bricks 56 
-27 35 tiles/sets/location_bricks 49 
-27 36 tiles/sets/location_bricks 19 
-27 37 tiles/coin 0 
-28 35 tiles/sets/location_bricks 32 
-28 36 tiles/sets/location_bricks 17 
-22 39 tiles/coin 0 
-10 34 tiles/coin 0 
-10 35 tiles/coin 0 
-10 36 tiles/coin 0 
-10 37 tiles/coin 0 
-11 39 tiles/sets/location_bricks 59 
-11 40 tiles/sets/location_bricks 3 
-11 41 tiles/sets/location_bricks 14 
-12 39 tiles/sets/location_bricks 18 
-12 40 tiles/color_cube 6 
-12 41 tiles/sets/location_bricks 18 
-13 39 tiles/sets/location_bricks 44 
-13 40 tiles/sets/location_bricks 3 
-13 41 tiles/sets/location_bricks 29 
-23 8 tiles/color_cube 13 
-22 8 tiles/color_cube 13 
-21 8 tiles/color_cube 13 
-21 7 tiles/color_cube 13 
-21 6 tiles/color_cube 13 
-22 6 tiles/color_cube 13 
-23 6 tiles/color_cube 13 
-23 7 tiles/color_cube 13 
-17 12 tiles/color_cube 6 
-17 11 tiles/color_cube 6 
-17 14 tiles/color_cube 6 
-19 14 tiles/color_cube 6 
-25 14 tiles/color_cube 6 
-27 14 tiles/color_cube 6 
-18 36 tiles/sets/location_bricks 17 
-26 36 tiles/sets/location_bricks 2 
-21 49 tiles/coin 0 
-22 50 tiles/coin 0 
-22 51 tiles/coin 0 
-23 49 tiles/coin 0 
-22 49 tiles/coin 0 
-8 17 tiles/sets/location_bricks 17 
-36 17 tiles/sets/location_bricks 2 
-11 63 tiles/sets/location_bricks 31 
-11 64 tiles/sets/location_bricks 14 
-12 62 tiles/sets/location_bricks 46 
-12 63 tiles/color_cube 2 
-12 64 tiles/sets/location_bricks 16 
-13 62 tiles/sets/location_bricks 44 
-13 63 tiles/sets/location_bricks 1 
-8 48 tiles/sets/location_bricks 49 
-8 49 tiles/sets/location_bricks 5 
-8 50 tiles/sets/location_bricks 5 
-8 51 tiles/sets/location_bricks 5 
-8 52 tiles/sets/location_bricks 5 
-8 53 tiles/sets/location_bricks 5 
-8 54 tiles/sets/location_bricks 5 
-8 55 tiles/sets/location_bricks 5 
-8 56 tiles/sets/location_bricks 19 
-9 48 tiles/sets/location_bricks 32 
-9 49 tiles/sets/location_bricks 34 
-9 50 tiles/sets/location_bricks 34 
-9 51 tiles/sets/location_bricks 34 
-9 52 tiles/sets/location_bricks 34 
-9 53 tiles/sets/location_bricks 34 
-9 54 tiles/sets/location_bricks 34 
-9 55 tiles/sets/location_bricks 34 
-9 56 tiles/sets/location_bricks 17 
-10 49 tiles/coin 0 
-10 50 tiles/coin 0 
-10 51 tiles/coin 0 
-10 52 tiles/coin 0 
-10 53 tiles/coin 0 
-10 54 tiles/coin 0 
-10 55 tiles/coin 0 
-11 48 tiles/sets/location_bricks 47 
-11 49 tiles/sets/location_bricks 4 
-11 50 tiles/sets/location_bricks 4 
-11 51 tiles/sets/location_bricks 4 
-11 52 tiles/sets/location_bricks 4 
-11 53 tiles/sets/location_bricks 4 
-11 54 tiles/sets/location_bricks 4 
-11 55 tiles/sets/location_bricks 4 
-11 56 tiles/sets/location_bricks 2 
-12 48 tiles/sets/location_bricks 32 
-12 49 tiles/sets/location_bricks 34 
-12 50 tiles/sets/location_bricks 34 
-12 51 tiles/sets/location_bricks 34 
-12 52 tiles/sets/location_bricks 34 
-12 53 tiles/sets/location_bricks 34 
-12 54 tiles/sets/location_bricks 34 
-12 55 tiles/sets/location_bricks 34 
-12 56 tiles/sets/location_bricks 17 
-30 49 tiles/coin 0 
-30 50 tiles/coin 0 
-30 51 tiles/coin 0 
-30 52 tiles/coin 0 
-25 56 tiles/sets/location_bricks 0 
-27 57 tiles/coin 0 
-27 62 tiles/sets/location_bricks 0 
-28 60 tiles/coin 0 
-29 58 tiles/sets/location_bricks 0 
-30 56 tiles/coin 0 
-31 54 tiles/sets/location_bricks 0 
-31 59 tiles/coin 0 
-33 60 tiles/sets/location_bricks 0 
-18 60 tiles/sets/location_bricks 47 
-18 61 tiles/sets/location_bricks 2 
-18 62 tiles/coin 0 
-19 60 tiles/sets/location_bricks 49 
-19 61 tiles/sets/location_bricks 19 
-19 62 tiles/coin 0 
-20 60 tiles/sets/location_bricks 49 
-20 61 tiles/sets/location_bricks 19 
-20 62 tiles/coin 0 
-21 60 tiles/sets/location_bricks 32 
-21 61 tiles/sets/location_bricks 17 
-21 62 tiles/coin 0 
-13 27 tiles/sets/location_bricks 31 
-13 28 tiles/sets/location_bricks 14 
-14 26 tiles/sets/location_bricks 0 
-14 27 tiles/color_cube 2 
-14 28 tiles/sets/location_bricks 16 
-15 25 tiles/sets/location_bricks 46 
-15 26 tiles/color_cube 2 
-15 27 tiles/sets/location_bricks 0 
-15 30 tiles/coin 0 
-16 25 tiles/sets/location_bricks 44 
-16 26 tiles/sets/location_bricks 1 
-16 29 tiles/coin 0 
-17 28 tiles/coin 0 
-18 27 tiles/coin 0 
-8 25 tiles/sets/bounce 21 
-8 26 tiles/sets/bounce 19 
-9 26 tiles/sets/bounce 17 
-9 25 tiles/sets/bounce 32 
-8 24 tiles/sets/bounce 32 
-35 25 tiles/sets/bounce 47 
-36 24 tiles/sets/bounce 47 
-30 25 tiles/sets/location_bricks 59 
-30 26 tiles/sets/location_bricks 3 
-30 27 tiles/sets/location_bricks 14 
-31 25 tiles/sets/location_bricks 18 
-31 26 tiles/color_cube 6 
-31 27 tiles/sets/location_bricks 18 
-32 25 tiles/sets/location_bricks 44 
-32 26 tiles/sets/location_bricks 3 
-32 27 tiles/sets/location_bricks 29 
-14 1 tiles/sets/location_bricks 47 
-15 1 tiles/sets/location_bricks 36 
-16 1 tiles/sets/location_bricks 21 
-17 1 tiles/sets/location_bricks 57 
-@background_tiles
-38 16 tiles/sets/bounce 5 
-38 17 tiles/sets/bounce 5 
-38 18 tiles/sets/bounce 5 
-38 19 tiles/sets/bounce 5 
-38 20 tiles/sets/bounce 5 
-38 21 tiles/sets/bounce 5 
-38 22 tiles/sets/bounce 5 
-38 23 tiles/sets/bounce 5 
-38 24 tiles/sets/bounce 5 
-38 25 tiles/sets/bounce 5 
-38 26 tiles/sets/bounce 5 
-38 27 tiles/sets/bounce 5 
-38 28 tiles/sets/bounce 5 
-38 29 tiles/sets/bounce 5 
-38 30 tiles/sets/bounce 5 
-38 31 tiles/sets/bounce 5 
-38 32 tiles/sets/bounce 5 
-38 33 tiles/sets/bounce 5 
-38 34 tiles/sets/bounce 5 
-38 35 tiles/sets/bounce 5 
-38 36 tiles/sets/bounce 5 
-38 37 tiles/sets/bounce 5 
-38 38 tiles/sets/bounce 5 
-38 39 tiles/sets/bounce 5 
-38 40 tiles/sets/bounce 5 
-38 41 tiles/sets/bounce 5 
-38 42 tiles/sets/bounce 5 
-38 43 tiles/sets/bounce 5 
-38 44 tiles/sets/bounce 5 
-38 45 tiles/sets/bounce 5 
-38 46 tiles/sets/bounce 5 
-38 47 tiles/sets/bounce 5 
-38 48 tiles/sets/bounce 5 
-38 49 tiles/sets/bounce 5 
-38 50 tiles/sets/bounce 5 
-38 51 tiles/sets/bounce 5 
-38 52 tiles/sets/bounce 5 
-38 53 tiles/sets/bounce 5 
-38 54 tiles/sets/bounce 5 
-38 55 tiles/sets/bounce 5 
-38 56 tiles/sets/bounce 5 
-38 57 tiles/sets/bounce 5 
-38 58 tiles/sets/bounce 5 
-38 59 tiles/sets/bounce 5 
-38 60 tiles/sets/bounce 5 
-38 61 tiles/sets/bounce 5 
-38 62 tiles/sets/bounce 5 
-38 63 tiles/sets/bounce 5 
-38 64 tiles/sets/bounce 5 
-38 65 tiles/sets/bounce 5 
-38 66 tiles/sets/bounce 5 
-38 67 tiles/sets/bounce 19 
-37 67 tiles/sets/location_bricks 2 
-37 66 tiles/sets/location_bricks 4 
-37 65 tiles/sets/location_bricks 4 
-37 64 tiles/sets/location_bricks 4 
-37 63 tiles/sets/location_bricks 4 
-37 62 tiles/sets/location_bricks 4 
-37 61 tiles/sets/location_bricks 4 
-37 60 tiles/sets/location_bricks 4 
-37 59 tiles/sets/location_bricks 4 
-37 58 tiles/sets/location_bricks 4 
-37 57 tiles/sets/location_bricks 4 
-37 56 tiles/sets/location_bricks 4 
-37 55 tiles/sets/location_bricks 4 
-37 54 tiles/sets/location_bricks 4 
-37 53 tiles/sets/location_bricks 4 
-37 52 tiles/sets/location_bricks 4 
-37 51 tiles/sets/location_bricks 4 
-37 50 tiles/sets/location_bricks 4 
-37 49 tiles/sets/location_bricks 4 
-37 48 tiles/sets/location_bricks 4 
-37 47 tiles/sets/location_bricks 4 
-37 46 tiles/sets/location_bricks 4 
-37 45 tiles/sets/location_bricks 4 
-37 44 tiles/sets/location_bricks 4 
-37 43 tiles/sets/location_bricks 4 
-37 42 tiles/sets/location_bricks 4 
-37 41 tiles/sets/location_bricks 4 
-37 40 tiles/sets/location_bricks 4 
-37 39 tiles/sets/location_bricks 4 
-37 38 tiles/sets/location_bricks 4 
-37 37 tiles/sets/location_bricks 4 
-37 36 tiles/sets/location_bricks 4 
-37 35 tiles/sets/location_bricks 4 
-37 34 tiles/sets/location_bricks 4 
-37 33 tiles/sets/location_bricks 4 
-37 32 tiles/sets/location_bricks 4 
-37 31 tiles/sets/location_bricks 4 
-37 30 tiles/sets/location_bricks 4 
-37 29 tiles/sets/location_bricks 4 
-37 28 tiles/sets/location_bricks 4 
-37 27 tiles/sets/location_bricks 4 
-37 26 tiles/sets/location_bricks 4 
-37 25 tiles/sets/location_bricks 4 
-37 24 tiles/sets/location_bricks 4 
-37 23 tiles/sets/location_bricks 4 
-37 22 tiles/sets/location_bricks 4 
-37 21 tiles/sets/location_bricks 4 
-37 20 tiles/sets/location_bricks 4 
-37 19 tiles/sets/location_bricks 4 
-37 18 tiles/sets/location_bricks 4 
-37 17 tiles/sets/location_bricks 4 
-37 16 tiles/sets/location_bricks 4 
-37 15 tiles/sets/location_bricks 4 
-39 15 tiles/sets/location_bricks 34 
-39 16 tiles/sets/location_bricks 34 
-39 17 tiles/sets/location_bricks 34 
-39 18 tiles/sets/location_bricks 34 
-39 19 tiles/sets/location_bricks 34 
-39 20 tiles/sets/location_bricks 34 
-39 21 tiles/sets/location_bricks 34 
-39 22 tiles/sets/location_bricks 34 
-39 23 tiles/sets/location_bricks 34 
-39 24 tiles/sets/location_bricks 34 
-39 25 tiles/sets/location_bricks 34 
-39 26 tiles/sets/location_bricks 34 
-39 27 tiles/sets/location_bricks 34 
-39 28 tiles/sets/location_bricks 34 
-39 29 tiles/sets/location_bricks 34 
-39 30 tiles/sets/location_bricks 34 
-39 31 tiles/sets/location_bricks 34 
-39 32 tiles/sets/location_bricks 34 
-39 33 tiles/sets/location_bricks 34 
-39 34 tiles/sets/location_bricks 34 
-39 35 tiles/sets/location_bricks 34 
-39 36 tiles/sets/location_bricks 34 
-39 37 tiles/sets/location_bricks 34 
-39 38 tiles/sets/location_bricks 34 
-39 39 tiles/sets/location_bricks 34 
-39 40 tiles/sets/location_bricks 34 
-39 41 tiles/sets/location_bricks 34 
-39 42 tiles/sets/location_bricks 34 
-39 43 tiles/sets/location_bricks 34 
-39 44 tiles/sets/location_bricks 34 
-39 45 tiles/sets/location_bricks 34 
-39 46 tiles/sets/location_bricks 34 
-39 47 tiles/sets/location_bricks 34 
-39 48 tiles/sets/location_bricks 34 
-39 49 tiles/sets/location_bricks 34 
-39 50 tiles/sets/location_bricks 34 
-39 51 tiles/sets/location_bricks 34 
-39 52 tiles/sets/location_bricks 34 
-39 53 tiles/sets/location_bricks 34 
-39 54 tiles/sets/location_bricks 34 
-39 55 tiles/sets/location_bricks 34 
-39 56 tiles/sets/location_bricks 34 
-39 57 tiles/sets/location_bricks 34 
-39 58 tiles/sets/location_bricks 34 
-39 59 tiles/sets/location_bricks 34 
-39 60 tiles/sets/location_bricks 34 
-39 61 tiles/sets/location_bricks 34 
-39 62 tiles/sets/location_bricks 34 
-39 63 tiles/sets/location_bricks 34 
-39 64 tiles/sets/location_bricks 34 
-39 65 tiles/sets/location_bricks 34 
-39 66 tiles/sets/location_bricks 34 
-39 67 tiles/sets/location_bricks 17 
-38 15 tiles/sets/bounce 5 
-5 15 tiles/sets/location_bricks 4 
-5 16 tiles/sets/location_bricks 4 
-5 17 tiles/sets/location_bricks 4 
-5 18 tiles/sets/location_bricks 4 
-5 19 tiles/sets/location_bricks 4 
-5 20 tiles/sets/location_bricks 4 
-5 21 tiles/sets/location_bricks 4 
-5 22 tiles/sets/location_bricks 4 
-5 23 tiles/sets/location_bricks 4 
-5 24 tiles/sets/location_bricks 4 
-5 25 tiles/sets/location_bricks 4 
-5 26 tiles/sets/location_bricks 4 
-5 27 tiles/sets/location_bricks 4 
-5 28 tiles/sets/location_bricks 4 
-5 29 tiles/sets/location_bricks 4 
-5 30 tiles/sets/location_bricks 4 
-5 31 tiles/sets/location_bricks 4 
-5 32 tiles/sets/location_bricks 4 
-5 33 tiles/sets/location_bricks 4 
-5 34 tiles/sets/location_bricks 4 
-5 35 tiles/sets/location_bricks 4 
-5 36 tiles/sets/location_bricks 4 
-5 37 tiles/sets/location_bricks 4 
-5 38 tiles/sets/location_bricks 4 
-5 39 tiles/sets/location_bricks 4 
-5 40 tiles/sets/location_bricks 4 
-5 41 tiles/sets/location_bricks 4 
-5 42 tiles/sets/location_bricks 4 
-5 43 tiles/sets/location_bricks 4 
-5 44 tiles/sets/location_bricks 4 
-5 45 tiles/sets/location_bricks 4 
-5 46 tiles/sets/location_bricks 4 
-5 47 tiles/sets/location_bricks 4 
-5 48 tiles/sets/location_bricks 4 
-5 49 tiles/sets/location_bricks 4 
-5 50 tiles/sets/location_bricks 4 
-5 51 tiles/sets/location_bricks 4 
-5 52 tiles/sets/location_bricks 4 
-5 53 tiles/sets/location_bricks 4 
-5 54 tiles/sets/location_bricks 4 
-5 55 tiles/sets/location_bricks 4 
-5 56 tiles/sets/location_bricks 4 
-5 57 tiles/sets/location_bricks 4 
-5 58 tiles/sets/location_bricks 4 
-5 59 tiles/sets/location_bricks 4 
-5 60 tiles/sets/location_bricks 4 
-5 61 tiles/sets/location_bricks 4 
-5 62 tiles/sets/location_bricks 4 
-5 63 tiles/sets/location_bricks 4 
-5 64 tiles/sets/location_bricks 4 
-5 65 tiles/sets/location_bricks 4 
-5 66 tiles/sets/location_bricks 4 
-5 67 tiles/sets/location_bricks 2 
-6 15 tiles/sets/bounce 5 
-6 16 tiles/sets/bounce 5 
-6 17 tiles/sets/bounce 5 
-6 18 tiles/sets/bounce 5 
-6 19 tiles/sets/bounce 5 
-6 20 tiles/sets/bounce 5 
-6 21 tiles/sets/bounce 5 
-6 22 tiles/sets/bounce 5 
-6 23 tiles/sets/bounce 5 
-6 24 tiles/sets/bounce 5 
-6 25 tiles/sets/bounce 5 
-6 26 tiles/sets/bounce 5 
-6 27 tiles/sets/bounce 5 
-6 28 tiles/sets/bounce 5 
-6 29 tiles/sets/bounce 5 
-6 30 tiles/sets/bounce 5 
-6 31 tiles/sets/bounce 5 
-6 32 tiles/sets/bounce 5 
-6 33 tiles/sets/bounce 5 
-6 34 tiles/sets/bounce 5 
-6 35 tiles/sets/bounce 5 
-6 36 tiles/sets/bounce 5 
-6 37 tiles/sets/bounce 5 
-6 38 tiles/sets/bounce 5 
-6 39 tiles/sets/bounce 5 
-6 40 tiles/sets/bounce 5 
-6 41 tiles/sets/bounce 5 
-6 42 tiles/sets/bounce 5 
-6 43 tiles/sets/bounce 5 
-6 44 tiles/sets/bounce 5 
-6 45 tiles/sets/bounce 5 
-6 46 tiles/sets/bounce 5 
-6 47 tiles/sets/bounce 5 
-6 48 tiles/sets/bounce 5 
-6 49 tiles/sets/bounce 5 
-6 50 tiles/sets/bounce 5 
-6 51 tiles/sets/bounce 5 
-6 52 tiles/sets/bounce 5 
-6 53 tiles/sets/bounce 5 
-6 54 tiles/sets/bounce 5 
-6 55 tiles/sets/bounce 5 
-6 56 tiles/sets/bounce 5 
-6 57 tiles/sets/bounce 5 
-6 58 tiles/sets/bounce 5 
-6 59 tiles/sets/bounce 5 
-6 60 tiles/sets/bounce 5 
-6 61 tiles/sets/bounce 5 
-6 62 tiles/sets/bounce 5 
-6 63 tiles/sets/bounce 5 
-6 64 tiles/sets/bounce 5 
-6 65 tiles/sets/bounce 5 
-6 66 tiles/sets/bounce 5 
-6 67 tiles/sets/bounce 19 
-7 15 tiles/sets/location_bricks 34 
-7 16 tiles/sets/location_bricks 34 
-7 17 tiles/sets/location_bricks 34 
-7 18 tiles/sets/location_bricks 34 
-7 19 tiles/sets/location_bricks 34 
-7 20 tiles/sets/location_bricks 34 
-7 21 tiles/sets/location_bricks 34 
-7 22 tiles/sets/location_bricks 34 
-7 23 tiles/sets/location_bricks 34 
-7 24 tiles/sets/location_bricks 34 
-7 25 tiles/sets/location_bricks 34 
-7 26 tiles/sets/location_bricks 34 
-7 27 tiles/sets/location_bricks 34 
-7 28 tiles/sets/location_bricks 34 
-7 29 tiles/sets/location_bricks 34 
-7 30 tiles/sets/location_bricks 34 
-7 31 tiles/sets/location_bricks 34 
-7 32 tiles/sets/location_bricks 34 
-7 33 tiles/sets/location_bricks 34 
-7 34 tiles/sets/location_bricks 34 
-7 35 tiles/sets/location_bricks 34 
-7 36 tiles/sets/location_bricks 34 
-7 37 tiles/sets/location_bricks 34 
-7 38 tiles/sets/location_bricks 34 
-7 39 tiles/sets/location_bricks 34 
-7 40 tiles/sets/location_bricks 34 
-7 41 tiles/sets/location_bricks 34 
-7 42 tiles/sets/location_bricks 34 
-7 43 tiles/sets/location_bricks 34 
-7 44 tiles/sets/location_bricks 21 
-7 45 tiles/sets/location_bricks 5 
-7 46 tiles/sets/location_bricks 5 
-7 47 tiles/sets/location_bricks 5 
-7 48 tiles/sets/location_bricks 6 
-7 49 tiles/sets/location_bricks 34 
-7 50 tiles/sets/location_bricks 34 
-7 51 tiles/sets/location_bricks 34 
-7 52 tiles/sets/location_bricks 34 
-7 53 tiles/sets/location_bricks 34 
-7 54 tiles/sets/location_bricks 34 
-7 55 tiles/sets/location_bricks 34 
-7 56 tiles/sets/location_bricks 21 
-7 57 tiles/sets/location_bricks 5 
-7 58 tiles/sets/location_bricks 5 
-7 59 tiles/sets/location_bricks 5 
-7 60 tiles/sets/location_bricks 6 
-7 61 tiles/sets/location_bricks 34 
-7 62 tiles/sets/location_bricks 34 
-7 63 tiles/sets/location_bricks 34 
-7 64 tiles/sets/location_bricks 34 
-7 65 tiles/sets/location_bricks 34 
-7 66 tiles/sets/location_bricks 34 
-7 67 tiles/sets/location_bricks 17 
-16 45 tiles/color_cube 1 
-22 39 tiles/color_cube 6 
-22 51 tiles/color_cube 0 
-27 45 tiles/color_cube 1 
-28 45 tiles/color_cube 1 
-7 14 tiles/sets/location_bricks 34 
-5 14 tiles/sets/location_bricks 4 
-7 13 tiles/sets/location_bricks 34 
-6 12 tiles/sets/location_bricks 5 
-7 12 tiles/sets/location_bricks 34 
-7 11 tiles/sets/location_bricks 34 
-6 11 tiles/sets/location_bricks 5 
-6 13 tiles/sets/location_bricks 5 
-5 13 tiles/sets/location_bricks 4 
-5 12 tiles/sets/location_bricks 4 
-5 11 tiles/sets/location_bricks 4 
-5 10 tiles/sets/location_bricks 47 
-6 10 tiles/sets/location_bricks 49 
-7 10 tiles/sets/location_bricks 32 
-37 14 tiles/sets/location_bricks 4 
-37 13 tiles/sets/location_bricks 4 
-37 12 tiles/sets/location_bricks 4 
-37 11 tiles/sets/location_bricks 4 
-37 10 tiles/sets/location_bricks 47 
-39 10 tiles/sets/location_bricks 32 
-39 11 tiles/sets/location_bricks 34 
-39 12 tiles/sets/location_bricks 34 
-39 13 tiles/sets/location_bricks 34 
-39 14 tiles/sets/location_bricks 34 
-38 13 tiles/sets/location_bricks 5 
-38 12 tiles/sets/location_bricks 5 
-38 11 tiles/sets/location_bricks 5 
-38 10 tiles/sets/location_bricks 49 
-6 14 tiles/sets/bounce 5 
-38 14 tiles/sets/bounce 5 
-20 5 tiles/color_cube 13 
-20 6 tiles/color_cube 13 
-20 7 tiles/color_cube 13 
-20 8 tiles/color_cube 13 
-20 9 tiles/color_cube 13 
-21 9 tiles/color_cube 13 
-22 9 tiles/color_cube 13 
-23 9 tiles/color_cube 13 
-24 9 tiles/color_cube 13 
-24 8 tiles/color_cube 13 
-24 7 tiles/color_cube 13 
-24 6 tiles/color_cube 13 
-24 5 tiles/color_cube 13 
-23 5 tiles/color_cube 13 
-22 5 tiles/color_cube 13 
-21 5 tiles/color_cube 13 
-20 10 tiles/color_cube 13 
-21 10 tiles/color_cube 13 
-22 10 tiles/color_cube 13 
-23 10 tiles/color_cube 13 
-24 10 tiles/color_cube 13 
-27 8 tiles/color_cube 13 
-27 7 tiles/color_cube 13 
-27 6 tiles/color_cube 13 
-27 5 tiles/color_cube 13 
-27 4 tiles/color_cube 13 
-27 3 tiles/color_cube 13 
-26 2 tiles/color_cube 13 
-17 3 tiles/color_cube 13 
-17 4 tiles/color_cube 13 
-17 5 tiles/color_cube 13 
-17 6 tiles/color_cube 13 
-17 7 tiles/color_cube 13 
-17 8 tiles/color_cube 13 
-18 7 tiles/color_cube 13 
-26 7 tiles/color_cube 13 
-26 6 tiles/color_cube 13 
-26 5 tiles/color_cube 13 
-26 4 tiles/color_cube 13 
-26 3 tiles/color_cube 13 
-25 3 tiles/color_cube 13 
-24 3 tiles/color_cube 13 
-23 3 tiles/color_cube 13 
-22 3 tiles/color_cube 13 
-21 3 tiles/color_cube 13 
-20 3 tiles/color_cube 13 
-19 3 tiles/color_cube 13 
-18 6 tiles/color_cube 13 
-18 5 tiles/color_cube 13 
-18 4 tiles/color_cube 13 
-18 3 tiles/color_cube 13 
-18 2 tiles/color_cube 13 
-19 2 tiles/color_cube 13 
-20 2 tiles/color_cube 13 
-21 2 tiles/color_cube 13 
-22 2 tiles/color_cube 13 
-23 2 tiles/color_cube 13 
-24 2 tiles/color_cube 13 
-25 2 tiles/color_cube 13 
-22 7 tiles/color_cube 11 
-26 13 tiles/color_cube 13 
-26 12 tiles/color_cube 13 
-26 11 tiles/color_cube 13 
-18 13 tiles/color_cube 13 
-18 12 tiles/color_cube 13 
-18 11 tiles/color_cube 13 
-34 14 tiles/color_cube 6 
-34 13 tiles/color_cube 6 
-34 12 tiles/color_cube 6 
-34 11 tiles/color_cube 6 
-35 11 tiles/color_cube 6 
-36 11 tiles/color_cube 6 
-35 13 tiles/color_cube 6 
-35 14 tiles/color_cube 6 
-36 14 tiles/color_cube 6 
-36 13 tiles/color_cube 6 
-36 12 tiles/color_cube 6 
-35 12 tiles/color_cube 6 
-9 14 tiles/color_cube 6 
-8 14 tiles/color_cube 6 
-8 13 tiles/color_cube 6 
-8 12 tiles/color_cube 6 
-10 11 tiles/color_cube 6 
-10 12 tiles/color_cube 6 
-10 14 tiles/color_cube 6 
-10 13 tiles/color_cube 6 
-9 13 tiles/color_cube 6 
-9 12 tiles/color_cube 6 
-9 11 tiles/color_cube 6 
-8 11 tiles/color_cube 6 
-18 19 tiles/color_cube 13 
-18 20 tiles/color_cube 13 
-18 21 tiles/color_cube 13 
-18 22 tiles/color_cube 13 
-18 23 tiles/color_cube 13 
-18 24 tiles/color_cube 13 
-18 25 tiles/color_cube 13 
-18 26 tiles/color_cube 13 
-18 27 tiles/color_cube 13 
-18 28 tiles/color_cube 13 
-18 29 tiles/color_cube 13 
-18 30 tiles/color_cube 13 
-18 31 tiles/color_cube 13 
-18 32 tiles/color_cube 13 
-18 33 tiles/color_cube 13 
-18 34 tiles/color_cube 13 
-18 35 tiles/color_cube 13 
-18 36 tiles/color_cube 13 
-18 37 tiles/color_cube 13 
-18 38 tiles/color_cube 13 
-18 39 tiles/color_cube 13 
-18 40 tiles/color_cube 13 
-18 42 tiles/color_cube 13 
-18 48 tiles/color_cube 13 
-18 49 tiles/color_cube 13 
-18 50 tiles/color_cube 13 
-18 51 tiles/color_cube 13 
-18 52 tiles/color_cube 13 
-18 53 tiles/color_cube 13 
-18 54 tiles/color_cube 13 
-18 55 tiles/color_cube 13 
-18 56 tiles/color_cube 13 
-18 57 tiles/color_cube 13 
-18 58 tiles/color_cube 13 
-18 59 tiles/color_cube 13 
-18 60 tiles/color_cube 13 
-18 61 tiles/color_cube 13 
-18 62 tiles/color_cube 13 
-18 63 tiles/color_cube 13 
-18 64 tiles/color_cube 13 
-18 65 tiles/color_cube 13 
-18 66 tiles/color_cube 13 
-18 67 tiles/color_cube 13 
-26 48 tiles/color_cube 13 
-26 49 tiles/color_cube 13 
-26 50 tiles/color_cube 13 
-26 51 tiles/color_cube 13 
-26 52 tiles/color_cube 13 
-26 53 tiles/color_cube 13 
-26 54 tiles/color_cube 13 
-26 55 tiles/color_cube 13 
-26 56 tiles/color_cube 13 
-26 57 tiles/color_cube 13 
-26 58 tiles/color_cube 13 
-26 59 tiles/color_cube 13 
-26 60 tiles/color_cube 13 
-26 61 tiles/color_cube 13 
-26 62 tiles/color_cube 13 
-26 63 tiles/color_cube 13 
-26 64 tiles/color_cube 13 
-26 65 tiles/color_cube 13 
-26 66 tiles/color_cube 13 
-26 67 tiles/color_cube 13 
-26 42 tiles/color_cube 13 
-26 40 tiles/color_cube 13 
-26 39 tiles/color_cube 13 
-26 38 tiles/color_cube 13 
-26 37 tiles/color_cube 13 
-26 36 tiles/color_cube 13 
-26 35 tiles/color_cube 13 
-26 34 tiles/color_cube 13 
-26 33 tiles/color_cube 13 
-26 32 tiles/color_cube 13 
-26 31 tiles/color_cube 13 
-26 30 tiles/color_cube 13 
-26 29 tiles/color_cube 13 
-26 28 tiles/color_cube 13 
-26 27 tiles/color_cube 13 
-26 26 tiles/color_cube 13 
-26 25 tiles/color_cube 13 
-26 24 tiles/color_cube 13 
-26 23 tiles/color_cube 13 
-26 22 tiles/color_cube 13 
-26 21 tiles/color_cube 13 
-26 20 tiles/color_cube 13 
-26 19 tiles/color_cube 13 
-26 18 tiles/color_cube 13 
-25 41 tiles/color_cube 13 
-26 41 tiles/color_cube 13 
-27 41 tiles/color_cube 13 
-28 41 tiles/color_cube 13 
-29 41 tiles/color_cube 13 
-30 41 tiles/color_cube 13 
-31 41 tiles/color_cube 13 
-32 41 tiles/color_cube 13 
-33 41 tiles/color_cube 13 
-34 41 tiles/color_cube 13 
-35 41 tiles/color_cube 13 
-36 41 tiles/color_cube 13 
-19 41 tiles/color_cube 13 
-18 41 tiles/color_cube 13 
-17 41 tiles/color_cube 13 
-16 41 tiles/color_cube 13 
-15 41 tiles/color_cube 13 
-14 41 tiles/color_cube 13 
-13 41 tiles/color_cube 13 
-12 41 tiles/color_cube 13 
-11 41 tiles/color_cube 13 
-10 41 tiles/color_cube 13 
-9 41 tiles/color_cube 13 
-8 41 tiles/color_cube 13 
-18 18 tiles/color_cube 13 
-17 49 tiles/color_cube 13 
-16 49 tiles/color_cube 13 
-15 49 tiles/color_cube 13 
-14 49 tiles/color_cube 13 
-13 49 tiles/color_cube 13 
-27 49 tiles/color_cube 13 
-28 49 tiles/color_cube 13 
-29 49 tiles/color_cube 13 
-30 49 tiles/color_cube 13 
-31 49 tiles/color_cube 13 
-32 49 tiles/color_cube 13 
-33 49 tiles/color_cube 13 
-34 49 tiles/color_cube 13 
-35 49 tiles/color_cube 13 
-36 49 tiles/color_cube 13 
-25 49 tiles/color_cube 13 
-19 49 tiles/color_cube 13 
-19 46 tiles/color_cube 11 
-19 45 tiles/color_cube 11 
-19 44 tiles/color_cube 11 
-19 43 tiles/color_cube 11 
-20 42 tiles/color_cube 11 
-21 42 tiles/color_cube 11 
-22 42 tiles/color_cube 11 
-23 42 tiles/color_cube 11 
-24 42 tiles/color_cube 11 
-25 43 tiles/color_cube 11 
-25 44 tiles/color_cube 11 
-25 45 tiles/color_cube 11 
-25 46 tiles/color_cube 11 
-23 48 tiles/color_cube 11 
-22 48 tiles/color_cube 11 
-21 48 tiles/color_cube 11 
-25 47 tiles/color_cube 11 
-24 48 tiles/color_cube 11 
-20 48 tiles/color_cube 11 
-19 47 tiles/color_cube 11 
-25 48 tiles/color_cube 12 
-19 48 tiles/color_cube 12 
-19 42 tiles/color_cube 12 
-25 42 tiles/color_cube 12 
-14 45 tiles/color_cube 1 
-15 45 tiles/color_cube 1 
-29 45 tiles/color_cube 1 
-30 45 tiles/color_cube 1 
-22 38 tiles/color_cube 6 
-22 37 tiles/color_cube 6 
-22 53 tiles/color_cube 0 
-22 52 tiles/color_cube 0 
-20 49 tiles/color_cube 0 
-21 49 tiles/color_cube 0 
-22 49 tiles/color_cube 0 
-23 49 tiles/color_cube 0 
-24 49 tiles/color_cube 0 
-26 47 tiles/color_cube 1 
-26 46 tiles/color_cube 1 
-26 45 tiles/color_cube 1 
-26 44 tiles/color_cube 1 
-26 43 tiles/color_cube 1 
-18 47 tiles/color_cube 1 
-18 46 tiles/color_cube 1 
-18 45 tiles/color_cube 1 
-18 43 tiles/color_cube 1 
-18 44 tiles/color_cube 1 
-17 45 tiles/color_cube 1 
-22 50 tiles/color_cube 0 
-22 40 tiles/color_cube 6 
-24 41 tiles/color_cube 6 
-23 41 tiles/color_cube 6 
-22 41 tiles/color_cube 6 
-21 41 tiles/color_cube 6 
-20 41 tiles/color_cube 6 
-10 38 tiles/color_cube 4 
-10 33 tiles/color_cube 4 
-28 28 tiles/color_cube 4 
-27 29 tiles/color_cube 4 
-29 31 tiles/color_cube 4 
-30 30 tiles/color_cube 4 
-30 31 tiles/color_cube 5 
-27 28 tiles/color_cube 5 
-10 32 tiles/color_cube 5 
-10 39 tiles/color_cube 5 
-12 36 tiles/color_cube 5 
-12 35 tiles/color_cube 5 
-8 36 tiles/color_cube 5 
-8 35 tiles/color_cube 5 
-28 33 tiles/color_cube 5 
-29 33 tiles/color_cube 5 
-32 30 tiles/color_cube 5 
-32 29 tiles/color_cube 5 
-29 30 tiles/color_cube 11 
-10 37 tiles/color_cube 11 
-10 36 tiles/color_cube 11 
-10 35 tiles/color_cube 11 
-10 34 tiles/color_cube 11 
-28 30 tiles/color_cube 11 
-28 29 tiles/color_cube 11 
-29 29 tiles/color_cube 11 
-8 44 tiles/sets/location_bricks 57 
-8 45 tiles/sets/location_bricks 34 
-8 46 tiles/sets/location_bricks 34 
-8 47 tiles/sets/location_bricks 34 
-8 48 tiles/sets/location_bricks 17 
-8 56 tiles/sets/location_bricks 32 
-8 57 tiles/sets/location_bricks 34 
-8 58 tiles/sets/location_bricks 34 
-8 59 tiles/sets/location_bricks 34 
-8 60 tiles/sets/location_bricks 26 
-9 44 tiles/sets/location_bricks 18 
-9 45 tiles/color_cube 4 
-9 46 tiles/color_cube 4 
-9 47 tiles/color_cube 4 
-9 57 tiles/color_cube 4 
-9 58 tiles/color_cube 4 
-9 59 tiles/color_cube 4 
-9 60 tiles/sets/location_bricks 18 
-10 44 tiles/sets/location_bricks 18 
-10 45 tiles/color_cube 4 
-10 46 tiles/color_cube 4 
-10 47 tiles/color_cube 4 
-10 48 tiles/color_cube 9 
-10 49 tiles/color_cube 9 
-10 50 tiles/color_cube 9 
-10 51 tiles/color_cube 11 
-10 52 tiles/color_cube 11 
-10 53 tiles/color_cube 11 
-10 54 tiles/color_cube 9 
-10 55 tiles/color_cube 9 
-10 56 tiles/color_cube 9 
-10 57 tiles/color_cube 4 
-10 58 tiles/color_cube 4 
-10 59 tiles/color_cube 4 
-10 60 tiles/sets/location_bricks 18 
-11 44 tiles/sets/location_bricks 18 
-11 45 tiles/color_cube 4 
-11 46 tiles/color_cube 4 
-11 47 tiles/color_cube 4 
-11 57 tiles/color_cube 4 
-11 58 tiles/color_cube 4 
-11 59 tiles/color_cube 4 
-11 60 tiles/sets/location_bricks 18 
-12 44 tiles/sets/location_bricks 44 
-12 45 tiles/sets/location_bricks 3 
-12 46 tiles/sets/location_bricks 3 
-12 47 tiles/sets/location_bricks 3 
-12 48 tiles/sets/location_bricks 1 
-12 56 tiles/sets/location_bricks 31 
-12 57 tiles/sets/location_bricks 3 
-12 58 tiles/sets/location_bricks 3 
-12 59 tiles/sets/location_bricks 3 
-12 60 tiles/sets/location_bricks 29 
Index: maps/test.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@crouching true\r\n@look_around true\r\n@is_deluxe true\r\n@time_limit -1\r\n@author AshQuimby\r\n@background cold_mountains\r\n@name Test\r\n@double_jumping true\r\n@wall_sliding true\r\n@version 0.1.5\r\n40 4 tiles/sets/stone 19 \r\n41 4 tiles/sets/stone 19 \r\n42 4 tiles/sets/stone 19 \r\n43 4 tiles/sets/stone 19 \r\n44 4 tiles/sets/stone 19 \r\n45 4 tiles/sets/stone 19 \r\n46 4 tiles/sets/stone 19 \r\n47 4 tiles/sets/stone 19 \r\n48 4 tiles/sets/stone 19 \r\n49 4 tiles/sets/stone 19 \r\n50 4 tiles/sets/stone 19 \r\n51 4 tiles/sets/stone 19 \r\n52 4 tiles/sets/stone 51 \r\n53 4 tiles/sets/stone 5 \r\n54 4 tiles/sets/stone 5 \r\n55 4 tiles/sets/stone 5 \r\n56 4 tiles/sets/stone 5 \r\n57 4 tiles/sets/stone 5 \r\n58 4 tiles/sets/stone 5 \r\n59 4 tiles/sets/stone 5 \r\n60 4 tiles/sets/stone 5 \r\n61 4 tiles/sets/stone 5 \r\n62 4 tiles/sets/stone 5 \r\n63 4 tiles/sets/stone 5 \r\n64 4 tiles/sets/stone 5 \r\n65 4 tiles/sets/stone 6 \r\n66 4 tiles/sets/stone 17 \r\n66 3 tiles/sets/stone 32 \r\n65 3 tiles/sets/stone 21 \r\n64 3 tiles/sets/stone 5 \r\n63 3 tiles/sets/stone 5 \r\n62 3 tiles/sets/stone 5 \r\n61 3 tiles/sets/stone 5 \r\n60 3 tiles/sets/stone 5 \r\n59 3 tiles/sets/stone 5 \r\n58 3 tiles/sets/stone 5 \r\n57 3 tiles/sets/stone 5 \r\n56 3 tiles/sets/stone 5 \r\n55 3 tiles/sets/stone 5 \r\n54 3 tiles/sets/stone 5 \r\n53 3 tiles/sets/stone 5 \r\n52 3 tiles/sets/stone 5 \r\n51 3 tiles/sets/stone 5 \r\n50 3 tiles/sets/stone 5 \r\n49 3 tiles/sets/stone 5 \r\n48 3 tiles/sets/stone 5 \r\n47 3 tiles/sets/stone 5 \r\n46 3 tiles/sets/stone 5 \r\n45 3 tiles/sets/stone 5 \r\n44 3 tiles/sets/stone 5 \r\n43 3 tiles/sets/stone 5 \r\n42 3 tiles/sets/stone 5 \r\n40 3 tiles/sets/stone 49 \r\n41 3 tiles/sets/stone 36 \r\n41 2 tiles/sets/stone 47 \r\n42 2 tiles/sets/stone 49 \r\n43 2 tiles/sets/stone 49 \r\n44 2 tiles/sets/stone 36 \r\n45 2 tiles/sets/stone 5 \r\n46 2 tiles/sets/stone 5 \r\n47 2 tiles/sets/stone 5 \r\n48 2 tiles/sets/stone 5 \r\n49 2 tiles/sets/stone 5 \r\n50 2 tiles/sets/stone 5 \r\n51 2 tiles/sets/stone 5 \r\n52 2 tiles/sets/stone 5 \r\n53 2 tiles/sets/stone 5 \r\n54 2 tiles/sets/stone 5 \r\n55 2 tiles/sets/stone 5 \r\n56 2 tiles/sets/stone 5 \r\n57 2 tiles/sets/stone 5 \r\n58 2 tiles/sets/stone 5 \r\n59 2 tiles/sets/stone 5 \r\n60 2 tiles/sets/stone 5 \r\n61 2 tiles/sets/stone 5 \r\n63 2 tiles/sets/stone 49 \r\n64 2 tiles/sets/stone 49 \r\n65 2 tiles/sets/stone 32 \r\n62 2 tiles/sets/stone 21 \r\n62 1 tiles/sets/stone 32 \r\n61 1 tiles/sets/stone 49 \r\n60 1 tiles/sets/stone 49 \r\n59 1 tiles/sets/stone 49 \r\n58 1 tiles/sets/stone 21 \r\n57 1 tiles/sets/stone 5 \r\n56 1 tiles/sets/stone 5 \r\n55 1 tiles/sets/stone 5 \r\n54 1 tiles/sets/stone 5 \r\n53 1 tiles/sets/stone 5 \r\n52 1 tiles/sets/stone 5 \r\n51 1 tiles/sets/stone 5 \r\n50 1 tiles/sets/stone 5 \r\n49 1 tiles/sets/stone 5 \r\n47 1 tiles/sets/stone 49 \r\n46 1 tiles/sets/stone 49 \r\n45 1 tiles/sets/stone 49 \r\n44 1 tiles/sets/stone 47 \r\n48 1 tiles/sets/stone 36 \r\n48 0 tiles/sets/stone 47 \r\n49 0 tiles/sets/stone 49 \r\n50 0 tiles/sets/stone 49 \r\n51 0 tiles/sets/stone 49 \r\n52 0 tiles/sets/stone 49 \r\n53 0 tiles/sets/stone 49 \r\n54 0 tiles/sets/stone 49 \r\n55 0 tiles/sets/stone 49 \r\n56 0 tiles/sets/stone 49 \r\n57 0 tiles/sets/stone 49 \r\n58 0 tiles/sets/stone 32 \r\n43 5 tiles/spawn 0 \r\n44 6 tiles/power_fruit 1 \r\n51 5 tiles/slope 0 \r\n52 5 tiles/sets/stone 2 \r\n52 6 tiles/slope 0 \r\n53 5 tiles/sets/stone 51 \r\n53 6 tiles/sets/stone 2 \r\n53 7 tiles/slope 0 \r\n54 5 tiles/sets/stone 5 \r\n54 6 tiles/sets/stone 51 \r\n54 7 tiles/sets/stone 2 \r\n54 8 tiles/slope 0 \r\n55 5 tiles/sets/stone 5 \r\n55 6 tiles/sets/stone 5 \r\n55 7 tiles/sets/stone 51 \r\n55 8 tiles/sets/stone 2 \r\n55 9 tiles/slope 0 \r\n56 5 tiles/sets/stone 5 \r\n56 7 tiles/sets/stone 5 \r\n56 8 tiles/sets/stone 51 \r\n56 9 tiles/sets/stone 2 \r\n56 10 tiles/slope 0 \r\n57 5 tiles/sets/stone 5 \r\n57 7 tiles/sets/stone 5 \r\n57 8 tiles/sets/stone 5 \r\n57 9 tiles/sets/stone 51 \r\n57 10 tiles/sets/stone 2 \r\n57 11 tiles/slope 0 \r\n58 5 tiles/sets/stone 5 \r\n58 7 tiles/sets/stone 5 \r\n58 8 tiles/sets/stone 5 \r\n58 9 tiles/sets/stone 5 \r\n58 10 tiles/sets/stone 51 \r\n58 11 tiles/sets/stone 2 \r\n58 12 tiles/slope 0 \r\n59 5 tiles/sets/stone 5 \r\n59 7 tiles/sets/stone 5 \r\n59 8 tiles/sets/stone 5 \r\n59 9 tiles/sets/stone 5 \r\n59 10 tiles/sets/stone 5 \r\n59 11 tiles/sets/stone 51 \r\n59 12 tiles/sets/stone 2 \r\n59 13 tiles/slope 0 \r\n60 5 tiles/sets/stone 5 \r\n60 7 tiles/sets/stone 5 \r\n60 8 tiles/sets/stone 5 \r\n60 9 tiles/sets/stone 5 \r\n60 10 tiles/sets/stone 5 \r\n60 11 tiles/sets/stone 5 \r\n60 12 tiles/sets/stone 51 \r\n60 13 tiles/sets/stone 2 \r\n60 14 tiles/slope 0 \r\n61 5 tiles/sets/stone 5 \r\n61 7 tiles/sets/stone 5 \r\n61 8 tiles/sets/stone 5 \r\n61 9 tiles/sets/stone 5 \r\n61 10 tiles/sets/stone 5 \r\n61 11 tiles/sets/stone 5 \r\n61 12 tiles/sets/stone 5 \r\n61 13 tiles/sets/stone 51 \r\n61 14 tiles/sets/stone 2 \r\n61 15 tiles/slope 0 \r\n62 5 tiles/sets/stone 5 \r\n62 7 tiles/sets/stone 5 \r\n62 8 tiles/sets/stone 5 \r\n62 9 tiles/sets/stone 5 \r\n62 10 tiles/sets/stone 5 \r\n62 11 tiles/sets/stone 5 \r\n62 12 tiles/sets/stone 5 \r\n62 13 tiles/sets/stone 5 \r\n62 14 tiles/sets/stone 51 \r\n62 15 tiles/sets/stone 2 \r\n62 16 tiles/slope 0 \r\n63 5 tiles/sets/stone 5 \r\n63 7 tiles/sets/stone 5 \r\n63 8 tiles/sets/stone 5 \r\n63 9 tiles/sets/stone 5 \r\n63 10 tiles/sets/stone 5 \r\n63 11 tiles/sets/stone 5 \r\n63 12 tiles/sets/stone 5 \r\n63 13 tiles/sets/stone 5 \r\n63 14 tiles/sets/stone 5 \r\n63 15 tiles/sets/stone 51 \r\n63 16 tiles/sets/stone 2 \r\n63 17 tiles/slope 0 \r\n64 5 tiles/sets/stone 5 \r\n64 7 tiles/sets/stone 5 \r\n64 8 tiles/sets/stone 5 \r\n64 9 tiles/sets/stone 5 \r\n64 10 tiles/sets/stone 5 \r\n64 11 tiles/sets/stone 5 \r\n64 12 tiles/sets/stone 5 \r\n64 13 tiles/sets/stone 5 \r\n64 14 tiles/sets/stone 5 \r\n64 15 tiles/sets/stone 5 \r\n64 16 tiles/sets/stone 51 \r\n64 17 tiles/sets/stone 2 \r\n64 18 tiles/slope 0 \r\n65 5 tiles/sets/stone 34 \r\n65 7 tiles/sets/stone 34 \r\n65 8 tiles/sets/stone 34 \r\n65 9 tiles/sets/stone 34 \r\n65 10 tiles/sets/stone 34 \r\n65 11 tiles/sets/stone 34 \r\n65 12 tiles/sets/stone 34 \r\n65 13 tiles/sets/stone 34 \r\n65 14 tiles/sets/stone 34 \r\n65 15 tiles/sets/stone 34 \r\n65 16 tiles/sets/stone 21 \r\n65 17 tiles/sets/stone 51 \r\n65 18 tiles/sets/stone 2 \r\n65 19 tiles/slope 0 \r\n66 16 tiles/sets/stone 32 \r\n66 17 tiles/sets/stone 21 \r\n66 18 tiles/sets/stone 51 \r\n66 19 tiles/sets/stone 2 \r\n66 20 tiles/slope 0 \r\n67 17 tiles/sets/stone 49 \r\n67 18 tiles/sets/stone 5 \r\n67 19 tiles/sets/stone 51 \r\n67 20 tiles/sets/stone 2 \r\n67 21 tiles/slope 0 \r\n68 17 tiles/sets/stone 49 \r\n68 18 tiles/sets/stone 5 \r\n68 19 tiles/sets/stone 5 \r\n68 20 tiles/sets/stone 51 \r\n68 21 tiles/sets/stone 2 \r\n68 22 tiles/slope 0 \r\n69 15 tiles/sets/stone 47 \r\n69 16 tiles/sets/stone 4 \r\n69 17 tiles/sets/stone 36 \r\n69 18 tiles/sets/stone 5 \r\n69 19 tiles/sets/stone 5 \r\n69 20 tiles/sets/stone 5 \r\n69 21 tiles/sets/stone 51 \r\n69 22 tiles/sets/stone 2 \r\n69 23 tiles/slope 0 \r\n70 15 tiles/sets/stone 49 \r\n70 16 tiles/sets/stone 5 \r\n70 17 tiles/sets/stone 5 \r\n70 18 tiles/sets/stone 5 \r\n70 19 tiles/sets/stone 5 \r\n70 20 tiles/sets/stone 5 \r\n70 21 tiles/sets/stone 5 \r\n70 22 tiles/sets/stone 51 \r\n70 23 tiles/sets/stone 2 \r\n70 24 tiles/slope 0 \r\n71 15 tiles/sets/stone 32 \r\n71 16 tiles/sets/stone 34 \r\n71 17 tiles/sets/stone 34 \r\n71 18 tiles/sets/stone 34 \r\n71 19 tiles/sets/stone 34 \r\n71 20 tiles/sets/stone 34 \r\n71 21 tiles/sets/stone 34 \r\n71 22 tiles/sets/stone 21 \r\n71 23 tiles/sets/stone 51 \r\n71 24 tiles/sets/stone 2 \r\n71 25 tiles/slope 0 \r\n72 22 tiles/sets/stone 32 \r\n72 23 tiles/sets/stone 21 \r\n72 24 tiles/sets/stone 51 \r\n72 25 tiles/sets/stone 2 \r\n72 26 tiles/slope 0 \r\n73 23 tiles/sets/stone 49 \r\n73 24 tiles/sets/stone 5 \r\n73 25 tiles/sets/stone 51 \r\n73 26 tiles/sets/stone 2 \r\n73 27 tiles/slope 0 \r\n74 23 tiles/sets/stone 49 \r\n74 24 tiles/sets/stone 5 \r\n74 25 tiles/sets/stone 5 \r\n74 26 tiles/sets/stone 51 \r\n74 27 tiles/sets/stone 2 \r\n74 28 tiles/slope 0 \r\n75 21 tiles/sets/stone 47 \r\n75 22 tiles/sets/stone 4 \r\n75 23 tiles/sets/stone 36 \r\n75 24 tiles/sets/stone 5 \r\n75 25 tiles/sets/stone 5 \r\n75 26 tiles/sets/stone 5 \r\n75 27 tiles/sets/stone 51 \r\n75 28 tiles/sets/stone 2 \r\n75 29 tiles/slope 0 \r\n76 21 tiles/sets/stone 49 \r\n76 22 tiles/sets/stone 5 \r\n76 23 tiles/sets/stone 5 \r\n76 24 tiles/sets/stone 5 \r\n76 25 tiles/sets/stone 5 \r\n76 26 tiles/sets/stone 5 \r\n76 27 tiles/sets/stone 5 \r\n76 28 tiles/sets/stone 51 \r\n76 29 tiles/sets/stone 2 \r\n76 30 tiles/slope 0 \r\n77 21 tiles/sets/stone 32 \r\n77 22 tiles/sets/stone 34 \r\n77 23 tiles/sets/stone 34 \r\n77 24 tiles/sets/stone 34 \r\n77 25 tiles/sets/stone 34 \r\n77 26 tiles/sets/stone 34 \r\n77 27 tiles/sets/stone 34 \r\n77 28 tiles/sets/stone 21 \r\n77 29 tiles/sets/stone 51 \r\n77 30 tiles/sets/stone 2 \r\n77 31 tiles/slope 0 \r\n78 28 tiles/sets/stone 32 \r\n78 29 tiles/sets/stone 21 \r\n78 30 tiles/sets/stone 51 \r\n78 31 tiles/sets/stone 2 \r\n78 32 tiles/slope 0 \r\n79 29 tiles/sets/stone 49 \r\n79 30 tiles/sets/stone 5 \r\n79 31 tiles/sets/stone 51 \r\n79 32 tiles/sets/stone 2 \r\n79 33 tiles/slope 0 \r\n80 29 tiles/sets/stone 49 \r\n80 30 tiles/sets/stone 5 \r\n80 31 tiles/sets/stone 5 \r\n80 32 tiles/sets/stone 51 \r\n80 33 tiles/sets/stone 2 \r\n80 34 tiles/slope 0 \r\n81 27 tiles/sets/stone 47 \r\n81 28 tiles/sets/stone 4 \r\n81 29 tiles/sets/stone 36 \r\n81 30 tiles/sets/stone 5 \r\n81 31 tiles/sets/stone 5 \r\n81 32 tiles/sets/stone 5 \r\n81 33 tiles/sets/stone 51 \r\n81 34 tiles/sets/stone 2 \r\n81 35 tiles/slope 0 \r\n82 27 tiles/sets/stone 49 \r\n82 28 tiles/sets/stone 5 \r\n82 29 tiles/sets/stone 5 \r\n82 30 tiles/sets/stone 5 \r\n82 31 tiles/sets/stone 5 \r\n82 32 tiles/sets/stone 5 \r\n82 33 tiles/sets/stone 5 \r\n82 34 tiles/sets/stone 51 \r\n82 35 tiles/sets/stone 2 \r\n82 36 tiles/slope 0 \r\n83 27 tiles/sets/stone 32 \r\n83 28 tiles/sets/stone 34 \r\n83 29 tiles/sets/stone 34 \r\n83 30 tiles/sets/stone 34 \r\n83 31 tiles/sets/stone 34 \r\n83 32 tiles/sets/stone 34 \r\n83 33 tiles/sets/stone 34 \r\n83 34 tiles/sets/stone 21 \r\n83 35 tiles/sets/stone 51 \r\n83 36 tiles/sets/stone 2 \r\n83 37 tiles/slope 0 \r\n84 34 tiles/sets/stone 32 \r\n84 35 tiles/sets/stone 21 \r\n84 36 tiles/sets/stone 51 \r\n84 37 tiles/sets/stone 2 \r\n84 38 tiles/slope 0 \r\n85 35 tiles/sets/stone 49 \r\n85 36 tiles/sets/stone 5 \r\n85 37 tiles/sets/stone 51 \r\n85 38 tiles/sets/stone 2 \r\n85 39 tiles/slope 0 \r\n86 35 tiles/sets/stone 32 \r\n86 36 tiles/sets/stone 21 \r\n86 37 tiles/sets/stone 5 \r\n86 38 tiles/sets/stone 51 \r\n86 39 tiles/sets/stone 2 \r\n86 40 tiles/slope 0 \r\n87 40 tiles/sets/stone 2 \r\n87 41 tiles/slope 0 \r\n88 40 tiles/sets/stone 51 \r\n88 41 tiles/sets/stone 2 \r\n88 42 tiles/slope 0 \r\n89 40 tiles/sets/stone 5 \r\n89 41 tiles/sets/stone 51 \r\n89 42 tiles/sets/stone 2 \r\n89 43 tiles/slope 0 \r\n90 40 tiles/sets/stone 21 \r\n90 41 tiles/sets/stone 5 \r\n90 42 tiles/sets/stone 51 \r\n90 43 tiles/sets/stone 2 \r\n90 44 tiles/slope 0 \r\n91 40 tiles/sets/stone 49 \r\n91 41 tiles/sets/stone 5 \r\n91 42 tiles/sets/stone 5 \r\n91 43 tiles/sets/stone 51 \r\n91 44 tiles/sets/stone 2 \r\n91 45 tiles/slope 0 \r\n92 40 tiles/sets/stone 49 \r\n92 41 tiles/sets/stone 5 \r\n92 42 tiles/sets/stone 5 \r\n92 43 tiles/sets/stone 5 \r\n92 44 tiles/sets/stone 51 \r\n92 45 tiles/sets/stone 2 \r\n92 46 tiles/slope 0 \r\n93 40 tiles/sets/stone 49 \r\n93 41 tiles/sets/stone 5 \r\n93 42 tiles/sets/stone 5 \r\n93 43 tiles/sets/stone 5 \r\n93 44 tiles/sets/stone 5 \r\n93 45 tiles/sets/stone 51 \r\n93 46 tiles/sets/stone 2 \r\n93 47 tiles/slope 0 \r\n94 40 tiles/sets/stone 49 \r\n94 41 tiles/sets/stone 5 \r\n94 42 tiles/sets/stone 5 \r\n94 43 tiles/sets/stone 5 \r\n94 44 tiles/sets/stone 5 \r\n94 45 tiles/sets/stone 5 \r\n94 46 tiles/sets/stone 51 \r\n94 47 tiles/sets/stone 2 \r\n94 48 tiles/slope 0 \r\n95 40 tiles/sets/stone 49 \r\n95 41 tiles/sets/stone 5 \r\n95 42 tiles/sets/stone 5 \r\n95 43 tiles/sets/stone 5 \r\n95 44 tiles/sets/stone 5 \r\n95 45 tiles/sets/stone 5 \r\n95 46 tiles/sets/stone 5 \r\n95 47 tiles/sets/stone 51 \r\n95 48 tiles/sets/stone 2 \r\n95 49 tiles/slope 0 \r\n96 40 tiles/sets/stone 49 \r\n96 41 tiles/sets/stone 5 \r\n96 42 tiles/sets/stone 5 \r\n96 43 tiles/sets/stone 5 \r\n96 44 tiles/sets/stone 5 \r\n96 45 tiles/sets/stone 5 \r\n96 46 tiles/sets/stone 5 \r\n96 47 tiles/sets/stone 5 \r\n96 48 tiles/sets/stone 51 \r\n96 49 tiles/sets/stone 2 \r\n96 50 tiles/slope 0 \r\n97 40 tiles/sets/stone 49 \r\n97 41 tiles/sets/stone 5 \r\n97 42 tiles/sets/stone 5 \r\n97 43 tiles/sets/stone 5 \r\n97 44 tiles/sets/stone 5 \r\n97 45 tiles/sets/stone 5 \r\n97 46 tiles/sets/stone 5 \r\n97 47 tiles/sets/stone 5 \r\n97 48 tiles/sets/stone 5 \r\n97 49 tiles/sets/stone 51 \r\n97 50 tiles/sets/stone 2 \r\n97 51 tiles/slope 0 \r\n98 40 tiles/sets/stone 49 \r\n98 41 tiles/sets/stone 5 \r\n98 42 tiles/sets/stone 5 \r\n98 43 tiles/sets/stone 5 \r\n98 44 tiles/sets/stone 5 \r\n98 45 tiles/sets/stone 5 \r\n98 46 tiles/sets/stone 5 \r\n98 47 tiles/sets/stone 5 \r\n98 48 tiles/sets/stone 5 \r\n98 49 tiles/sets/stone 5 \r\n98 50 tiles/sets/stone 51 \r\n98 51 tiles/sets/stone 2 \r\n98 52 tiles/slope 0 \r\n99 40 tiles/sets/stone 49 \r\n99 41 tiles/sets/stone 5 \r\n99 42 tiles/sets/stone 5 \r\n99 43 tiles/sets/stone 5 \r\n99 44 tiles/sets/stone 5 \r\n99 45 tiles/sets/stone 5 \r\n99 46 tiles/sets/stone 5 \r\n99 47 tiles/sets/stone 5 \r\n99 48 tiles/sets/stone 5 \r\n99 49 tiles/sets/stone 5 \r\n99 50 tiles/sets/stone 5 \r\n99 51 tiles/sets/stone 51 \r\n99 52 tiles/sets/stone 2 \r\n99 53 tiles/slope 0 \r\n100 40 tiles/sets/stone 32 \r\n100 41 tiles/sets/stone 34 \r\n100 42 tiles/sets/stone 34 \r\n100 43 tiles/sets/stone 34 \r\n100 44 tiles/sets/stone 34 \r\n100 45 tiles/sets/stone 34 \r\n100 46 tiles/sets/stone 34 \r\n100 47 tiles/sets/stone 34 \r\n100 48 tiles/sets/stone 34 \r\n100 49 tiles/sets/stone 34 \r\n100 50 tiles/sets/stone 34 \r\n100 51 tiles/sets/stone 21 \r\n100 52 tiles/sets/stone 51 \r\n100 53 tiles/sets/stone 2 \r\n100 54 tiles/slope 0 \r\n101 51 tiles/sets/stone 32 \r\n101 52 tiles/sets/stone 21 \r\n101 53 tiles/sets/stone 51 \r\n101 54 tiles/sets/stone 2 \r\n101 55 tiles/slope 0 \r\n102 52 tiles/sets/stone 49 \r\n102 53 tiles/sets/stone 5 \r\n102 54 tiles/sets/stone 51 \r\n102 55 tiles/sets/stone 2 \r\n102 56 tiles/slope 0 \r\n103 52 tiles/sets/stone 49 \r\n103 53 tiles/sets/stone 5 \r\n103 54 tiles/sets/stone 5 \r\n103 55 tiles/sets/stone 51 \r\n103 56 tiles/sets/stone 2 \r\n103 57 tiles/slope 0 \r\n104 50 tiles/sets/stone 47 \r\n104 51 tiles/sets/stone 4 \r\n104 52 tiles/sets/stone 36 \r\n104 53 tiles/sets/stone 5 \r\n104 54 tiles/sets/stone 5 \r\n104 55 tiles/sets/stone 5 \r\n104 56 tiles/sets/stone 51 \r\n104 57 tiles/sets/stone 2 \r\n104 58 tiles/slope 0 \r\n105 50 tiles/sets/stone 49 \r\n105 51 tiles/sets/stone 5 \r\n105 52 tiles/sets/stone 5 \r\n105 53 tiles/sets/stone 5 \r\n105 54 tiles/sets/stone 5 \r\n105 55 tiles/sets/stone 5 \r\n105 56 tiles/sets/stone 5 \r\n105 57 tiles/sets/stone 51 \r\n105 58 tiles/sets/stone 2 \r\n105 59 tiles/slope 0 \r\n106 50 tiles/sets/stone 32 \r\n106 51 tiles/sets/stone 34 \r\n106 52 tiles/sets/stone 34 \r\n106 53 tiles/sets/stone 34 \r\n106 54 tiles/sets/stone 34 \r\n106 55 tiles/sets/stone 34 \r\n106 56 tiles/sets/stone 34 \r\n106 57 tiles/sets/stone 21 \r\n106 58 tiles/sets/stone 51 \r\n106 59 tiles/sets/stone 2 \r\n106 60 tiles/slope 0 \r\n107 57 tiles/sets/stone 32 \r\n107 58 tiles/sets/stone 21 \r\n107 59 tiles/sets/stone 51 \r\n107 60 tiles/sets/stone 2 \r\n107 61 tiles/slope 0 \r\n108 58 tiles/sets/stone 49 \r\n108 59 tiles/sets/stone 5 \r\n108 60 tiles/sets/stone 51 \r\n108 61 tiles/sets/stone 2 \r\n108 62 tiles/slope 0 \r\n109 58 tiles/sets/stone 49 \r\n109 59 tiles/sets/stone 5 \r\n109 60 tiles/sets/stone 5 \r\n109 61 tiles/sets/stone 51 \r\n109 62 tiles/sets/stone 2 \r\n109 63 tiles/slope 0 \r\n110 56 tiles/sets/stone 47 \r\n110 57 tiles/sets/stone 4 \r\n110 58 tiles/sets/stone 36 \r\n110 59 tiles/sets/stone 5 \r\n110 60 tiles/sets/stone 5 \r\n110 61 tiles/sets/stone 5 \r\n110 62 tiles/sets/stone 51 \r\n110 63 tiles/sets/stone 2 \r\n111 56 tiles/sets/stone 49 \r\n111 57 tiles/sets/stone 5 \r\n111 58 tiles/sets/stone 5 \r\n111 59 tiles/sets/stone 5 \r\n111 60 tiles/sets/stone 5 \r\n111 61 tiles/sets/stone 5 \r\n111 62 tiles/sets/stone 5 \r\n111 63 tiles/sets/stone 51 \r\n112 56 tiles/sets/stone 32 \r\n112 57 tiles/sets/stone 34 \r\n112 58 tiles/sets/stone 34 \r\n112 59 tiles/sets/stone 34 \r\n112 60 tiles/sets/stone 34 \r\n112 61 tiles/sets/stone 34 \r\n112 62 tiles/sets/stone 34 \r\n112 63 tiles/sets/stone 21 \r\n113 63 tiles/sets/stone 32 \r\n116 62 tiles/sets/stone 47 \r\n116 63 tiles/sets/stone 4 \r\n117 62 tiles/sets/stone 49 \r\n117 63 tiles/sets/stone 5 \r\n118 62 tiles/sets/stone 32 \r\n118 63 tiles/sets/stone 34 \r\n87 39 tiles/sets/stone 51 \r\n87 38 tiles/sets/stone 5 \r\n87 37 tiles/sets/stone 21 \r\n88 37 tiles/sets/stone 32 \r\n88 38 tiles/sets/stone 21 \r\n88 39 tiles/sets/stone 5 \r\n89 39 tiles/sets/stone 21 \r\n89 38 tiles/sets/stone 32 \r\n90 39 tiles/sets/stone 32 \r\n87 36 tiles/sets/stone 32 \r\n111 64 tiles/sets/stone 2 \r\n112 64 tiles/sets/stone 51 \r\n112 65 tiles/sets/stone 2 \r\n112 66 tiles/slope 0 \r\n113 64 tiles/sets/stone 21 \r\n113 65 tiles/sets/stone 51 \r\n113 66 tiles/sets/stone 2 \r\n113 67 tiles/slope 0 \r\n114 64 tiles/sets/stone 49 \r\n114 65 tiles/sets/stone 5 \r\n114 66 tiles/sets/stone 51 \r\n114 67 tiles/sets/stone 2 \r\n114 68 tiles/slope 0 \r\n115 64 tiles/sets/stone 49 \r\n115 65 tiles/sets/stone 5 \r\n115 66 tiles/sets/stone 5 \r\n115 67 tiles/sets/stone 51 \r\n115 68 tiles/sets/stone 2 \r\n115 69 tiles/slope 0 \r\n116 64 tiles/sets/stone 36 \r\n116 65 tiles/sets/stone 5 \r\n116 66 tiles/sets/stone 5 \r\n116 67 tiles/sets/stone 5 \r\n116 68 tiles/sets/stone 51 \r\n116 69 tiles/sets/stone 2 \r\n116 70 tiles/slope 0 \r\n117 64 tiles/sets/stone 5 \r\n117 65 tiles/sets/stone 5 \r\n117 66 tiles/sets/stone 5 \r\n117 67 tiles/sets/stone 5 \r\n117 68 tiles/sets/stone 5 \r\n117 69 tiles/sets/stone 51 \r\n117 70 tiles/sets/stone 2 \r\n117 71 tiles/slope 0 \r\n118 64 tiles/sets/stone 21 \r\n118 65 tiles/sets/stone 5 \r\n118 66 tiles/sets/stone 5 \r\n118 67 tiles/sets/stone 5 \r\n118 68 tiles/sets/stone 5 \r\n118 69 tiles/sets/stone 5 \r\n118 70 tiles/sets/stone 51 \r\n118 71 tiles/sets/stone 2 \r\n118 72 tiles/slope 0 \r\n119 64 tiles/sets/stone 49 \r\n119 65 tiles/sets/stone 5 \r\n119 66 tiles/sets/stone 5 \r\n119 67 tiles/sets/stone 5 \r\n119 68 tiles/sets/stone 5 \r\n119 69 tiles/sets/stone 5 \r\n119 70 tiles/sets/stone 5 \r\n119 71 tiles/sets/stone 51 \r\n119 72 tiles/sets/stone 2 \r\n119 73 tiles/slope 0 \r\n120 64 tiles/sets/stone 49 \r\n120 65 tiles/sets/stone 5 \r\n120 66 tiles/sets/stone 5 \r\n120 67 tiles/sets/stone 5 \r\n120 68 tiles/sets/stone 5 \r\n120 69 tiles/sets/stone 5 \r\n120 70 tiles/sets/stone 5 \r\n120 71 tiles/sets/stone 5 \r\n120 72 tiles/sets/stone 51 \r\n120 73 tiles/sets/stone 2 \r\n120 74 tiles/slope 0 \r\n121 64 tiles/sets/stone 49 \r\n121 65 tiles/sets/stone 5 \r\n121 66 tiles/sets/stone 5 \r\n121 67 tiles/sets/stone 5 \r\n121 68 tiles/sets/stone 5 \r\n121 69 tiles/sets/stone 5 \r\n121 70 tiles/sets/stone 5 \r\n121 71 tiles/sets/stone 5 \r\n121 72 tiles/sets/stone 5 \r\n121 73 tiles/sets/stone 51 \r\n121 74 tiles/sets/stone 2 \r\n121 75 tiles/slope 0 \r\n122 64 tiles/sets/stone 49 \r\n122 65 tiles/sets/stone 5 \r\n122 66 tiles/sets/stone 5 \r\n122 67 tiles/sets/stone 5 \r\n122 68 tiles/sets/stone 5 \r\n122 69 tiles/sets/stone 5 \r\n122 70 tiles/sets/stone 5 \r\n122 71 tiles/sets/stone 5 \r\n122 72 tiles/sets/stone 5 \r\n122 73 tiles/sets/stone 5 \r\n122 74 tiles/sets/stone 51 \r\n122 75 tiles/sets/stone 2 \r\n122 76 tiles/slope 0 \r\n123 64 tiles/sets/stone 49 \r\n123 65 tiles/sets/stone 5 \r\n123 66 tiles/sets/stone 5 \r\n123 67 tiles/sets/stone 5 \r\n123 68 tiles/sets/stone 5 \r\n123 69 tiles/sets/stone 5 \r\n123 70 tiles/sets/stone 5 \r\n123 71 tiles/sets/stone 5 \r\n123 72 tiles/sets/stone 5 \r\n123 73 tiles/sets/stone 5 \r\n123 74 tiles/sets/stone 5 \r\n123 75 tiles/sets/stone 51 \r\n123 76 tiles/sets/stone 2 \r\n123 77 tiles/slope 0 \r\n124 64 tiles/sets/stone 49 \r\n124 65 tiles/sets/stone 5 \r\n124 66 tiles/sets/stone 5 \r\n124 67 tiles/sets/stone 5 \r\n124 68 tiles/sets/stone 5 \r\n124 69 tiles/sets/stone 5 \r\n124 70 tiles/sets/stone 5 \r\n124 71 tiles/sets/stone 5 \r\n124 72 tiles/sets/stone 5 \r\n124 73 tiles/sets/stone 5 \r\n124 74 tiles/sets/stone 5 \r\n124 75 tiles/sets/stone 5 \r\n124 76 tiles/sets/stone 51 \r\n124 77 tiles/sets/stone 2 \r\n124 78 tiles/slope 0 \r\n125 64 tiles/sets/stone 49 \r\n125 65 tiles/sets/stone 5 \r\n125 66 tiles/sets/stone 5 \r\n125 67 tiles/sets/stone 5 \r\n125 68 tiles/sets/stone 5 \r\n125 69 tiles/sets/stone 5 \r\n125 70 tiles/sets/stone 5 \r\n125 71 tiles/sets/stone 5 \r\n125 72 tiles/sets/stone 5 \r\n125 73 tiles/sets/stone 5 \r\n125 74 tiles/sets/stone 5 \r\n125 75 tiles/sets/stone 5 \r\n125 76 tiles/sets/stone 5 \r\n125 77 tiles/sets/stone 51 \r\n125 78 tiles/sets/stone 2 \r\n125 79 tiles/slope 0 \r\n126 64 tiles/sets/stone 49 \r\n126 65 tiles/sets/stone 6 \r\n126 66 tiles/sets/stone 34 \r\n126 67 tiles/sets/stone 34 \r\n126 68 tiles/sets/stone 34 \r\n126 69 tiles/sets/stone 34 \r\n126 70 tiles/sets/stone 34 \r\n126 71 tiles/sets/stone 34 \r\n126 72 tiles/sets/stone 34 \r\n126 73 tiles/sets/stone 34 \r\n126 74 tiles/sets/stone 34 \r\n126 75 tiles/sets/stone 34 \r\n126 76 tiles/sets/stone 34 \r\n126 77 tiles/sets/stone 21 \r\n126 78 tiles/sets/stone 51 \r\n126 79 tiles/sets/stone 2 \r\n126 80 tiles/slope 0 \r\n127 64 tiles/sets/stone 32 \r\n127 65 tiles/sets/stone 17 \r\n127 77 tiles/sets/stone 32 \r\n127 78 tiles/sets/stone 21 \r\n127 79 tiles/sets/stone 51 \r\n127 80 tiles/sets/stone 2 \r\n127 81 tiles/slope 0 \r\n128 78 tiles/sets/stone 49 \r\n128 79 tiles/sets/stone 5 \r\n128 80 tiles/sets/stone 51 \r\n128 81 tiles/sets/stone 2 \r\n128 82 tiles/slope 0 \r\n129 78 tiles/sets/stone 49 \r\n129 79 tiles/sets/stone 5 \r\n129 80 tiles/sets/stone 5 \r\n129 81 tiles/sets/stone 51 \r\n129 82 tiles/sets/stone 2 \r\n129 83 tiles/slope 0 \r\n130 76 tiles/sets/stone 47 \r\n130 77 tiles/sets/stone 4 \r\n130 78 tiles/sets/stone 36 \r\n130 79 tiles/sets/stone 5 \r\n130 80 tiles/sets/stone 5 \r\n130 81 tiles/sets/stone 5 \r\n130 82 tiles/sets/stone 51 \r\n130 83 tiles/sets/stone 2 \r\n130 84 tiles/slope 0 \r\n131 76 tiles/sets/stone 49 \r\n131 77 tiles/sets/stone 5 \r\n131 78 tiles/sets/stone 5 \r\n131 79 tiles/sets/stone 5 \r\n131 80 tiles/sets/stone 5 \r\n131 81 tiles/sets/stone 5 \r\n131 82 tiles/sets/stone 5 \r\n131 83 tiles/sets/stone 51 \r\n131 84 tiles/sets/stone 2 \r\n131 85 tiles/slope 0 \r\n132 76 tiles/sets/stone 32 \r\n132 77 tiles/sets/stone 34 \r\n132 78 tiles/sets/stone 34 \r\n132 79 tiles/sets/stone 34 \r\n132 80 tiles/sets/stone 34 \r\n132 81 tiles/sets/stone 34 \r\n132 82 tiles/sets/stone 34 \r\n132 83 tiles/sets/stone 21 \r\n132 84 tiles/sets/stone 51 \r\n132 85 tiles/sets/stone 2 \r\n132 86 tiles/slope 0 \r\n133 83 tiles/sets/stone 32 \r\n133 84 tiles/sets/stone 21 \r\n133 85 tiles/sets/stone 51 \r\n133 86 tiles/sets/stone 2 \r\n133 87 tiles/slope 0 \r\n134 84 tiles/sets/stone 49 \r\n134 85 tiles/sets/stone 5 \r\n134 86 tiles/sets/stone 51 \r\n134 87 tiles/sets/stone 2 \r\n134 88 tiles/slope 0 \r\n135 84 tiles/sets/stone 49 \r\n135 85 tiles/sets/stone 5 \r\n135 86 tiles/sets/stone 5 \r\n135 87 tiles/sets/stone 51 \r\n135 88 tiles/sets/stone 2 \r\n135 89 tiles/slope 0 \r\n136 82 tiles/sets/stone 47 \r\n136 83 tiles/sets/stone 4 \r\n136 84 tiles/sets/stone 36 \r\n136 85 tiles/sets/stone 5 \r\n136 86 tiles/sets/stone 5 \r\n136 87 tiles/sets/stone 5 \r\n136 88 tiles/sets/stone 51 \r\n136 89 tiles/sets/stone 2 \r\n136 90 tiles/slope 0 \r\n137 82 tiles/sets/stone 49 \r\n137 83 tiles/sets/stone 5 \r\n137 84 tiles/sets/stone 5 \r\n137 85 tiles/sets/stone 5 \r\n137 86 tiles/sets/stone 5 \r\n137 87 tiles/sets/stone 5 \r\n137 88 tiles/sets/stone 5 \r\n137 89 tiles/sets/stone 51 \r\n137 90 tiles/sets/stone 2 \r\n137 91 tiles/slope 0 \r\n138 82 tiles/sets/stone 32 \r\n138 83 tiles/sets/stone 34 \r\n138 84 tiles/sets/stone 34 \r\n138 85 tiles/sets/stone 34 \r\n138 86 tiles/sets/stone 34 \r\n138 87 tiles/sets/stone 34 \r\n138 88 tiles/sets/stone 34 \r\n138 89 tiles/sets/stone 21 \r\n138 90 tiles/sets/stone 51 \r\n138 91 tiles/sets/stone 2 \r\n138 92 tiles/slope 0 \r\n139 89 tiles/sets/stone 32 \r\n139 90 tiles/sets/stone 21 \r\n139 91 tiles/sets/stone 51 \r\n139 92 tiles/sets/stone 2 \r\n139 93 tiles/slope 0 \r\n140 90 tiles/sets/stone 49 \r\n140 91 tiles/sets/stone 5 \r\n140 92 tiles/sets/stone 51 \r\n140 93 tiles/sets/stone 2 \r\n140 94 tiles/slope 0 \r\n141 90 tiles/sets/stone 49 \r\n141 91 tiles/sets/stone 5 \r\n141 92 tiles/sets/stone 5 \r\n141 93 tiles/sets/stone 51 \r\n141 94 tiles/sets/stone 2 \r\n141 95 tiles/slope 0 \r\n142 88 tiles/sets/stone 47 \r\n142 89 tiles/sets/stone 4 \r\n142 90 tiles/sets/stone 36 \r\n142 91 tiles/sets/stone 5 \r\n142 92 tiles/sets/stone 5 \r\n142 93 tiles/sets/stone 5 \r\n142 94 tiles/sets/stone 51 \r\n142 95 tiles/sets/stone 2 \r\n142 96 tiles/slope 0 \r\n143 88 tiles/sets/stone 49 \r\n143 89 tiles/sets/stone 5 \r\n143 90 tiles/sets/stone 5 \r\n143 91 tiles/sets/stone 5 \r\n143 92 tiles/sets/stone 5 \r\n143 93 tiles/sets/stone 5 \r\n143 94 tiles/sets/stone 5 \r\n143 95 tiles/sets/stone 51 \r\n143 96 tiles/sets/stone 2 \r\n143 97 tiles/slope 0 \r\n144 88 tiles/sets/stone 32 \r\n144 89 tiles/sets/stone 34 \r\n144 90 tiles/sets/stone 34 \r\n144 91 tiles/sets/stone 34 \r\n144 92 tiles/sets/stone 34 \r\n144 93 tiles/sets/stone 34 \r\n144 94 tiles/sets/stone 34 \r\n144 95 tiles/sets/stone 21 \r\n144 96 tiles/sets/stone 51 \r\n144 97 tiles/sets/stone 2 \r\n144 98 tiles/slope 0 \r\n145 95 tiles/sets/stone 32 \r\n145 96 tiles/sets/stone 21 \r\n145 97 tiles/sets/stone 51 \r\n145 98 tiles/sets/stone 2 \r\n145 99 tiles/slope 0 \r\n146 96 tiles/sets/stone 49 \r\n146 97 tiles/sets/stone 5 \r\n146 98 tiles/sets/stone 51 \r\n146 99 tiles/sets/stone 2 \r\n146 100 tiles/slope 0 \r\n147 96 tiles/sets/stone 32 \r\n147 97 tiles/sets/stone 21 \r\n147 98 tiles/sets/stone 5 \r\n147 99 tiles/sets/stone 51 \r\n147 100 tiles/sets/stone 2 \r\n147 101 tiles/slope 0 \r\n148 97 tiles/sets/stone 32 \r\n148 98 tiles/sets/stone 21 \r\n148 99 tiles/sets/stone 5 \r\n148 100 tiles/sets/stone 51 \r\n148 101 tiles/sets/stone 2 \r\n148 102 tiles/slope 0 \r\n149 98 tiles/sets/stone 32 \r\n149 99 tiles/sets/stone 21 \r\n149 100 tiles/sets/stone 5 \r\n149 101 tiles/sets/stone 51 \r\n149 102 tiles/sets/stone 2 \r\n149 103 tiles/slope 0 \r\n150 99 tiles/sets/stone 32 \r\n150 100 tiles/sets/stone 21 \r\n150 101 tiles/sets/stone 5 \r\n150 102 tiles/sets/stone 51 \r\n150 103 tiles/sets/stone 2 \r\n150 104 tiles/slope 0 \r\n151 100 tiles/sets/stone 32 \r\n151 101 tiles/sets/stone 21 \r\n151 102 tiles/sets/stone 5 \r\n151 103 tiles/sets/stone 51 \r\n151 104 tiles/sets/stone 2 \r\n151 105 tiles/slope 0 \r\n152 101 tiles/sets/stone 49 \r\n152 102 tiles/sets/stone 5 \r\n152 103 tiles/sets/stone 5 \r\n152 104 tiles/sets/stone 51 \r\n152 105 tiles/sets/stone 2 \r\n152 106 tiles/slope 0 \r\n153 101 tiles/sets/stone 49 \r\n153 102 tiles/sets/stone 5 \r\n153 103 tiles/sets/stone 5 \r\n153 104 tiles/sets/stone 5 \r\n153 105 tiles/sets/stone 51 \r\n153 106 tiles/sets/stone 2 \r\n153 107 tiles/slope 0 \r\n154 101 tiles/sets/stone 49 \r\n154 102 tiles/sets/stone 5 \r\n154 103 tiles/sets/stone 5 \r\n154 104 tiles/sets/stone 5 \r\n154 105 tiles/sets/stone 5 \r\n154 106 tiles/sets/stone 51 \r\n154 107 tiles/sets/stone 2 \r\n154 108 tiles/slope 0 \r\n155 101 tiles/sets/stone 49 \r\n155 102 tiles/sets/stone 5 \r\n155 103 tiles/sets/stone 5 \r\n155 104 tiles/sets/stone 5 \r\n155 105 tiles/sets/stone 5 \r\n155 106 tiles/sets/stone 5 \r\n155 107 tiles/sets/stone 51 \r\n155 108 tiles/sets/stone 2 \r\n155 109 tiles/slope 0 \r\n156 101 tiles/sets/stone 49 \r\n156 102 tiles/sets/stone 5 \r\n156 103 tiles/sets/stone 5 \r\n156 104 tiles/sets/stone 5 \r\n156 105 tiles/sets/stone 5 \r\n156 106 tiles/sets/stone 5 \r\n156 107 tiles/sets/stone 5 \r\n156 108 tiles/sets/stone 51 \r\n156 109 tiles/sets/stone 2 \r\n156 110 tiles/slope 0 \r\n157 101 tiles/sets/stone 49 \r\n157 102 tiles/sets/stone 5 \r\n157 103 tiles/sets/stone 5 \r\n157 104 tiles/sets/stone 5 \r\n157 105 tiles/sets/stone 5 \r\n157 106 tiles/sets/stone 5 \r\n157 107 tiles/sets/stone 5 \r\n157 108 tiles/sets/stone 5 \r\n157 109 tiles/sets/stone 51 \r\n157 110 tiles/sets/stone 2 \r\n157 111 tiles/slope 0 \r\n158 101 tiles/sets/stone 49 \r\n158 102 tiles/sets/stone 5 \r\n158 103 tiles/sets/stone 5 \r\n158 104 tiles/sets/stone 5 \r\n158 105 tiles/sets/stone 5 \r\n158 106 tiles/sets/stone 5 \r\n158 107 tiles/sets/stone 5 \r\n158 108 tiles/sets/stone 5 \r\n158 109 tiles/sets/stone 5 \r\n158 110 tiles/sets/stone 51 \r\n158 111 tiles/sets/stone 2 \r\n158 112 tiles/slope 0 \r\n159 101 tiles/sets/stone 49 \r\n159 102 tiles/sets/stone 5 \r\n159 103 tiles/sets/stone 5 \r\n159 104 tiles/sets/stone 5 \r\n159 105 tiles/sets/stone 5 \r\n159 106 tiles/sets/stone 5 \r\n159 107 tiles/sets/stone 5 \r\n159 108 tiles/sets/stone 5 \r\n159 109 tiles/sets/stone 5 \r\n159 110 tiles/sets/stone 5 \r\n159 111 tiles/sets/stone 51 \r\n159 112 tiles/sets/stone 2 \r\n159 113 tiles/slope 0 \r\n160 101 tiles/sets/stone 49 \r\n160 102 tiles/sets/stone 5 \r\n160 103 tiles/sets/stone 5 \r\n160 104 tiles/sets/stone 5 \r\n160 105 tiles/sets/stone 5 \r\n160 106 tiles/sets/stone 5 \r\n160 107 tiles/sets/stone 5 \r\n160 108 tiles/sets/stone 5 \r\n160 109 tiles/sets/stone 5 \r\n160 110 tiles/sets/stone 5 \r\n160 111 tiles/sets/stone 5 \r\n160 112 tiles/sets/stone 51 \r\n160 113 tiles/sets/stone 2 \r\n160 114 tiles/slope 0 \r\n161 101 tiles/sets/stone 32 \r\n161 102 tiles/sets/stone 34 \r\n161 103 tiles/sets/stone 34 \r\n161 104 tiles/sets/stone 34 \r\n161 105 tiles/sets/stone 34 \r\n161 106 tiles/sets/stone 34 \r\n161 107 tiles/sets/stone 34 \r\n161 108 tiles/sets/stone 34 \r\n161 109 tiles/sets/stone 34 \r\n161 110 tiles/sets/stone 34 \r\n161 111 tiles/sets/stone 34 \r\n161 112 tiles/sets/stone 21 \r\n161 113 tiles/sets/stone 51 \r\n161 114 tiles/sets/stone 2 \r\n161 115 tiles/slope 0 \r\n162 112 tiles/sets/stone 32 \r\n162 113 tiles/sets/stone 21 \r\n162 114 tiles/sets/stone 51 \r\n162 115 tiles/sets/stone 2 \r\n162 116 tiles/slope 0 \r\n163 113 tiles/sets/stone 49 \r\n163 114 tiles/sets/stone 5 \r\n163 115 tiles/sets/stone 51 \r\n163 116 tiles/sets/stone 2 \r\n163 117 tiles/slope 0 \r\n164 113 tiles/sets/stone 49 \r\n164 114 tiles/sets/stone 5 \r\n164 115 tiles/sets/stone 5 \r\n164 116 tiles/sets/stone 51 \r\n164 117 tiles/sets/stone 2 \r\n164 118 tiles/slope 0 \r\n165 111 tiles/sets/stone 47 \r\n165 112 tiles/sets/stone 4 \r\n165 113 tiles/sets/stone 36 \r\n165 114 tiles/sets/stone 5 \r\n165 115 tiles/sets/stone 5 \r\n165 116 tiles/sets/stone 5 \r\n165 117 tiles/sets/stone 51 \r\n165 118 tiles/sets/stone 2 \r\n165 119 tiles/slope 0 \r\n166 111 tiles/sets/stone 49 \r\n166 112 tiles/sets/stone 5 \r\n166 113 tiles/sets/stone 5 \r\n166 114 tiles/sets/stone 5 \r\n166 115 tiles/sets/stone 5 \r\n166 116 tiles/sets/stone 5 \r\n166 117 tiles/sets/stone 5 \r\n166 118 tiles/sets/stone 51 \r\n166 119 tiles/sets/stone 2 \r\n166 120 tiles/slope 0 \r\n167 111 tiles/sets/stone 32 \r\n167 112 tiles/sets/stone 34 \r\n167 113 tiles/sets/stone 34 \r\n167 114 tiles/sets/stone 34 \r\n167 115 tiles/sets/stone 34 \r\n167 116 tiles/sets/stone 34 \r\n167 117 tiles/sets/stone 34 \r\n167 118 tiles/sets/stone 21 \r\n167 119 tiles/sets/stone 51 \r\n167 120 tiles/sets/stone 2 \r\n167 121 tiles/slope 0 \r\n168 118 tiles/sets/stone 32 \r\n168 119 tiles/sets/stone 21 \r\n168 120 tiles/sets/stone 51 \r\n168 121 tiles/sets/stone 2 \r\n168 122 tiles/slope 0 \r\n169 119 tiles/sets/stone 49 \r\n169 120 tiles/sets/stone 5 \r\n169 121 tiles/sets/stone 51 \r\n169 122 tiles/sets/stone 2 \r\n169 123 tiles/slope 0 \r\n170 119 tiles/sets/stone 49 \r\n170 120 tiles/sets/stone 5 \r\n170 121 tiles/sets/stone 5 \r\n170 122 tiles/sets/stone 51 \r\n170 123 tiles/sets/stone 2 \r\n170 124 tiles/slope 0 \r\n171 117 tiles/sets/stone 47 \r\n171 118 tiles/sets/stone 4 \r\n171 119 tiles/sets/stone 36 \r\n171 120 tiles/sets/stone 5 \r\n171 121 tiles/sets/stone 5 \r\n171 122 tiles/sets/stone 5 \r\n171 123 tiles/sets/stone 51 \r\n171 124 tiles/sets/stone 2 \r\n171 125 tiles/slope 0 \r\n172 117 tiles/sets/stone 49 \r\n172 118 tiles/sets/stone 5 \r\n172 119 tiles/sets/stone 5 \r\n172 120 tiles/sets/stone 5 \r\n172 121 tiles/sets/stone 5 \r\n172 122 tiles/sets/stone 5 \r\n172 123 tiles/sets/stone 5 \r\n172 124 tiles/sets/stone 51 \r\n172 125 tiles/sets/stone 2 \r\n172 126 tiles/slope 0 \r\n173 117 tiles/sets/stone 32 \r\n173 118 tiles/sets/stone 34 \r\n173 119 tiles/sets/stone 34 \r\n173 120 tiles/sets/stone 34 \r\n173 121 tiles/sets/stone 34 \r\n173 122 tiles/sets/stone 34 \r\n173 123 tiles/sets/stone 34 \r\n173 124 tiles/sets/stone 21 \r\n173 125 tiles/sets/stone 51 \r\n173 126 tiles/sets/stone 2 \r\n173 127 tiles/slope 0 \r\n174 124 tiles/sets/stone 32 \r\n174 125 tiles/sets/stone 21 \r\n174 126 tiles/sets/stone 51 \r\n174 127 tiles/sets/stone 2 \r\n174 128 tiles/slope 0 \r\n175 125 tiles/sets/stone 49 \r\n175 126 tiles/sets/stone 5 \r\n175 127 tiles/sets/stone 51 \r\n175 128 tiles/sets/stone 2 \r\n175 129 tiles/slope 0 \r\n176 125 tiles/sets/stone 49 \r\n176 126 tiles/sets/stone 5 \r\n176 127 tiles/sets/stone 5 \r\n176 128 tiles/sets/stone 51 \r\n176 129 tiles/sets/stone 2 \r\n176 130 tiles/slope 0 \r\n177 123 tiles/sets/stone 47 \r\n177 124 tiles/sets/stone 4 \r\n177 125 tiles/sets/stone 36 \r\n177 126 tiles/sets/stone 5 \r\n177 127 tiles/sets/stone 5 \r\n177 128 tiles/sets/stone 5 \r\n177 129 tiles/sets/stone 51 \r\n177 130 tiles/sets/stone 2 \r\n177 131 tiles/slope 0 \r\n178 123 tiles/sets/stone 49 \r\n178 124 tiles/sets/stone 5 \r\n178 125 tiles/sets/stone 5 \r\n178 126 tiles/sets/stone 5 \r\n178 127 tiles/sets/stone 5 \r\n178 128 tiles/sets/stone 5 \r\n178 129 tiles/sets/stone 5 \r\n178 130 tiles/sets/stone 51 \r\n178 131 tiles/sets/stone 2 \r\n178 132 tiles/slope 0 \r\n179 123 tiles/sets/stone 32 \r\n179 124 tiles/sets/stone 34 \r\n179 125 tiles/sets/stone 34 \r\n179 126 tiles/sets/stone 34 \r\n179 127 tiles/sets/stone 34 \r\n179 128 tiles/sets/stone 34 \r\n179 129 tiles/sets/stone 34 \r\n179 130 tiles/sets/stone 21 \r\n179 131 tiles/sets/stone 51 \r\n179 132 tiles/sets/stone 2 \r\n179 133 tiles/slope 0 \r\n180 130 tiles/sets/stone 32 \r\n180 131 tiles/sets/stone 21 \r\n180 132 tiles/sets/stone 51 \r\n180 133 tiles/sets/stone 2 \r\n180 134 tiles/slope 0 \r\n181 131 tiles/sets/stone 49 \r\n181 132 tiles/sets/stone 5 \r\n181 133 tiles/sets/stone 51 \r\n181 134 tiles/sets/stone 2 \r\n181 135 tiles/slope 0 \r\n182 131 tiles/sets/stone 32 \r\n182 132 tiles/sets/stone 34 \r\n182 133 tiles/sets/stone 34 \r\n182 134 tiles/sets/stone 42 \r\n182 135 tiles/sets/stone 1 \r\n182 136 tiles/slope 0 \r\n110 64 tiles/slope 0 \r\n111 65 tiles/slope 0 \r\n183 136 tiles/sets/stone 0 \r\n56 6 tiles/sets/stone 5 \r\n57 6 tiles/sets/stone 5 \r\n58 6 tiles/sets/stone 5 \r\n59 6 tiles/sets/stone 5 \r\n60 6 tiles/sets/stone 5 \r\n61 6 tiles/sets/stone 5 \r\n62 6 tiles/sets/stone 5 \r\n63 6 tiles/sets/stone 5 \r\n64 6 tiles/sets/stone 5 \r\n65 6 tiles/sets/stone 34 \r\n75 3 tiles/slope 0 \r\n76 4 tiles/slope 0 \r\n77 5 tiles/slope 0 \r\n78 6 tiles/slope 0 \r\n79 7 tiles/slope 0 \r\n80 8 tiles/slope 0 \r\n81 9 tiles/slope 0 \r\n82 10 tiles/slope 0 \r\n83 11 tiles/slope 0 \r\n84 12 tiles/slope 0 \r\n85 13 tiles/slope 0 \r\n86 14 tiles/slope 0 \r\n87 15 tiles/slope 0 \r\n88 16 tiles/slope 0 \r\n89 17 tiles/slope 0 \r\n90 18 tiles/slope 0 \r\n91 19 tiles/slope 0 \r\n92 20 tiles/slope 0 \r\n93 21 tiles/slope 0 \r\n94 22 tiles/slope 0 \r\n95 23 tiles/slope 0 \r\n96 24 tiles/slope 0 \r\n97 25 tiles/slope 0 \r\n98 26 tiles/slope 0 \r\n99 27 tiles/slope 0 \r\n100 28 tiles/slope 0 \r\n101 29 tiles/slope 0 \r\n102 30 tiles/slope 0 \r\n103 31 tiles/slope 0 \r\n104 32 tiles/slope 0 \r\n105 33 tiles/slope 0 \r\n106 34 tiles/slope 0 \r\n107 35 tiles/slope 0 \r\n108 36 tiles/slope 0 \r\n109 37 tiles/slope 0 \r\n110 38 tiles/slope 0 \r\n111 39 tiles/slope 0 \r\n112 40 tiles/slope 0 \r\n113 41 tiles/slope 0 \r\n114 42 tiles/slope 0 \r\n115 43 tiles/slope 0 \r\n116 44 tiles/slope 0 \r\n117 45 tiles/slope 0 \r\n118 46 tiles/slope 0 \r\n119 47 tiles/slope 0 \r\n120 48 tiles/slope 0 \r\n121 49 tiles/slope 0 \r\n122 50 tiles/slope 0 \r\n123 51 tiles/slope 0 \r\n124 52 tiles/slope 0 \r\n125 53 tiles/slope 0 \r\n126 54 tiles/slope 0 \r\n127 55 tiles/slope 0 \r\n128 56 tiles/slope 0 \r\n129 57 tiles/slope 0 \r\n39 5 tiles/slope 1 \r\n38 6 tiles/slope 1 \r\n37 7 tiles/slope 1 \r\n36 8 tiles/slope 1 \r\n35 9 tiles/slope 1 \r\n33 11 tiles/slope 1 \r\n34 10 tiles/slope 1 \r\n32 12 tiles/slope 1 \r\n31 13 tiles/slope 1 \r\n30 14 tiles/slope 1 \r\n29 15 tiles/slope 1 \r\n28 16 tiles/slope 1 \r\n27 17 tiles/slope 1 \r\n26 18 tiles/slope 1 \r\n26 17 tiles/sets/stone 1 \r\n26 16 tiles/sets/stone 59 \r\n27 16 tiles/sets/stone 29 \r\n27 15 tiles/sets/stone 59 \r\n28 14 tiles/sets/stone 59 \r\n28 15 tiles/sets/stone 29 \r\n29 14 tiles/sets/stone 29 \r\n29 13 tiles/sets/stone 59 \r\n30 13 tiles/sets/stone 29 \r\n30 12 tiles/sets/stone 59 \r\n31 12 tiles/sets/stone 29 \r\n31 11 tiles/sets/stone 59 \r\n32 11 tiles/sets/stone 29 \r\n32 10 tiles/sets/stone 59 \r\n33 10 tiles/sets/stone 29 \r\n33 9 tiles/sets/stone 59 \r\n34 9 tiles/sets/stone 29 \r\n34 8 tiles/sets/stone 59 \r\n35 8 tiles/sets/stone 29 \r\n35 7 tiles/sets/stone 59 \r\n36 7 tiles/sets/stone 29 \r\n36 6 tiles/sets/stone 59 \r\n37 6 tiles/sets/stone 29 \r\n37 5 tiles/sets/stone 59 \r\n38 5 tiles/sets/stone 29 \r\n38 4 tiles/sets/stone 59 \r\n39 4 tiles/sets/stone 27 \r\n39 3 tiles/sets/stone 47 \r\n50 9 tiles/power_fruit 3 \r\n48 22 tiles/dynamic_color_cube 0 bbffaa \r\n47 21 tiles/dynamic_color_cube 0 bbffaa \r\n46 20 tiles/dynamic_color_cube 0 bbffaa \r\n45 20 tiles/dynamic_color_cube 0 bbffaa \r\n43 19 tiles/dynamic_color_cube 0 bbffaa \r\n43 20 tiles/dynamic_color_cube 0 bbffaa \r\n44 20 tiles/dynamic_color_cube 0 bbffaa \r\n43 21 tiles/dynamic_color_cube 0 bbffaa \r\n44 21 tiles/dynamic_color_cube 0 bbffaa \r\n45 21 tiles/dynamic_color_cube 0 bbffaa \r\n46 22 tiles/dynamic_color_cube 0 bbffaa \r\n46 21 tiles/dynamic_color_cube 0 bbffaa \r\n47 22 tiles/dynamic_color_cube 0 bbffaa \r\n48 23 tiles/dynamic_color_cube 0 bbffaa \r\n46 23 tiles/dynamic_color_cube 0 bbffaa \r\n45 22 tiles/dynamic_color_cube 0 bbffaa \r\n40 21 tiles/dynamic_color_cube 0 bbffaa \r\n43 23 tiles/dynamic_color_cube 0 bbffaa \r\n41 22 tiles/dynamic_color_cube 0 bbffaa \r\n42 22 tiles/dynamic_color_cube 0 bbffaa \r\n41 21 tiles/dynamic_color_cube 0 bbffaa \r\n42 21 tiles/dynamic_color_cube 0 bbffaa \r\n46 24 tiles/dynamic_color_cube 0 bbffaa \r\n47 25 tiles/dynamic_color_cube 0 bbffaa \r\n45 23 tiles/dynamic_color_cube 0 bbffaa \r\n44 22 tiles/dynamic_color_cube 0 bbffaa \r\n43 22 tiles/dynamic_color_cube 0 bbffaa \r\n44 23 tiles/dynamic_color_cube 0 bbffaa \r\n45 24 tiles/dynamic_color_cube 0 bbffaa \r\n46 25 tiles/dynamic_color_cube 0 bbffaa \r\n47 26 tiles/dynamic_color_cube 0 bbffaa \r\n48 27 tiles/dynamic_color_cube 0 bbffaa \r\n48 26 tiles/dynamic_color_cube 0 bbffaa \r\n47 23 tiles/dynamic_color_cube 0 bbffaa \r\n47 24 tiles/dynamic_color_cube 0 bbffaa \r\n48 25 tiles/dynamic_color_cube 0 bbffaa \r\n49 26 tiles/dynamic_color_cube 0 bbffaa \r\n50 27 tiles/dynamic_color_cube 0 bbffaa \r\n50 26 tiles/dynamic_color_cube 0 bbffaa \r\n49 25 tiles/dynamic_color_cube 0 bbffaa \r\n49 23 tiles/dynamic_color_cube 0 bbffaa \r\n49 24 tiles/dynamic_color_cube 0 bbffaa \r\n50 24 tiles/dynamic_color_cube 0 bbffaa \r\n51 26 tiles/dynamic_color_cube 0 bbffaa \r\n52 27 tiles/dynamic_color_cube 0 bbffaa \r\n52 26 tiles/dynamic_color_cube 0 bbffaa \r\n51 24 tiles/dynamic_color_cube 0 bbffaa \r\n51 23 tiles/dynamic_color_cube 0 bbffaa \r\n52 23 tiles/dynamic_color_cube 0 bbffaa \r\n52 24 tiles/dynamic_color_cube 0 bbffaa \r\n43 16 tiles/dynamic_color_cube 0 ffffaa \r\n37 21 tiles/dynamic_color_cube 0 ffffaa \r\n42 15 tiles/dynamic_color_cube 0 ffffaa \r\n41 18 tiles/dynamic_color_cube 0 ffffaa \r\n38 19 tiles/dynamic_color_cube 0 ffffaa \r\n39 23 tiles/dynamic_color_cube 0 ffffaa \r\n47 20 tiles/dynamic_color_cube 0 ffffaa \r\n37 24 tiles/dynamic_color_cube 0 ffffaa \r\n42 16 tiles/dynamic_color_cube 0 ffffaa \r\n38 21 tiles/dynamic_color_cube 0 ffffaa \r\n41 15 tiles/dynamic_color_cube 0 ffffaa \r\n46 18 tiles/dynamic_color_cube 0 ffffaa \r\n37 18 tiles/dynamic_color_cube 0 ffffaa \r\n40 22 tiles/dynamic_color_cube 0 ffffaa \r\n44 19 tiles/dynamic_color_cube 0 ffffaa \r\n39 20 tiles/dynamic_color_cube 0 ffffaa \r\n40 24 tiles/dynamic_color_cube 0 ffffaa \r\n42 17 tiles/dynamic_color_cube 0 ffffaa \r\n48 21 tiles/dynamic_color_cube 0 ffffaa \r\n36 22 tiles/dynamic_color_cube 0 ffffaa \r\n45 19 tiles/dynamic_color_cube 0 ffffaa \r\n41 19 tiles/dynamic_color_cube 0 ffffaa \r\n38 23 tiles/dynamic_color_cube 0 ffffaa \r\n35 20 tiles/dynamic_color_cube 0 ffffaa \r\n43 17 tiles/dynamic_color_cube 0 ffffaa \r\n39 21 tiles/dynamic_color_cube 0 ffffaa \r\n38 18 tiles/dynamic_color_cube 0 ffffaa \r\n42 19 tiles/dynamic_color_cube 0 ffffaa \r\n37 19 tiles/dynamic_color_cube 0 ffffaa \r\n38 20 tiles/dynamic_color_cube 0 ffffaa \r\n39 24 tiles/dynamic_color_cube 0 ffffaa \r\n44 17 tiles/dynamic_color_cube 0 ffffaa \r\n37 22 tiles/dynamic_color_cube 0 ffffaa \r\n40 19 tiles/dynamic_color_cube 0 ffffaa \r\n45 17 tiles/dynamic_color_cube 0 ffffaa \r\n41 17 tiles/dynamic_color_cube 0 ffffaa \r\n43 18 tiles/dynamic_color_cube 0 ffffaa \r\n39 18 tiles/dynamic_color_cube 0 ffffaa \r\n38 22 tiles/dynamic_color_cube 0 ffffaa \r\n42 23 tiles/dynamic_color_cube 0 ffffaa \r\n36 19 tiles/dynamic_color_cube 0 ffffaa \r\n41 23 tiles/dynamic_color_cube 0 ffffaa \r\n41 20 tiles/dynamic_color_cube 0 ffffaa \r\n38 24 tiles/dynamic_color_cube 0 ffffaa \r\n42 25 tiles/dynamic_color_cube 0 ffffaa \r\n42 18 tiles/dynamic_color_cube 0 ffffaa \r\n37 23 tiles/dynamic_color_cube 0 ffffaa \r\n41 16 tiles/dynamic_color_cube 0 ffffaa \r\n42 20 tiles/dynamic_color_cube 0 ffffaa \r\n37 20 tiles/dynamic_color_cube 0 ffffaa \r\n36 21 tiles/dynamic_color_cube 0 ffffaa \r\n45 18 tiles/dynamic_color_cube 0 ffffaa \r\n40 18 tiles/dynamic_color_cube 0 ffffaa \r\n39 22 tiles/dynamic_color_cube 0 ffffaa \r\n46 19 tiles/dynamic_color_cube 0 ffffaa \r\n39 19 tiles/dynamic_color_cube 0 ffffaa \r\n40 23 tiles/dynamic_color_cube 0 ffffaa \r\n43 24 tiles/dynamic_color_cube 0 ffffaa \r\n44 16 tiles/dynamic_color_cube 0 ffffaa \r\n40 20 tiles/dynamic_color_cube 0 ffffaa \r\n44 18 tiles/dynamic_color_cube 0 ffffaa \r\n35 22 tiles/dynamic_color_cube 0 ffffaa \r\n47 19 tiles/dynamic_color_cube 0 ffffaa \r\n35 19 tiles/dynamic_color_cube 0 ffffaa \r\n36 23 tiles/dynamic_color_cube 0 ffffaa \r\n48 20 tiles/dynamic_color_cube 0 ffffaa \r\n42 24 tiles/dynamic_color_cube 0 ffffaa \r\n36 20 tiles/dynamic_color_cube 0 ffffaa \r\n41 24 tiles/dynamic_color_cube 0 ffffaa \r\n48 24 tiles/color_cube 14 \r\n51 25 tiles/dynamic_color_cube 0 bbffaa \r\n50 25 tiles/color_cube 14 \r\n39 17 tiles/dynamic_color_cube 0 66eeff \r\n40 17 tiles/dynamic_color_cube 0 66eeff \r\n40 16 tiles/dynamic_color_cube 0 66eeff \r\n39 16 tiles/dynamic_color_cube 0 66eeff \r\n39 15 tiles/dynamic_color_cube 0 66eeff \r\n39 14 tiles/dynamic_color_cube 0 66eeff \r\n39 13 tiles/dynamic_color_cube 0 66eeff \r\n40 15 tiles/dynamic_color_cube 0 66eeff \r\n40 14 tiles/dynamic_color_cube 0 66eeff \r\n40 13 tiles/dynamic_color_cube 0 66eeff \r\n42 12 tiles/dynamic_color_cube 0 66eeff \r\n39 12 tiles/dynamic_color_cube 0 66eeff \r\n40 12 tiles/dynamic_color_cube 0 66eeff \r\n41 12 tiles/dynamic_color_cube 0 66eeff \r\n39 11 tiles/dynamic_color_cube 0 66eeff \r\n40 11 tiles/dynamic_color_cube 0 66eeff \r\n41 11 tiles/dynamic_color_cube 0 66eeff \r\n42 11 tiles/dynamic_color_cube 0 66eeff \r\n43 11 tiles/dynamic_color_cube 0 66eeff \r\n47 18 tiles/dynamic_color_cube 0 66eeff \r\n47 16 tiles/dynamic_color_cube 0 66eeff \r\n47 17 tiles/dynamic_color_cube 0 66eeff \r\n47 14 tiles/dynamic_color_cube 0 66eeff \r\n47 15 tiles/dynamic_color_cube 0 66eeff \r\n48 18 tiles/dynamic_color_cube 0 66eeff \r\n48 17 tiles/dynamic_color_cube 0 66eeff \r\n48 16 tiles/dynamic_color_cube 0 66eeff \r\n48 15 tiles/dynamic_color_cube 0 66eeff \r\n48 14 tiles/dynamic_color_cube 0 66eeff \r\n50 13 tiles/dynamic_color_cube 0 66eeff \r\n49 13 tiles/dynamic_color_cube 0 66eeff \r\n48 13 tiles/dynamic_color_cube 0 66eeff \r\n49 14 tiles/dynamic_color_cube 0 66eeff \r\n50 23 tiles/color_cube 9 \r\n50 22 tiles/color_cube 9 \r\n51 22 tiles/color_cube 9 \r\n30 44 tiles/power_fruit 1 \r\n63 53 tiles/sets/rock 0 \r\n66 34 tiles/sets/rock 0 \r\n57 40 tiles/sets/grass 57 \r\n58 40 tiles/sets/grass 16 \r\n59 41 tiles/sets/grass 59 \r\n60 41 tiles/sets/grass 18 \r\n61 41 tiles/sets/grass 16 \r\n62 42 tiles/sets/grass 46 \r\n63 42 tiles/sets/grass 16 \r\n65 43 tiles/sets/grass 0 \r\n68 44 tiles/sets/grass 0 \r\n71 45 tiles/sets/grass 0 \r\n73 46 tiles/sets/grass 0 \r\n53 38 tiles/sets/grass 0 \r\n54 39 tiles/sets/grass 46 \r\n55 39 tiles/sets/grass 16 \r\n56 40 tiles/sets/grass 47 \r\n56 41 tiles/sets/grass 2 \r\n57 41 tiles/sets/grass 17 \r\n58 42 tiles/sets/grass 46 \r\n59 42 tiles/sets/grass 29 \r\n60 43 tiles/sets/grass 31 \r\n60 44 tiles/sets/grass 14 \r\n61 44 tiles/sets/grass 16 \r\n62 45 tiles/sets/grass 0 \r\n63 46 tiles/sets/grass 0 \r\n64 47 tiles/sets/grass 46 \r\n65 47 tiles/sets/grass 16 \r\n66 48 tiles/sets/grass 0 \r\n67 49 tiles/sets/grass 0 \r\n68 50 tiles/sets/grass 0 \r\n69 51 tiles/sets/grass 46 \r\n70 51 tiles/sets/grass 16 \r\n71 52 tiles/sets/grass 31 \r\n71 53 tiles/sets/grass 1 \r\n76 53 tiles/sets/grass 0 \r\n77 54 tiles/sets/grass 31 \r\n77 55 tiles/sets/grass 1 \r\n78 56 tiles/sets/grass 46 \r\n79 56 tiles/sets/grass 44 \r\n79 57 tiles/sets/grass 1 \r\n80 58 tiles/sets/grass 0 \r\n81 59 tiles/sets/grass 31 \r\n81 60 tiles/sets/grass 14 \r\n82 60 tiles/sets/grass 44 \r\n82 61 tiles/sets/grass 1 \r\n83 62 tiles/sets/grass 0 \r\n84 63 tiles/sets/grass 0 \r\n85 64 tiles/sets/grass 0 \r\n86 65 tiles/sets/grass 31 \r\n86 66 tiles/sets/grass 1 \r\n87 67 tiles/sets/grass 0 \r\n88 68 tiles/sets/grass 0 \r\n89 69 tiles/sets/grass 31 \r\n89 70 tiles/sets/grass 14 \r\n90 70 tiles/sets/grass 16 \r\n91 71 tiles/sets/grass 31 \r\n91 72 tiles/sets/grass 1 \r\n92 73 tiles/sets/grass 31 \r\n92 74 tiles/sets/grass 14 \r\n93 74 tiles/sets/grass 16 \r\n94 75 tiles/sets/grass 31 \r\n94 76 tiles/sets/grass 1 \r\n95 77 tiles/sets/grass 46 \r\n96 77 tiles/sets/grass 44 \r\n96 78 tiles/sets/grass 1 \r\n44 104 tiles/sets/grass 1 \r\n44 103 tiles/sets/grass 59 \r\n45 103 tiles/sets/grass 18 \r\n46 103 tiles/sets/grass 16 \r\n47 102 tiles/sets/grass 46 \r\n48 102 tiles/sets/grass 18 \r\n49 102 tiles/sets/grass 16 \r\n50 101 tiles/sets/grass 46 \r\n51 101 tiles/sets/grass 18 \r\n52 101 tiles/sets/grass 16 \r\n53 100 tiles/sets/grass 46 \r\n54 100 tiles/sets/grass 18 \r\n55 100 tiles/sets/grass 18 \r\n56 100 tiles/sets/grass 16 \r\n57 99 tiles/sets/grass 46 \r\n58 99 tiles/sets/grass 18 \r\n59 99 tiles/sets/grass 16 \r\n60 98 tiles/sets/grass 46 \r\n61 98 tiles/sets/grass 18 \r\n62 98 tiles/sets/grass 16 \r\n63 97 tiles/sets/grass 46 \r\n64 97 tiles/sets/grass 18 \r\n65 97 tiles/sets/grass 16 \r\n66 96 tiles/sets/grass 46 \r\n67 96 tiles/sets/grass 18 \r\n68 96 tiles/sets/grass 16 \r\n69 95 tiles/sets/grass 46 \r\n70 95 tiles/sets/grass 18 \r\n71 95 tiles/sets/grass 16 \r\n72 94 tiles/sets/grass 46 \r\n73 94 tiles/sets/grass 27 \r\n75 93 tiles/sets/grass 18 \r\n76 93 tiles/sets/grass 18 \r\n77 93 tiles/sets/grass 18 \r\n78 93 tiles/sets/grass 16 \r\n79 92 tiles/sets/grass 46 \r\n80 92 tiles/sets/grass 18 \r\n81 92 tiles/sets/grass 16 \r\n82 91 tiles/sets/grass 46 \r\n83 91 tiles/sets/grass 18 \r\n84 91 tiles/sets/grass 29 \r\n84 90 tiles/sets/grass 59 \r\n85 90 tiles/sets/grass 18 \r\n86 90 tiles/sets/grass 18 \r\n87 90 tiles/sets/grass 16 \r\n88 89 tiles/sets/grass 46 \r\n89 89 tiles/sets/grass 18 \r\n90 89 tiles/sets/grass 16 \r\n91 88 tiles/sets/grass 46 \r\n92 88 tiles/sets/grass 18 \r\n93 88 tiles/sets/grass 16 \r\n94 87 tiles/sets/grass 46 \r\n95 87 tiles/sets/grass 18 \r\n96 87 tiles/sets/grass 16 \r\n97 86 tiles/sets/grass 46 \r\n98 86 tiles/sets/grass 18 \r\n99 86 tiles/sets/grass 18 \r\n100 86 tiles/sets/grass 27 \r\n101 85 tiles/sets/grass 49 \r\n102 85 tiles/sets/grass 57 \r\n103 85 tiles/sets/grass 16 \r\n104 84 tiles/sets/grass 46 \r\n105 84 tiles/sets/grass 16 \r\n106 83 tiles/sets/grass 46 \r\n107 83 tiles/sets/grass 18 \r\n108 83 tiles/sets/grass 18 \r\n109 83 tiles/sets/grass 16 \r\n110 82 tiles/sets/grass 46 \r\n111 82 tiles/sets/grass 18 \r\n112 82 tiles/sets/grass 16 \r\n37 80 tiles/sets/grass 31 \r\n37 81 tiles/sets/grass 41 \r\n37 83 tiles/sets/grass 3 \r\n37 84 tiles/sets/grass 3 \r\n37 85 tiles/sets/grass 3 \r\n37 86 tiles/sets/grass 3 \r\n37 87 tiles/sets/grass 1 \r\n38 88 tiles/sets/grass 31 \r\n38 89 tiles/sets/grass 3 \r\n38 90 tiles/sets/grass 3 \r\n38 91 tiles/sets/grass 3 \r\n38 92 tiles/sets/grass 3 \r\n38 93 tiles/sets/grass 3 \r\n38 94 tiles/sets/grass 3 \r\n38 95 tiles/sets/grass 3 \r\n38 96 tiles/sets/grass 14 \r\n39 96 tiles/sets/grass 16 \r\n46 76 tiles/sets/grass 31 \r\n46 77 tiles/sets/grass 1 \r\n47 78 tiles/sets/grass 31 \r\n47 79 tiles/sets/grass 1 \r\n48 80 tiles/sets/grass 31 \r\n48 81 tiles/sets/grass 3 \r\n48 82 tiles/sets/grass 1 \r\n49 83 tiles/sets/grass 31 \r\n49 84 tiles/sets/grass 1 \r\n50 85 tiles/sets/grass 0 \r\n51 86 tiles/sets/grass 31 \r\n51 87 tiles/sets/grass 3 \r\n51 88 tiles/sets/grass 1 \r\n52 89 tiles/sets/grass 31 \r\n52 90 tiles/sets/grass 14 \r\n53 90 tiles/sets/grass 16 \r\n39 56 tiles/sets/grass 0 \r\n40 57 tiles/sets/grass 0 \r\n41 58 tiles/sets/grass 0 \r\n42 59 tiles/sets/grass 0 \r\n43 60 tiles/sets/grass 0 \r\n44 61 tiles/sets/grass 0 \r\n45 62 tiles/sets/grass 0 \r\n46 63 tiles/sets/grass 0 \r\n47 64 tiles/sets/grass 0 \r\n48 65 tiles/sets/grass 0 \r\n49 66 tiles/sets/grass 0 \r\n50 67 tiles/sets/grass 0 \r\n51 68 tiles/sets/grass 0 \r\n52 69 tiles/sets/grass 0 \r\n53 70 tiles/sets/grass 0 \r\n54 71 tiles/sets/grass 0 \r\n55 72 tiles/sets/grass 0 \r\n56 73 tiles/sets/grass 0 \r\n57 74 tiles/sets/grass 0 \r\n58 75 tiles/sets/grass 0 \r\n59 76 tiles/sets/grass 0 \r\n60 77 tiles/sets/grass 0 \r\n61 78 tiles/sets/grass 0 \r\n62 79 tiles/sets/grass 46 \r\n63 80 tiles/sets/grass 14 \r\n64 81 tiles/sets/grass 2 \r\n65 82 tiles/sets/grass 14 \r\n51 57 tiles/sets/grass 0 \r\n52 58 tiles/sets/grass 46 \r\n53 58 tiles/sets/grass 16 \r\n54 59 tiles/sets/grass 31 \r\n54 60 tiles/sets/grass 14 \r\n55 60 tiles/sets/grass 16 \r\n56 61 tiles/sets/grass 0 \r\n57 62 tiles/sets/grass 0 \r\n58 63 tiles/sets/grass 0 \r\n59 64 tiles/sets/grass 46 \r\n60 64 tiles/sets/grass 44 \r\n60 65 tiles/sets/grass 1 \r\n61 66 tiles/sets/grass 46 \r\n62 66 tiles/sets/grass 16 \r\n63 67 tiles/sets/grass 31 \r\n63 68 tiles/sets/grass 14 \r\n64 68 tiles/sets/grass 16 \r\n65 69 tiles/sets/grass 0 \r\n28 97 tiles/sets/grass 0 \r\n27 96 tiles/sets/grass 0 \r\n26 95 tiles/sets/grass 1 \r\n26 94 tiles/sets/grass 3 \r\n26 93 tiles/sets/grass 3 \r\n26 92 tiles/sets/grass 31 \r\n25 91 tiles/sets/grass 0 \r\n24 90 tiles/sets/grass 1 \r\n24 89 tiles/sets/grass 31 \r\n23 88 tiles/sets/grass 0 \r\n22 87 tiles/sets/grass 1 \r\n22 86 tiles/sets/grass 44 \r\n21 86 tiles/sets/grass 14 \r\n21 85 tiles/sets/grass 31 \r\n20 84 tiles/sets/grass 1 \r\n20 83 tiles/sets/grass 31 \r\n19 82 tiles/sets/grass 1 \r\n19 81 tiles/sets/grass 44 \r\n18 81 tiles/sets/grass 46 \r\n17 80 tiles/sets/grass 1 \r\n17 79 tiles/sets/grass 31 \r\n16 78 tiles/sets/grass 1 \r\n16 77 tiles/sets/grass 31 \r\n15 76 tiles/sets/grass 0 \r\n14 75 tiles/sets/grass 1 \r\n14 74 tiles/sets/grass 31 \r\n13 73 tiles/sets/grass 1 \r\n13 72 tiles/sets/grass 31 \r\n12 71 tiles/sets/grass 16 \r\n11 71 tiles/sets/grass 14 \r\n11 70 tiles/sets/grass 31 \r\n10 69 tiles/sets/grass 1 \r\n10 68 tiles/sets/grass 31 \r\n9 67 tiles/sets/grass 1 \r\n9 66 tiles/sets/grass 44 \r\n8 66 tiles/sets/grass 14 \r\n8 65 tiles/sets/grass 31 \r\n7 64 tiles/sets/grass 0 \r\n6 63 tiles/sets/grass 1 \r\n6 62 tiles/sets/grass 31 \r\n5 61 tiles/sets/grass 0 \r\n4 60 tiles/sets/grass 1 \r\n4 59 tiles/sets/grass 31 \r\n3 58 tiles/sets/grass 1 \r\n3 57 tiles/sets/grass 31 \r\n2 56 tiles/sets/grass 0 \r\n1 55 tiles/sets/grass 0 \r\n0 54 tiles/sets/grass 1 \r\n0 53 tiles/sets/grass 3 \r\n0 52 tiles/sets/grass 31 \r\n9 40 tiles/sets/grass 0 \r\n10 41 tiles/sets/grass 31 \r\n10 42 tiles/sets/grass 1 \r\n11 43 tiles/sets/grass 31 \r\n11 44 tiles/sets/grass 1 \r\n12 45 tiles/sets/grass 0 \r\n13 46 tiles/sets/grass 31 \r\n13 47 tiles/sets/grass 1 \r\n14 48 tiles/sets/grass 0 \r\n15 49 tiles/sets/grass 31 \r\n15 50 tiles/sets/grass 14 \r\n16 50 tiles/sets/grass 44 \r\n16 51 tiles/sets/grass 1 \r\n17 52 tiles/sets/grass 31 \r\n17 53 tiles/sets/grass 1 \r\n18 54 tiles/sets/grass 31 \r\n18 55 tiles/sets/grass 14 \r\n19 55 tiles/sets/grass 44 \r\n19 56 tiles/sets/grass 1 \r\n20 57 tiles/sets/grass 0 \r\n21 58 tiles/sets/grass 31 \r\n21 59 tiles/sets/grass 1 \r\n22 60 tiles/sets/grass 0 \r\n23 61 tiles/sets/grass 31 \r\n23 62 tiles/sets/grass 1 \r\n24 63 tiles/sets/grass 31 \r\n24 64 tiles/sets/grass 1 \r\n25 65 tiles/sets/grass 0 \r\n26 66 tiles/sets/grass 0 \r\n27 67 tiles/sets/grass 31 \r\n27 68 tiles/sets/grass 1 \r\n28 69 tiles/sets/grass 31 \r\n28 70 tiles/sets/grass 1 \r\n29 71 tiles/sets/grass 0 \r\n30 72 tiles/sets/grass 31 \r\n30 73 tiles/sets/grass 1 \r\n31 74 tiles/sets/grass 31 \r\n31 75 tiles/sets/grass 1 \r\n32 76 tiles/sets/grass 46 \r\n33 76 tiles/sets/grass 44 \r\n33 77 tiles/sets/grass 1 \r\n34 78 tiles/sets/grass 31 \r\n34 79 tiles/sets/grass 1 \r\n35 80 tiles/sets/grass 31 \r\n35 81 tiles/sets/grass 14 \r\n36 81 tiles/sets/grass 56 \r\n36 82 tiles/sets/grass 2 \r\n37 82 tiles/sets/grass 42 \r\n5 105 tiles/sets/grass 1 \r\n5 104 tiles/sets/grass 59 \r\n6 104 tiles/sets/grass 18 \r\n7 104 tiles/sets/grass 18 \r\n8 104 tiles/sets/grass 18 \r\n9 104 tiles/sets/grass 16 \r\n10 103 tiles/sets/grass 46 \r\n11 103 tiles/sets/grass 18 \r\n12 103 tiles/sets/grass 18 \r\n13 103 tiles/sets/grass 18 \r\n14 103 tiles/sets/grass 18 \r\n15 103 tiles/sets/grass 16 \r\n16 102 tiles/sets/grass 46 \r\n17 102 tiles/sets/grass 18 \r\n18 102 tiles/sets/grass 18 \r\n19 102 tiles/sets/grass 18 \r\n20 102 tiles/sets/grass 18 \r\n21 102 tiles/sets/grass 16 \r\n22 101 tiles/sets/grass 46 \r\n23 101 tiles/sets/grass 18 \r\n24 101 tiles/sets/grass 18 \r\n25 101 tiles/sets/grass 18 \r\n26 101 tiles/sets/grass 16 \r\n27 100 tiles/sets/grass 46 \r\n28 100 tiles/sets/grass 18 \r\n29 100 tiles/sets/grass 18 \r\n30 100 tiles/sets/grass 18 \r\n31 100 tiles/sets/grass 18 \r\n32 100 tiles/sets/grass 16 \r\n33 99 tiles/sets/grass 46 \r\n34 99 tiles/sets/grass 18 \r\n35 99 tiles/sets/grass 18 \r\n36 99 tiles/sets/grass 18 \r\n37 99 tiles/sets/grass 18 \r\n38 99 tiles/sets/grass 16 \r\n39 98 tiles/sets/grass 46 \r\n40 98 tiles/sets/grass 18 \r\n41 98 tiles/sets/grass 18 \r\n42 98 tiles/sets/grass 18 \r\n43 98 tiles/sets/grass 16 \r\n44 97 tiles/sets/grass 46 \r\n45 97 tiles/sets/grass 18 \r\n46 97 tiles/sets/grass 18 \r\n47 97 tiles/sets/grass 18 \r\n48 97 tiles/sets/grass 18 \r\n49 97 tiles/sets/grass 16 \r\n50 96 tiles/sets/grass 46 \r\n51 96 tiles/sets/grass 18 \r\n52 96 tiles/sets/grass 18 \r\n53 96 tiles/sets/grass 18 \r\n54 96 tiles/sets/grass 18 \r\n55 96 tiles/sets/grass 16 \r\n56 95 tiles/sets/grass 46 \r\n57 95 tiles/sets/grass 18 \r\n58 95 tiles/sets/grass 18 \r\n59 95 tiles/sets/grass 18 \r\n60 95 tiles/sets/grass 16 \r\n61 94 tiles/sets/grass 46 \r\n62 94 tiles/sets/grass 18 \r\n63 94 tiles/sets/grass 18 \r\n64 94 tiles/sets/grass 18 \r\n65 94 tiles/sets/grass 18 \r\n66 94 tiles/sets/grass 16 \r\n67 93 tiles/sets/grass 46 \r\n68 93 tiles/sets/grass 18 \r\n69 93 tiles/sets/grass 18 \r\n70 93 tiles/sets/grass 18 \r\n71 93 tiles/sets/grass 16 \r\n72 92 tiles/sets/grass 14 \r\n93 120 tiles/sets/grass 0 \r\n92 119 tiles/sets/grass 0 \r\n91 118 tiles/sets/grass 1 \r\n91 117 tiles/sets/grass 31 \r\n90 116 tiles/sets/grass 1 \r\n90 115 tiles/sets/grass 44 \r\n89 115 tiles/sets/grass 46 \r\n88 114 tiles/sets/grass 1 \r\n88 113 tiles/sets/grass 31 \r\n87 112 tiles/sets/grass 1 \r\n87 111 tiles/sets/grass 44 \r\n86 111 tiles/sets/grass 14 \r\n86 110 tiles/sets/grass 31 \r\n85 109 tiles/sets/grass 0 \r\n84 108 tiles/sets/grass 1 \r\n84 107 tiles/sets/grass 31 \r\n83 106 tiles/sets/grass 0 \r\n82 105 tiles/sets/grass 0 \r\n81 104 tiles/sets/grass 1 \r\n81 103 tiles/sets/grass 31 \r\n80 102 tiles/sets/grass 0 \r\n79 101 tiles/sets/grass 1 \r\n79 100 tiles/sets/grass 31 \r\n78 99 tiles/sets/grass 0 \r\n77 98 tiles/sets/grass 0 \r\n76 97 tiles/sets/grass 1 \r\n76 96 tiles/sets/grass 31 \r\n75 95 tiles/sets/grass 0 \r\n74 94 tiles/sets/grass 17 \r\n74 93 tiles/sets/grass 57 \r\n73 93 tiles/sets/grass 12 \r\n73 92 tiles/sets/grass 44 \r\n72 91 tiles/sets/grass 3 \r\n72 90 tiles/sets/grass 31 \r\n71 89 tiles/sets/grass 16 \r\n70 89 tiles/sets/grass 14 \r\n70 88 tiles/sets/grass 31 \r\n69 87 tiles/sets/grass 1 \r\n69 86 tiles/sets/grass 31 \r\n68 85 tiles/sets/grass 0 \r\n67 84 tiles/sets/grass 0 \r\n66 83 tiles/sets/grass 1 \r\n66 82 tiles/sets/grass 44 \r\n65 81 tiles/sets/grass 42 \r\n65 80 tiles/sets/grass 32 \r\n64 80 tiles/sets/grass 56 \r\n63 79 tiles/sets/grass 43 \r\n63 78 tiles/sets/grass 3 \r\n63 77 tiles/sets/grass 31 \r\n119 119 tiles/sets/grass 31 \r\n119 120 tiles/sets/grass 3 \r\n119 121 tiles/sets/grass 1 \r\n120 122 tiles/sets/grass 31 \r\n120 123 tiles/sets/grass 3 \r\n120 124 tiles/sets/grass 1 \r\n121 125 tiles/sets/grass 31 \r\n121 126 tiles/sets/grass 3 \r\n121 127 tiles/sets/grass 3 \r\n121 128 tiles/sets/grass 1 \r\n122 129 tiles/sets/grass 31 \r\n122 130 tiles/sets/grass 3 \r\n122 131 tiles/sets/grass 1 \r\n123 132 tiles/sets/grass 31 \r\n123 133 tiles/sets/grass 3 \r\n123 134 tiles/sets/grass 3 \r\n123 135 tiles/sets/grass 1 \r\n124 136 tiles/sets/grass 31 \r\n124 137 tiles/sets/grass 3 \r\n124 138 tiles/sets/grass 1 \r\n125 139 tiles/sets/grass 31 \r\n125 140 tiles/sets/grass 3 \r\n125 141 tiles/sets/grass 1 \r\n126 142 tiles/sets/grass 31 \r\n126 143 tiles/sets/grass 3 \r\n126 144 tiles/sets/grass 1 \r\n127 145 tiles/sets/grass 31 \r\n127 146 tiles/sets/grass 3 \r\n127 147 tiles/sets/grass 1 \r\n128 148 tiles/sets/grass 31 \r\n128 149 tiles/sets/grass 3 \r\n128 150 tiles/sets/grass 3 \r\n128 151 tiles/sets/grass 1 \r\n129 152 tiles/sets/grass 31 \r\n129 153 tiles/sets/grass 3 \r\n129 154 tiles/sets/grass 1 \r\n130 155 tiles/sets/grass 31 \r\n130 156 tiles/sets/grass 3 \r\n130 157 tiles/sets/grass 3 \r\n130 158 tiles/sets/grass 1 \r\n131 159 tiles/sets/grass 31 \r\n131 160 tiles/sets/grass 3 \r\n131 161 tiles/sets/grass 1 \r\n132 162 tiles/sets/grass 31 \r\n132 163 tiles/sets/grass 3 \r\n132 164 tiles/sets/grass 1 \r\n133 165 tiles/sets/grass 31 \r\n133 166 tiles/sets/grass 3 \r\n133 167 tiles/sets/grass 1 \r\n134 168 tiles/sets/grass 31 \r\n134 169 tiles/sets/grass 3 \r\n134 170 tiles/sets/grass 3 \r\n134 171 tiles/sets/grass 1 \r\n135 172 tiles/sets/grass 31 \r\n135 173 tiles/sets/grass 3 \r\n135 174 tiles/sets/grass 14 \r\n136 174 tiles/sets/grass 16 \r\n137 114 tiles/sets/grass 0 \r\n138 115 tiles/sets/grass 31 \r\n138 116 tiles/sets/grass 1 \r\n139 117 tiles/sets/grass 31 \r\n139 118 tiles/sets/grass 1 \r\n140 119 tiles/sets/grass 0 \r\n141 120 tiles/sets/grass 31 \r\n141 121 tiles/sets/grass 1 \r\n142 122 tiles/sets/grass 0 \r\n143 123 tiles/sets/grass 31 \r\n143 124 tiles/sets/grass 14 \r\n144 124 tiles/sets/grass 44 \r\n144 125 tiles/sets/grass 1 \r\n145 126 tiles/sets/grass 31 \r\n145 127 tiles/sets/grass 1 \r\n146 128 tiles/sets/grass 31 \r\n146 129 tiles/sets/grass 14 \r\n147 129 tiles/sets/grass 44 \r\n147 130 tiles/sets/grass 1 \r\n148 131 tiles/sets/grass 0 \r\n149 132 tiles/sets/grass 31 \r\n149 133 tiles/sets/grass 1 \r\n150 134 tiles/sets/grass 0 \r\n151 135 tiles/sets/grass 31 \r\n151 136 tiles/sets/grass 1 \r\n152 137 tiles/sets/grass 31 \r\n152 138 tiles/sets/grass 1 \r\n153 139 tiles/sets/grass 46 \r\n154 139 tiles/sets/grass 44 \r\n154 140 tiles/sets/grass 1 \r\n155 141 tiles/sets/grass 31 \r\n155 142 tiles/sets/grass 1 \r\n156 143 tiles/sets/grass 31 \r\n156 144 tiles/sets/grass 14 \r\n157 144 tiles/sets/grass 44 \r\n157 145 tiles/sets/grass 1 \r\n158 146 tiles/sets/grass 31 \r\n158 147 tiles/sets/grass 1 \r\n159 148 tiles/sets/grass 0 \r\n160 149 tiles/sets/grass 0 \r\n161 150 tiles/sets/grass 31 \r\n161 151 tiles/sets/grass 1 \r\n162 152 tiles/sets/grass 31 \r\n162 153 tiles/sets/grass 1 \r\n163 154 tiles/sets/grass 31 \r\n163 155 tiles/sets/grass 1 \r\n39 47 tiles/sets/grass 0 \r\n38 46 tiles/sets/grass 1 \r\n38 45 tiles/sets/grass 3 \r\n38 44 tiles/sets/grass 31 \r\n37 43 tiles/sets/grass 1 \r\n37 42 tiles/sets/grass 3 \r\n37 41 tiles/sets/grass 31 \r\n36 40 tiles/sets/grass 1 \r\n36 39 tiles/sets/grass 3 \r\n36 38 tiles/sets/grass 3 \r\n36 37 tiles/sets/grass 31 \r\n35 36 tiles/sets/grass 1 \r\n35 35 tiles/sets/grass 3 \r\n35 34 tiles/sets/grass 31 \r\n34 33 tiles/sets/grass 1 \r\n34 32 tiles/sets/grass 3 \r\n34 31 tiles/sets/grass 31 \r\n66 60 tiles/sets/grass 0 \r\n67 61 tiles/sets/grass 46 \r\n68 61 tiles/sets/grass 16 \r\n69 62 tiles/sets/grass 46 \r\n70 62 tiles/sets/grass 44 \r\n70 63 tiles/sets/grass 1 \r\n71 64 tiles/sets/grass 46 \r\n72 64 tiles/sets/grass 16 \r\n73 65 tiles/sets/grass 46 \r\n74 65 tiles/sets/grass 44 \r\n74 66 tiles/sets/grass 1 \r\n75 67 tiles/sets/grass 46 \r\n76 67 tiles/sets/grass 16 \r\n77 68 tiles/sets/grass 46 \r\n78 68 tiles/sets/grass 44 \r\n78 69 tiles/sets/grass 1 \r\n79 70 tiles/sets/grass 46 \r\n80 70 tiles/sets/grass 16 \r\n81 71 tiles/sets/grass 46 \r\n82 71 tiles/sets/grass 44 \r\n82 72 tiles/sets/grass 1 \r\n83 73 tiles/sets/grass 46 \r\n84 73 tiles/sets/grass 16 \r\n85 74 tiles/sets/grass 46 \r\n86 74 tiles/sets/grass 44 \r\n86 75 tiles/sets/grass 14 \r\n87 75 tiles/sets/grass 16 \r\n88 76 tiles/sets/grass 0 \r\n89 77 tiles/sets/grass 46 \r\n90 77 tiles/sets/grass 44 \r\n90 78 tiles/sets/grass 14 \r\n91 78 tiles/sets/grass 16 \r\n92 79 tiles/sets/grass 0 \r\n93 80 tiles/sets/grass 46 \r\n94 80 tiles/sets/grass 16 \r\n95 81 tiles/sets/grass 0 \r\n96 82 tiles/sets/grass 0 \r\n97 83 tiles/sets/grass 46 \r\n98 83 tiles/sets/grass 16 \r\n99 84 tiles/sets/grass 0 \r\n100 85 tiles/sets/grass 47 \r\n101 86 tiles/sets/grass 19 \r\n102 86 tiles/sets/grass 17 \r\n103 87 tiles/sets/grass 0 \r\n104 88 tiles/sets/grass 0 \r\n105 89 tiles/sets/grass 46 \r\n106 89 tiles/sets/grass 16 \r\n107 90 tiles/sets/grass 0 \r\n108 91 tiles/sets/grass 46 \r\n109 91 tiles/sets/grass 16 \r\n110 92 tiles/sets/grass 0 \r\n111 93 tiles/sets/grass 0 \r\n112 94 tiles/sets/grass 46 \r\n113 94 tiles/sets/grass 16 \r\n114 95 tiles/sets/grass 0 \r\n115 96 tiles/sets/grass 0 \r\n107 104 tiles/sets/grass 16 \r\n106 104 tiles/sets/grass 59 \r\n106 105 tiles/sets/grass 3 \r\n106 106 tiles/sets/grass 3 \r\n106 107 tiles/sets/grass 3 \r\n106 108 tiles/sets/grass 3 \r\n105 109 tiles/sets/grass 59 \r\n105 110 tiles/sets/grass 3 \r\n105 111 tiles/sets/grass 3 \r\n105 112 tiles/sets/grass 3 \r\n105 113 tiles/sets/grass 1 \r\n104 114 tiles/sets/grass 31 \r\n104 115 tiles/sets/grass 3 \r\n104 116 tiles/sets/grass 3 \r\n104 117 tiles/sets/grass 3 \r\n104 118 tiles/sets/grass 3 \r\n104 119 tiles/sets/grass 1 \r\n103 120 tiles/sets/grass 31 \r\n103 121 tiles/sets/grass 3 \r\n103 122 tiles/sets/grass 3 \r\n103 123 tiles/sets/grass 3 \r\n103 124 tiles/sets/grass 1 \r\n102 125 tiles/sets/grass 31 \r\n102 126 tiles/sets/grass 3 \r\n102 127 tiles/sets/grass 3 \r\n102 128 tiles/sets/grass 3 \r\n102 129 tiles/sets/grass 1 \r\n101 130 tiles/sets/grass 31 \r\n101 131 tiles/sets/grass 3 \r\n101 132 tiles/sets/grass 3 \r\n101 133 tiles/sets/grass 3 \r\n101 134 tiles/sets/grass 3 \r\n101 135 tiles/sets/grass 29 \r\n100 135 tiles/sets/grass 59 \r\n100 136 tiles/sets/grass 3 \r\n100 137 tiles/sets/grass 3 \r\n100 138 tiles/sets/grass 3 \r\n100 139 tiles/sets/grass 1 \r\n99 140 tiles/sets/grass 31 \r\n99 141 tiles/sets/grass 3 \r\n99 142 tiles/sets/grass 3 \r\n99 143 tiles/sets/grass 3 \r\n99 144 tiles/sets/grass 1 \r\n98 145 tiles/sets/grass 31 \r\n98 146 tiles/sets/grass 3 \r\n98 147 tiles/sets/grass 3 \r\n98 148 tiles/sets/grass 3 \r\n98 149 tiles/sets/grass 3 \r\n98 150 tiles/sets/grass 1 \r\n97 151 tiles/sets/grass 31 \r\n97 152 tiles/sets/grass 3 \r\n97 153 tiles/sets/grass 3 \r\n97 154 tiles/sets/grass 3 \r\n97 155 tiles/sets/grass 1 \r\n96 156 tiles/sets/grass 31 \r\n96 157 tiles/sets/grass 3 \r\n96 158 tiles/sets/grass 3 \r\n96 159 tiles/sets/grass 3 \r\n96 160 tiles/sets/grass 1 \r\n95 161 tiles/sets/grass 31 \r\n95 162 tiles/sets/grass 3 \r\n95 163 tiles/sets/grass 3 \r\n95 164 tiles/sets/grass 3 \r\n95 165 tiles/sets/grass 3 \r\n95 166 tiles/sets/grass 1 \r\n106 109 tiles/sets/grass 29 \r\n237 164 tiles/sets/grass 16 \r\n238 165 tiles/sets/grass 0 \r\n239 166 tiles/sets/grass 0 \r\n240 167 tiles/sets/grass 0 \r\n241 168 tiles/sets/grass 0 \r\n242 169 tiles/sets/grass 0 \r\n243 170 tiles/sets/grass 0 \r\n244 171 tiles/sets/grass 0 \r\n245 172 tiles/sets/grass 0 \r\n246 173 tiles/sets/grass 0 \r\n247 174 tiles/sets/grass 0 \r\n248 175 tiles/sets/grass 0 \r\n249 176 tiles/sets/grass 0 \r\n250 177 tiles/sets/grass 0 \r\n251 178 tiles/sets/grass 0 \r\n252 179 tiles/sets/grass 0 \r\n253 180 tiles/sets/grass 0 \r\n254 181 tiles/sets/grass 0 \r\n255 182 tiles/sets/grass 0 \r\n256 183 tiles/sets/grass 0 \r\n257 184 tiles/sets/grass 0 \r\n258 185 tiles/sets/grass 0 \r\n259 186 tiles/sets/grass 0 \r\n260 187 tiles/sets/grass 0 \r\n261 188 tiles/sets/grass 0 \r\n262 189 tiles/sets/grass 0 \r\n263 190 tiles/sets/grass 0 \r\n264 191 tiles/sets/grass 0 \r\n265 192 tiles/sets/grass 0 \r\n266 193 tiles/sets/grass 0 \r\n267 194 tiles/sets/grass 0 \r\n268 195 tiles/sets/grass 0 \r\n269 196 tiles/sets/grass 0 \r\n270 197 tiles/sets/grass 0 \r\n271 198 tiles/sets/grass 0 \r\n272 199 tiles/sets/grass 0 \r\n273 200 tiles/sets/grass 0 \r\n275 202 tiles/sets/grass 0 \r\n276 203 tiles/sets/grass 0 \r\n277 204 tiles/sets/grass 0 \r\n278 205 tiles/sets/grass 0 \r\n279 206 tiles/sets/grass 0 \r\n280 207 tiles/sets/grass 0 \r\n274 201 tiles/sets/grass 0 \r\n236 165 tiles/sets/grass 3 \r\n236 166 tiles/sets/grass 3 \r\n236 167 tiles/sets/grass 3 \r\n236 168 tiles/sets/grass 3 \r\n236 169 tiles/sets/grass 3 \r\n236 170 tiles/sets/grass 3 \r\n236 171 tiles/sets/grass 3 \r\n236 172 tiles/sets/grass 3 \r\n236 173 tiles/sets/grass 3 \r\n236 174 tiles/sets/grass 3 \r\n236 175 tiles/sets/grass 3 \r\n236 176 tiles/sets/grass 3 \r\n236 177 tiles/sets/grass 3 \r\n236 178 tiles/sets/grass 3 \r\n236 179 tiles/sets/grass 3 \r\n236 180 tiles/sets/grass 3 \r\n236 183 tiles/sets/grass 3 \r\n236 184 tiles/sets/grass 3 \r\n236 185 tiles/sets/grass 3 \r\n236 186 tiles/sets/grass 3 \r\n236 187 tiles/sets/grass 3 \r\n236 188 tiles/sets/grass 3 \r\n236 189 tiles/sets/grass 3 \r\n236 190 tiles/sets/grass 3 \r\n236 191 tiles/sets/grass 3 \r\n236 192 tiles/sets/grass 3 \r\n236 193 tiles/sets/grass 3 \r\n236 194 tiles/sets/grass 3 \r\n236 195 tiles/sets/grass 3 \r\n236 196 tiles/sets/grass 3 \r\n236 197 tiles/sets/grass 3 \r\n236 198 tiles/sets/grass 3 \r\n236 199 tiles/sets/grass 3 \r\n236 200 tiles/sets/grass 3 \r\n236 201 tiles/sets/grass 3 \r\n236 202 tiles/sets/grass 3 \r\n236 203 tiles/sets/grass 3 \r\n236 204 tiles/sets/grass 3 \r\n236 205 tiles/sets/grass 3 \r\n236 206 tiles/sets/grass 3 \r\n236 207 tiles/sets/grass 3 \r\n236 208 tiles/sets/grass 3 \r\n236 209 tiles/sets/grass 3 \r\n236 210 tiles/sets/grass 3 \r\n236 211 tiles/sets/grass 3 \r\n236 212 tiles/sets/grass 3 \r\n236 213 tiles/sets/grass 3 \r\n236 214 tiles/sets/grass 3 \r\n236 215 tiles/sets/grass 3 \r\n236 216 tiles/sets/grass 3 \r\n236 217 tiles/sets/grass 3 \r\n236 218 tiles/sets/grass 3 \r\n236 219 tiles/sets/grass 3 \r\n236 220 tiles/sets/grass 3 \r\n236 221 tiles/sets/grass 3 \r\n236 222 tiles/sets/grass 3 \r\n281 208 tiles/sets/grass 0 \r\n236 163 tiles/sets/grass 31 \r\n236 164 tiles/sets/grass 13 \r\n236 223 tiles/sets/grass 3 \r\n236 224 tiles/sets/grass 3 \r\n236 225 tiles/sets/grass 3 \r\n236 226 tiles/sets/grass 3 \r\n236 227 tiles/sets/grass 1 \r\n236 181 tiles/sets/grass 3 \r\n236 182 tiles/sets/grass 3 \r\n198 67 tiles/sets/grass 46 \r\n199 67 tiles/sets/grass 18 \r\n200 67 tiles/sets/grass 18 \r\n201 67 tiles/sets/grass 18 \r\n202 67 tiles/sets/grass 18 \r\n203 67 tiles/sets/grass 16 \r\n204 68 tiles/sets/grass 46 \r\n205 68 tiles/sets/grass 18 \r\n206 68 tiles/sets/grass 18 \r\n207 68 tiles/sets/grass 18 \r\n208 68 tiles/sets/grass 18 \r\n209 68 tiles/sets/grass 16 \r\n210 69 tiles/sets/grass 46 \r\n211 69 tiles/sets/grass 18 \r\n212 69 tiles/sets/grass 18 \r\n213 69 tiles/sets/grass 18 \r\n214 69 tiles/sets/grass 18 \r\n215 69 tiles/sets/grass 18 \r\n216 69 tiles/sets/grass 16 \r\n217 70 tiles/sets/grass 46 \r\n218 70 tiles/sets/grass 18 \r\n219 70 tiles/sets/grass 18 \r\n220 70 tiles/sets/grass 18 \r\n221 70 tiles/sets/grass 18 \r\n222 70 tiles/sets/grass 16 \r\n223 71 tiles/sets/grass 46 \r\n224 71 tiles/sets/grass 18 \r\n225 71 tiles/sets/grass 18 \r\n226 71 tiles/sets/grass 18 \r\n227 71 tiles/sets/grass 18 \r\n228 71 tiles/sets/grass 16 \r\n229 72 tiles/sets/grass 46 \r\n230 72 tiles/sets/grass 18 \r\n231 72 tiles/sets/grass 18 \r\n232 72 tiles/sets/grass 18 \r\n233 72 tiles/sets/grass 18 \r\n234 72 tiles/sets/grass 18 \r\n235 72 tiles/sets/grass 16 \r\n236 73 tiles/sets/grass 46 \r\n237 73 tiles/sets/grass 18 \r\n238 73 tiles/sets/grass 18 \r\n239 73 tiles/sets/grass 18 \r\n240 73 tiles/sets/grass 18 \r\n241 73 tiles/sets/grass 16 \r\n242 74 tiles/sets/grass 46 \r\n243 74 tiles/sets/grass 18 \r\n244 74 tiles/sets/grass 18 \r\n245 74 tiles/sets/grass 18 \r\n246 74 tiles/sets/grass 18 \r\n247 74 tiles/sets/grass 18 \r\n248 74 tiles/sets/grass 16 \r\n249 75 tiles/sets/grass 46 \r\n250 75 tiles/sets/grass 18 \r\n251 75 tiles/sets/grass 18 \r\n252 75 tiles/sets/grass 18 \r\n253 75 tiles/sets/grass 18 \r\n254 75 tiles/sets/grass 16 \r\n255 76 tiles/sets/grass 46 \r\n256 76 tiles/sets/grass 18 \r\n257 76 tiles/sets/grass 18 \r\n258 76 tiles/sets/grass 18 \r\n259 76 tiles/sets/grass 18 \r\n260 76 tiles/sets/grass 16 \r\n261 77 tiles/sets/grass 46 \r\n262 77 tiles/sets/grass 18 \r\n263 77 tiles/sets/grass 18 \r\n264 77 tiles/sets/grass 18 \r\n265 77 tiles/sets/grass 18 \r\n266 77 tiles/sets/grass 16 \r\n267 78 tiles/sets/grass 46 \r\n268 78 tiles/sets/grass 18 \r\n269 78 tiles/sets/grass 18 \r\n270 78 tiles/sets/grass 18 \r\n271 78 tiles/sets/grass 18 \r\n272 78 tiles/sets/grass 16 \r\n273 79 tiles/sets/grass 46 \r\n274 79 tiles/sets/grass 18 \r\n275 79 tiles/sets/grass 18 \r\n276 79 tiles/sets/grass 18 \r\n277 79 tiles/sets/grass 18 \r\n278 79 tiles/sets/grass 18 \r\n279 79 tiles/sets/grass 16 \r\n280 80 tiles/sets/grass 46 \r\n281 80 tiles/sets/grass 18 \r\n282 80 tiles/sets/grass 18 \r\n283 80 tiles/sets/grass 18 \r\n284 80 tiles/sets/grass 18 \r\n285 80 tiles/sets/grass 16 \r\n286 81 tiles/sets/grass 46 \r\n287 81 tiles/sets/grass 18 \r\n288 81 tiles/sets/grass 18 \r\n289 81 tiles/sets/grass 18 \r\n290 81 tiles/sets/grass 18 \r\n291 81 tiles/sets/grass 16 \r\n292 82 tiles/sets/grass 46 \r\n293 82 tiles/sets/grass 18 \r\n294 82 tiles/sets/grass 18 \r\n295 82 tiles/sets/grass 18 \r\n296 82 tiles/sets/grass 18 \r\n297 82 tiles/sets/grass 18 \r\n298 82 tiles/sets/grass 16 \r\n299 83 tiles/sets/grass 46 \r\n300 83 tiles/sets/grass 18 \r\n301 83 tiles/sets/grass 18 \r\n302 83 tiles/sets/grass 18 \r\n303 83 tiles/sets/grass 18 \r\n304 83 tiles/sets/grass 16 \r\n305 84 tiles/sets/grass 46 \r\n306 84 tiles/sets/grass 18 \r\n307 84 tiles/sets/grass 18 \r\n308 84 tiles/sets/grass 18 \r\n309 84 tiles/sets/grass 18 \r\n310 84 tiles/sets/grass 18 \r\n311 84 tiles/sets/grass 16 \r\n312 85 tiles/sets/grass 46 \r\n313 85 tiles/sets/grass 18 \r\n314 85 tiles/sets/grass 18 \r\n315 85 tiles/sets/grass 18 \r\n316 85 tiles/sets/grass 18 \r\n317 85 tiles/sets/grass 16 \r\n318 86 tiles/sets/grass 46 \r\n319 86 tiles/sets/grass 18 \r\n320 86 tiles/sets/grass 18 \r\n321 86 tiles/sets/grass 18 \r\n322 86 tiles/sets/grass 18 \r\n323 86 tiles/sets/grass 16 \r\n324 87 tiles/sets/grass 46 \r\n325 87 tiles/sets/grass 18 \r\n326 87 tiles/sets/grass 18 \r\n327 87 tiles/sets/grass 18 \r\n328 87 tiles/sets/grass 18 \r\n329 87 tiles/sets/grass 16 \r\n330 88 tiles/sets/grass 46 \r\n331 88 tiles/sets/grass 18 \r\n332 88 tiles/sets/grass 18 \r\n333 88 tiles/sets/grass 18 \r\n334 88 tiles/sets/grass 18 \r\n335 88 tiles/sets/grass 16 \r\n336 89 tiles/sets/grass 46 \r\n337 89 tiles/sets/grass 18 \r\n338 89 tiles/sets/grass 18 \r\n339 89 tiles/sets/grass 18 \r\n340 89 tiles/sets/grass 18 \r\n341 89 tiles/sets/grass 18 \r\n342 89 tiles/sets/grass 16 \r\n343 90 tiles/sets/grass 46 \r\n344 90 tiles/sets/grass 18 \r\n345 90 tiles/sets/grass 18 \r\n346 90 tiles/sets/grass 18 \r\n347 90 tiles/sets/grass 18 \r\n348 90 tiles/sets/grass 16 \r\n349 91 tiles/sets/grass 46 \r\n350 91 tiles/sets/grass 18 \r\n351 91 tiles/sets/grass 18 \r\n352 91 tiles/sets/grass 18 \r\n353 91 tiles/sets/grass 18 \r\n354 91 tiles/sets/grass 16 \r\n355 92 tiles/sets/grass 46 \r\n356 92 tiles/sets/grass 18 \r\n357 92 tiles/sets/grass 18 \r\n358 92 tiles/sets/grass 18 \r\n359 92 tiles/sets/grass 18 \r\n360 92 tiles/sets/grass 18 \r\n361 92 tiles/sets/grass 16 \r\n362 93 tiles/sets/grass 46 \r\n363 93 tiles/sets/grass 18 \r\n364 93 tiles/sets/grass 18 \r\n365 93 tiles/sets/grass 18 \r\n366 93 tiles/sets/grass 18 \r\n367 93 tiles/sets/grass 16 \r\n368 94 tiles/sets/grass 46 \r\n369 94 tiles/sets/grass 18 \r\n370 94 tiles/sets/grass 18 \r\n371 94 tiles/sets/grass 18 \r\n372 94 tiles/sets/grass 18 \r\n373 94 tiles/sets/grass 18 \r\n374 94 tiles/sets/grass 16 \r\n375 95 tiles/sets/grass 46 \r\n376 95 tiles/sets/grass 18 \r\n377 95 tiles/sets/grass 18 \r\n378 95 tiles/sets/grass 18 \r\n379 95 tiles/sets/grass 18 \r\n380 95 tiles/sets/grass 16 \r\n381 96 tiles/sets/grass 46 \r\n382 96 tiles/sets/grass 18 \r\n383 96 tiles/sets/grass 18 \r\n384 96 tiles/sets/grass 18 \r\n385 96 tiles/sets/grass 18 \r\n386 96 tiles/sets/grass 16 \r\n387 97 tiles/sets/grass 46 \r\n388 97 tiles/sets/grass 18 \r\n389 97 tiles/sets/grass 18 \r\n390 97 tiles/sets/grass 18 \r\n391 97 tiles/sets/grass 18 \r\n392 97 tiles/sets/grass 16 \r\n393 98 tiles/sets/grass 46 \r\n394 98 tiles/sets/grass 18 \r\n395 98 tiles/sets/grass 18 \r\n396 98 tiles/sets/grass 18 \r\n397 98 tiles/sets/grass 18 \r\n398 98 tiles/sets/grass 16 \r\n399 99 tiles/sets/grass 46 \r\n400 99 tiles/sets/grass 18 \r\n401 99 tiles/sets/grass 18 \r\n402 99 tiles/sets/grass 18 \r\n403 99 tiles/sets/grass 18 \r\n404 99 tiles/sets/grass 18 \r\n405 99 tiles/sets/grass 16 \r\n406 100 tiles/sets/grass 46 \r\n407 100 tiles/sets/grass 18 \r\n408 100 tiles/sets/grass 18 \r\n409 100 tiles/sets/grass 18 \r\n410 100 tiles/sets/grass 18 \r\n411 100 tiles/sets/grass 16 \r\n412 101 tiles/sets/grass 46 \r\n413 101 tiles/sets/grass 18 \r\n414 101 tiles/sets/grass 18 \r\n415 101 tiles/sets/grass 18 \r\n416 101 tiles/sets/grass 18 \r\n417 101 tiles/sets/grass 16 \r\n418 102 tiles/sets/grass 46 \r\n419 102 tiles/sets/grass 18 \r\n420 102 tiles/sets/grass 18 \r\n421 102 tiles/sets/grass 18 \r\n422 102 tiles/sets/grass 18 \r\n423 102 tiles/sets/grass 18 \r\n424 102 tiles/sets/grass 16 \r\n425 103 tiles/sets/grass 46 \r\n426 103 tiles/sets/grass 18 \r\n427 103 tiles/sets/grass 18 \r\n428 103 tiles/sets/grass 18 \r\n429 103 tiles/sets/grass 18 \r\n430 103 tiles/sets/grass 16 \r\n431 104 tiles/sets/grass 46 \r\n432 104 tiles/sets/grass 18 \r\n433 104 tiles/sets/grass 18 \r\n434 104 tiles/sets/grass 18 \r\n435 104 tiles/sets/grass 18 \r\n436 104 tiles/sets/grass 18 \r\n437 104 tiles/sets/grass 16 \r\n438 105 tiles/sets/grass 46 \r\n439 105 tiles/sets/grass 18 \r\n440 105 tiles/sets/grass 18 \r\n441 105 tiles/sets/grass 18 \r\n442 105 tiles/sets/grass 18 \r\n443 105 tiles/sets/grass 16 \r\n444 106 tiles/sets/grass 46 \r\n445 106 tiles/sets/grass 18 \r\n446 106 tiles/sets/grass 18 \r\n447 106 tiles/sets/grass 18 \r\n448 106 tiles/sets/grass 18 \r\n449 106 tiles/sets/grass 16 \r\n450 107 tiles/sets/grass 46 \r\n451 107 tiles/sets/grass 18 \r\n452 107 tiles/sets/grass 18 \r\n453 107 tiles/sets/grass 18 \r\n454 107 tiles/sets/grass 18 \r\n455 107 tiles/sets/grass 16 \r\n456 108 tiles/sets/grass 46 \r\n457 108 tiles/sets/grass 18 \r\n458 108 tiles/sets/grass 18 \r\n459 108 tiles/sets/grass 18 \r\n460 108 tiles/sets/grass 18 \r\n461 108 tiles/sets/grass 16 \r\n462 109 tiles/sets/grass 46 \r\n463 109 tiles/sets/grass 18 \r\n464 109 tiles/sets/grass 18 \r\n465 109 tiles/sets/grass 18 \r\n466 109 tiles/sets/grass 18 \r\n467 109 tiles/sets/grass 18 \r\n468 109 tiles/sets/grass 16 \r\n469 110 tiles/sets/grass 46 \r\n470 110 tiles/sets/grass 18 \r\n471 110 tiles/sets/grass 18 \r\n472 110 tiles/sets/grass 18 \r\n473 110 tiles/sets/grass 18 \r\n474 110 tiles/sets/grass 16 \r\n475 111 tiles/sets/grass 46 \r\n476 111 tiles/sets/grass 18 \r\n477 111 tiles/sets/grass 18 \r\n478 111 tiles/sets/grass 18 \r\n479 111 tiles/sets/grass 18 \r\n480 111 tiles/sets/grass 16 \r\n481 112 tiles/sets/grass 46 \r\n482 112 tiles/sets/grass 18 \r\n483 112 tiles/sets/grass 18 \r\n484 112 tiles/sets/grass 18 \r\n485 112 tiles/sets/grass 18 \r\n486 112 tiles/sets/grass 18 \r\n487 112 tiles/sets/grass 16 \r\n488 113 tiles/sets/grass 46 \r\n489 113 tiles/sets/grass 18 \r\n490 113 tiles/sets/grass 18 \r\n491 113 tiles/sets/grass 18 \r\n492 113 tiles/sets/grass 18 \r\n493 113 tiles/sets/grass 16 \r\n494 114 tiles/sets/grass 46 \r\n495 114 tiles/sets/grass 18 \r\n496 114 tiles/sets/grass 18 \r\n497 114 tiles/sets/grass 18 \r\n498 114 tiles/sets/grass 18 \r\n499 114 tiles/sets/grass 18 \r\n500 114 tiles/sets/grass 16 \r\n501 115 tiles/sets/grass 46 \r\n502 115 tiles/sets/grass 18 \r\n503 115 tiles/sets/grass 18 \r\n504 115 tiles/sets/grass 18 \r\n505 115 tiles/sets/grass 18 \r\n506 115 tiles/sets/grass 16 \r\n507 116 tiles/sets/grass 46 \r\n508 116 tiles/sets/grass 18 \r\n509 116 tiles/sets/grass 18 \r\n510 116 tiles/sets/grass 18 \r\n511 116 tiles/sets/grass 18 \r\n512 116 tiles/sets/grass 16 \r\n513 117 tiles/sets/grass 46 \r\n514 117 tiles/sets/grass 18 \r\n515 117 tiles/sets/grass 18 \r\n516 117 tiles/sets/grass 18 \r\n517 117 tiles/sets/grass 18 \r\n518 117 tiles/sets/grass 16 \r\n519 118 tiles/sets/grass 46 \r\n520 118 tiles/sets/grass 18 \r\n521 118 tiles/sets/grass 18 \r\n522 118 tiles/sets/grass 18 \r\n523 118 tiles/sets/grass 18 \r\n524 118 tiles/sets/grass 16 \r\n525 119 tiles/sets/grass 46 \r\n526 119 tiles/sets/grass 18 \r\n527 119 tiles/sets/grass 18 \r\n528 119 tiles/sets/grass 18 \r\n529 119 tiles/sets/grass 18 \r\n530 119 tiles/sets/grass 18 \r\n531 119 tiles/sets/grass 16 \r\n532 120 tiles/sets/grass 46 \r\n533 120 tiles/sets/grass 18 \r\n534 120 tiles/sets/grass 18 \r\n535 120 tiles/sets/grass 18 \r\n536 120 tiles/sets/grass 18 \r\n537 120 tiles/sets/grass 16 \r\n538 121 tiles/sets/grass 46 \r\n539 121 tiles/sets/grass 18 \r\n540 121 tiles/sets/grass 18 \r\n541 121 tiles/sets/grass 18 \r\n542 121 tiles/sets/grass 18 \r\n543 121 tiles/sets/grass 16 \r\n544 122 tiles/sets/grass 46 \r\n545 122 tiles/sets/grass 18 \r\n546 122 tiles/sets/grass 18 \r\n547 122 tiles/sets/grass 18 \r\n548 122 tiles/sets/grass 18 \r\n549 122 tiles/sets/grass 18 \r\n550 122 tiles/sets/grass 16 \r\n551 123 tiles/sets/grass 46 \r\n552 123 tiles/sets/grass 18 \r\n553 123 tiles/sets/grass 18 \r\n554 123 tiles/sets/grass 18 \r\n555 123 tiles/sets/grass 18 \r\n556 123 tiles/sets/grass 16 \r\n557 124 tiles/sets/grass 46 \r\n558 124 tiles/sets/grass 18 \r\n559 124 tiles/sets/grass 18 \r\n560 124 tiles/sets/grass 18 \r\n561 124 tiles/sets/grass 18 \r\n562 124 tiles/sets/grass 18 \r\n563 124 tiles/sets/grass 16 \r\n564 125 tiles/sets/grass 46 \r\n565 125 tiles/sets/grass 18 \r\n566 125 tiles/sets/grass 18 \r\n567 125 tiles/sets/grass 18 \r\n568 125 tiles/sets/grass 18 \r\n569 125 tiles/sets/grass 16 \r\n570 126 tiles/sets/grass 46 \r\n571 126 tiles/sets/grass 18 \r\n572 126 tiles/sets/grass 18 \r\n573 126 tiles/sets/grass 18 \r\n574 126 tiles/sets/grass 18 \r\n575 126 tiles/sets/grass 16 \r\n576 127 tiles/sets/grass 46 \r\n577 127 tiles/sets/grass 18 \r\n578 127 tiles/sets/grass 18 \r\n579 127 tiles/sets/grass 18 \r\n580 127 tiles/sets/grass 18 \r\n581 127 tiles/sets/grass 16 \r\n582 128 tiles/sets/grass 46 \r\n583 128 tiles/sets/grass 18 \r\n584 128 tiles/sets/grass 18 \r\n585 128 tiles/sets/grass 18 \r\n586 128 tiles/sets/grass 18 \r\n587 128 tiles/sets/grass 16 \r\n588 129 tiles/sets/grass 46 \r\n589 129 tiles/sets/grass 18 \r\n590 129 tiles/sets/grass 18 \r\n591 129 tiles/sets/grass 18 \r\n592 129 tiles/sets/grass 18 \r\n593 129 tiles/sets/grass 18 \r\n594 129 tiles/sets/grass 16 \r\n595 130 tiles/sets/grass 46 \r\n596 130 tiles/sets/grass 18 \r\n597 130 tiles/sets/grass 18 \r\n598 130 tiles/sets/grass 18 \r\n599 130 tiles/sets/grass 18 \r\n600 130 tiles/sets/grass 16 \r\n601 131 tiles/sets/grass 46 \r\n602 131 tiles/sets/grass 18 \r\n603 131 tiles/sets/grass 18 \r\n604 131 tiles/sets/grass 18 \r\n605 131 tiles/sets/grass 18 \r\n606 131 tiles/sets/grass 16 \r\n607 132 tiles/sets/grass 46 \r\n608 132 tiles/sets/grass 18 \r\n609 132 tiles/sets/grass 18 \r\n610 132 tiles/sets/grass 18 \r\n611 132 tiles/sets/grass 18 \r\n612 132 tiles/sets/grass 18 \r\n613 132 tiles/sets/grass 16 \r\n614 133 tiles/sets/grass 46 \r\n615 133 tiles/sets/grass 18 \r\n616 133 tiles/sets/grass 18 \r\n617 133 tiles/sets/grass 18 \r\n618 133 tiles/sets/grass 18 \r\n619 133 tiles/sets/grass 16 \r\n620 134 tiles/sets/grass 46 \r\n621 134 tiles/sets/grass 18 \r\n622 134 tiles/sets/grass 18 \r\n623 134 tiles/sets/grass 18 \r\n624 134 tiles/sets/grass 18 \r\n625 134 tiles/sets/grass 18 \r\n626 134 tiles/sets/grass 16 \r\n627 135 tiles/sets/grass 46 \r\n628 135 tiles/sets/grass 18 \r\n629 135 tiles/sets/grass 18 \r\n630 135 tiles/sets/grass 18 \r\n631 135 tiles/sets/grass 18 \r\n632 135 tiles/sets/grass 16 \r\n633 136 tiles/sets/grass 46 \r\n634 136 tiles/sets/grass 18 \r\n635 136 tiles/sets/grass 18 \r\n636 136 tiles/sets/grass 18 \r\n637 136 tiles/sets/grass 18 \r\n638 136 tiles/sets/grass 16 \r\n639 137 tiles/sets/grass 46 \r\n640 137 tiles/sets/grass 18 \r\n641 137 tiles/sets/grass 18 \r\n642 137 tiles/sets/grass 18 \r\n643 137 tiles/sets/grass 18 \r\n644 137 tiles/sets/grass 16 \r\n645 138 tiles/sets/grass 46 \r\n646 138 tiles/sets/grass 18 \r\n647 138 tiles/sets/grass 18 \r\n648 138 tiles/sets/grass 18 \r\n649 138 tiles/sets/grass 18 \r\n650 138 tiles/sets/grass 16 \r\n651 139 tiles/sets/grass 46 \r\n652 139 tiles/sets/grass 18 \r\n653 139 tiles/sets/grass 18 \r\n654 139 tiles/sets/grass 18 \r\n655 139 tiles/sets/grass 18 \r\n656 139 tiles/sets/grass 18 \r\n657 139 tiles/sets/grass 16 \r\n658 140 tiles/sets/grass 46 \r\n659 140 tiles/sets/grass 18 \r\n660 140 tiles/sets/grass 18 \r\n661 140 tiles/sets/grass 18 \r\n662 140 tiles/sets/grass 18 \r\n663 140 tiles/sets/grass 16 \r\n664 141 tiles/sets/grass 46 \r\n665 141 tiles/sets/grass 18 \r\n666 141 tiles/sets/grass 18 \r\n667 141 tiles/sets/grass 18 \r\n668 141 tiles/sets/grass 18 \r\n669 141 tiles/sets/grass 16 \r\n670 142 tiles/sets/grass 46 \r\n671 142 tiles/sets/grass 18 \r\n672 142 tiles/sets/grass 18 \r\n673 142 tiles/sets/grass 18 \r\n674 142 tiles/sets/grass 18 \r\n675 142 tiles/sets/grass 18 \r\n676 142 tiles/sets/grass 16 \r\n677 143 tiles/sets/grass 46 \r\n678 143 tiles/sets/grass 18 \r\n679 143 tiles/sets/grass 18 \r\n680 143 tiles/sets/grass 18 \r\n681 143 tiles/sets/grass 18 \r\n682 143 tiles/sets/grass 16 \r\n683 144 tiles/sets/grass 46 \r\n684 144 tiles/sets/grass 18 \r\n685 144 tiles/sets/grass 18 \r\n686 144 tiles/sets/grass 18 \r\n687 144 tiles/sets/grass 18 \r\n688 144 tiles/sets/grass 18 \r\n689 144 tiles/sets/grass 16 \r\n690 145 tiles/sets/grass 46 \r\n691 145 tiles/sets/grass 18 \r\n692 145 tiles/sets/grass 18 \r\n693 145 tiles/sets/grass 18 \r\n694 145 tiles/sets/grass 18 \r\n695 145 tiles/sets/grass 16 \r\n696 146 tiles/sets/grass 46 \r\n697 146 tiles/sets/grass 18 \r\n698 146 tiles/sets/grass 18 \r\n699 146 tiles/sets/grass 18 \r\n700 146 tiles/sets/grass 18 \r\n701 146 tiles/sets/grass 16 \r\n702 147 tiles/sets/grass 0 \r\n404 102 tiles/sets/grass 0 \r\n@background_tiles\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/maps/test.map b/maps/test.map
--- a/maps/test.map	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/maps/test.map	(date 1708571415471)
@@ -8,2749 +8,345 @@
 @double_jumping true
 @wall_sliding true
 @version 0.1.5
-40 4 tiles/sets/stone 19 
-41 4 tiles/sets/stone 19 
-42 4 tiles/sets/stone 19 
-43 4 tiles/sets/stone 19 
-44 4 tiles/sets/stone 19 
-45 4 tiles/sets/stone 19 
-46 4 tiles/sets/stone 19 
-47 4 tiles/sets/stone 19 
-48 4 tiles/sets/stone 19 
-49 4 tiles/sets/stone 19 
-50 4 tiles/sets/stone 19 
-51 4 tiles/sets/stone 19 
-52 4 tiles/sets/stone 51 
-53 4 tiles/sets/stone 5 
-54 4 tiles/sets/stone 5 
-55 4 tiles/sets/stone 5 
-56 4 tiles/sets/stone 5 
-57 4 tiles/sets/stone 5 
-58 4 tiles/sets/stone 5 
-59 4 tiles/sets/stone 5 
-60 4 tiles/sets/stone 5 
-61 4 tiles/sets/stone 5 
-62 4 tiles/sets/stone 5 
-63 4 tiles/sets/stone 5 
-64 4 tiles/sets/stone 5 
-65 4 tiles/sets/stone 6 
-66 4 tiles/sets/stone 17 
-66 3 tiles/sets/stone 32 
-65 3 tiles/sets/stone 21 
-64 3 tiles/sets/stone 5 
-63 3 tiles/sets/stone 5 
-62 3 tiles/sets/stone 5 
-61 3 tiles/sets/stone 5 
-60 3 tiles/sets/stone 5 
-59 3 tiles/sets/stone 5 
-58 3 tiles/sets/stone 5 
-57 3 tiles/sets/stone 5 
-56 3 tiles/sets/stone 5 
-55 3 tiles/sets/stone 5 
-54 3 tiles/sets/stone 5 
-53 3 tiles/sets/stone 5 
-52 3 tiles/sets/stone 5 
-51 3 tiles/sets/stone 5 
-50 3 tiles/sets/stone 5 
-49 3 tiles/sets/stone 5 
-48 3 tiles/sets/stone 5 
-47 3 tiles/sets/stone 5 
-46 3 tiles/sets/stone 5 
-45 3 tiles/sets/stone 5 
-44 3 tiles/sets/stone 5 
-43 3 tiles/sets/stone 5 
-42 3 tiles/sets/stone 5 
-40 3 tiles/sets/stone 49 
-41 3 tiles/sets/stone 36 
-41 2 tiles/sets/stone 47 
-42 2 tiles/sets/stone 49 
-43 2 tiles/sets/stone 49 
-44 2 tiles/sets/stone 36 
-45 2 tiles/sets/stone 5 
-46 2 tiles/sets/stone 5 
-47 2 tiles/sets/stone 5 
-48 2 tiles/sets/stone 5 
-49 2 tiles/sets/stone 5 
-50 2 tiles/sets/stone 5 
-51 2 tiles/sets/stone 5 
-52 2 tiles/sets/stone 5 
-53 2 tiles/sets/stone 5 
-54 2 tiles/sets/stone 5 
-55 2 tiles/sets/stone 5 
-56 2 tiles/sets/stone 5 
-57 2 tiles/sets/stone 5 
-58 2 tiles/sets/stone 5 
-59 2 tiles/sets/stone 5 
-60 2 tiles/sets/stone 5 
-61 2 tiles/sets/stone 5 
-63 2 tiles/sets/stone 49 
-64 2 tiles/sets/stone 49 
-65 2 tiles/sets/stone 32 
-62 2 tiles/sets/stone 21 
-62 1 tiles/sets/stone 32 
-61 1 tiles/sets/stone 49 
-60 1 tiles/sets/stone 49 
-59 1 tiles/sets/stone 49 
-58 1 tiles/sets/stone 21 
-57 1 tiles/sets/stone 5 
-56 1 tiles/sets/stone 5 
-55 1 tiles/sets/stone 5 
-54 1 tiles/sets/stone 5 
-53 1 tiles/sets/stone 5 
-52 1 tiles/sets/stone 5 
-51 1 tiles/sets/stone 5 
-50 1 tiles/sets/stone 5 
-49 1 tiles/sets/stone 5 
-47 1 tiles/sets/stone 49 
-46 1 tiles/sets/stone 49 
-45 1 tiles/sets/stone 49 
-44 1 tiles/sets/stone 47 
-48 1 tiles/sets/stone 36 
-48 0 tiles/sets/stone 47 
-49 0 tiles/sets/stone 49 
-50 0 tiles/sets/stone 49 
-51 0 tiles/sets/stone 49 
-52 0 tiles/sets/stone 49 
-53 0 tiles/sets/stone 49 
-54 0 tiles/sets/stone 49 
-55 0 tiles/sets/stone 49 
-56 0 tiles/sets/stone 49 
-57 0 tiles/sets/stone 49 
-58 0 tiles/sets/stone 32 
-43 5 tiles/spawn 0 
-44 6 tiles/power_fruit 1 
-51 5 tiles/slope 0 
-52 5 tiles/sets/stone 2 
-52 6 tiles/slope 0 
-53 5 tiles/sets/stone 51 
-53 6 tiles/sets/stone 2 
-53 7 tiles/slope 0 
-54 5 tiles/sets/stone 5 
-54 6 tiles/sets/stone 51 
-54 7 tiles/sets/stone 2 
-54 8 tiles/slope 0 
-55 5 tiles/sets/stone 5 
-55 6 tiles/sets/stone 5 
-55 7 tiles/sets/stone 51 
-55 8 tiles/sets/stone 2 
-55 9 tiles/slope 0 
-56 5 tiles/sets/stone 5 
-56 7 tiles/sets/stone 5 
-56 8 tiles/sets/stone 51 
-56 9 tiles/sets/stone 2 
-56 10 tiles/slope 0 
-57 5 tiles/sets/stone 5 
-57 7 tiles/sets/stone 5 
-57 8 tiles/sets/stone 5 
-57 9 tiles/sets/stone 51 
-57 10 tiles/sets/stone 2 
-57 11 tiles/slope 0 
-58 5 tiles/sets/stone 5 
-58 7 tiles/sets/stone 5 
-58 8 tiles/sets/stone 5 
-58 9 tiles/sets/stone 5 
-58 10 tiles/sets/stone 51 
-58 11 tiles/sets/stone 2 
-58 12 tiles/slope 0 
-59 5 tiles/sets/stone 5 
-59 7 tiles/sets/stone 5 
-59 8 tiles/sets/stone 5 
-59 9 tiles/sets/stone 5 
-59 10 tiles/sets/stone 5 
-59 11 tiles/sets/stone 51 
-59 12 tiles/sets/stone 2 
-59 13 tiles/slope 0 
-60 5 tiles/sets/stone 5 
-60 7 tiles/sets/stone 5 
-60 8 tiles/sets/stone 5 
-60 9 tiles/sets/stone 5 
-60 10 tiles/sets/stone 5 
-60 11 tiles/sets/stone 5 
-60 12 tiles/sets/stone 51 
-60 13 tiles/sets/stone 2 
-60 14 tiles/slope 0 
-61 5 tiles/sets/stone 5 
-61 7 tiles/sets/stone 5 
-61 8 tiles/sets/stone 5 
-61 9 tiles/sets/stone 5 
-61 10 tiles/sets/stone 5 
-61 11 tiles/sets/stone 5 
-61 12 tiles/sets/stone 5 
-61 13 tiles/sets/stone 51 
-61 14 tiles/sets/stone 2 
-61 15 tiles/slope 0 
-62 5 tiles/sets/stone 5 
-62 7 tiles/sets/stone 5 
-62 8 tiles/sets/stone 5 
-62 9 tiles/sets/stone 5 
-62 10 tiles/sets/stone 5 
-62 11 tiles/sets/stone 5 
-62 12 tiles/sets/stone 5 
-62 13 tiles/sets/stone 5 
-62 14 tiles/sets/stone 51 
-62 15 tiles/sets/stone 2 
-62 16 tiles/slope 0 
-63 5 tiles/sets/stone 5 
-63 7 tiles/sets/stone 5 
-63 8 tiles/sets/stone 5 
-63 9 tiles/sets/stone 5 
-63 10 tiles/sets/stone 5 
-63 11 tiles/sets/stone 5 
-63 12 tiles/sets/stone 5 
-63 13 tiles/sets/stone 5 
-63 14 tiles/sets/stone 5 
-63 15 tiles/sets/stone 51 
-63 16 tiles/sets/stone 2 
-63 17 tiles/slope 0 
-64 5 tiles/sets/stone 5 
-64 7 tiles/sets/stone 5 
-64 8 tiles/sets/stone 5 
-64 9 tiles/sets/stone 5 
-64 10 tiles/sets/stone 5 
-64 11 tiles/sets/stone 5 
-64 12 tiles/sets/stone 5 
-64 13 tiles/sets/stone 5 
-64 14 tiles/sets/stone 5 
-64 15 tiles/sets/stone 5 
-64 16 tiles/sets/stone 51 
-64 17 tiles/sets/stone 2 
-64 18 tiles/slope 0 
-65 5 tiles/sets/stone 34 
-65 7 tiles/sets/stone 34 
-65 8 tiles/sets/stone 34 
-65 9 tiles/sets/stone 34 
-65 10 tiles/sets/stone 34 
-65 11 tiles/sets/stone 34 
-65 12 tiles/sets/stone 34 
-65 13 tiles/sets/stone 34 
-65 14 tiles/sets/stone 34 
-65 15 tiles/sets/stone 34 
-65 16 tiles/sets/stone 21 
-65 17 tiles/sets/stone 51 
-65 18 tiles/sets/stone 2 
-65 19 tiles/slope 0 
-66 16 tiles/sets/stone 32 
-66 17 tiles/sets/stone 21 
-66 18 tiles/sets/stone 51 
-66 19 tiles/sets/stone 2 
-66 20 tiles/slope 0 
-67 17 tiles/sets/stone 49 
-67 18 tiles/sets/stone 5 
-67 19 tiles/sets/stone 51 
-67 20 tiles/sets/stone 2 
-67 21 tiles/slope 0 
-68 17 tiles/sets/stone 49 
-68 18 tiles/sets/stone 5 
-68 19 tiles/sets/stone 5 
-68 20 tiles/sets/stone 51 
-68 21 tiles/sets/stone 2 
-68 22 tiles/slope 0 
-69 15 tiles/sets/stone 47 
-69 16 tiles/sets/stone 4 
-69 17 tiles/sets/stone 36 
-69 18 tiles/sets/stone 5 
-69 19 tiles/sets/stone 5 
-69 20 tiles/sets/stone 5 
-69 21 tiles/sets/stone 51 
-69 22 tiles/sets/stone 2 
-69 23 tiles/slope 0 
-70 15 tiles/sets/stone 49 
-70 16 tiles/sets/stone 5 
-70 17 tiles/sets/stone 5 
-70 18 tiles/sets/stone 5 
-70 19 tiles/sets/stone 5 
-70 20 tiles/sets/stone 5 
-70 21 tiles/sets/stone 5 
-70 22 tiles/sets/stone 51 
-70 23 tiles/sets/stone 2 
-70 24 tiles/slope 0 
-71 15 tiles/sets/stone 32 
-71 16 tiles/sets/stone 34 
-71 17 tiles/sets/stone 34 
-71 18 tiles/sets/stone 34 
-71 19 tiles/sets/stone 34 
-71 20 tiles/sets/stone 34 
-71 21 tiles/sets/stone 34 
-71 22 tiles/sets/stone 21 
-71 23 tiles/sets/stone 51 
-71 24 tiles/sets/stone 2 
-71 25 tiles/slope 0 
-72 22 tiles/sets/stone 32 
-72 23 tiles/sets/stone 21 
-72 24 tiles/sets/stone 51 
-72 25 tiles/sets/stone 2 
-72 26 tiles/slope 0 
-73 23 tiles/sets/stone 49 
-73 24 tiles/sets/stone 5 
-73 25 tiles/sets/stone 51 
-73 26 tiles/sets/stone 2 
-73 27 tiles/slope 0 
-74 23 tiles/sets/stone 49 
-74 24 tiles/sets/stone 5 
-74 25 tiles/sets/stone 5 
-74 26 tiles/sets/stone 51 
-74 27 tiles/sets/stone 2 
-74 28 tiles/slope 0 
-75 21 tiles/sets/stone 47 
-75 22 tiles/sets/stone 4 
-75 23 tiles/sets/stone 36 
-75 24 tiles/sets/stone 5 
-75 25 tiles/sets/stone 5 
-75 26 tiles/sets/stone 5 
-75 27 tiles/sets/stone 51 
-75 28 tiles/sets/stone 2 
-75 29 tiles/slope 0 
-76 21 tiles/sets/stone 49 
-76 22 tiles/sets/stone 5 
-76 23 tiles/sets/stone 5 
-76 24 tiles/sets/stone 5 
-76 25 tiles/sets/stone 5 
-76 26 tiles/sets/stone 5 
-76 27 tiles/sets/stone 5 
-76 28 tiles/sets/stone 51 
-76 29 tiles/sets/stone 2 
-76 30 tiles/slope 0 
-77 21 tiles/sets/stone 32 
-77 22 tiles/sets/stone 34 
-77 23 tiles/sets/stone 34 
-77 24 tiles/sets/stone 34 
-77 25 tiles/sets/stone 34 
-77 26 tiles/sets/stone 34 
-77 27 tiles/sets/stone 34 
-77 28 tiles/sets/stone 21 
-77 29 tiles/sets/stone 51 
-77 30 tiles/sets/stone 2 
-77 31 tiles/slope 0 
-78 28 tiles/sets/stone 32 
-78 29 tiles/sets/stone 21 
-78 30 tiles/sets/stone 51 
-78 31 tiles/sets/stone 2 
-78 32 tiles/slope 0 
-79 29 tiles/sets/stone 49 
-79 30 tiles/sets/stone 5 
-79 31 tiles/sets/stone 51 
-79 32 tiles/sets/stone 2 
-79 33 tiles/slope 0 
-80 29 tiles/sets/stone 49 
-80 30 tiles/sets/stone 5 
-80 31 tiles/sets/stone 5 
-80 32 tiles/sets/stone 51 
-80 33 tiles/sets/stone 2 
-80 34 tiles/slope 0 
-81 27 tiles/sets/stone 47 
-81 28 tiles/sets/stone 4 
-81 29 tiles/sets/stone 36 
-81 30 tiles/sets/stone 5 
-81 31 tiles/sets/stone 5 
-81 32 tiles/sets/stone 5 
-81 33 tiles/sets/stone 51 
-81 34 tiles/sets/stone 2 
-81 35 tiles/slope 0 
-82 27 tiles/sets/stone 49 
-82 28 tiles/sets/stone 5 
-82 29 tiles/sets/stone 5 
-82 30 tiles/sets/stone 5 
-82 31 tiles/sets/stone 5 
-82 32 tiles/sets/stone 5 
-82 33 tiles/sets/stone 5 
-82 34 tiles/sets/stone 51 
-82 35 tiles/sets/stone 2 
-82 36 tiles/slope 0 
-83 27 tiles/sets/stone 32 
-83 28 tiles/sets/stone 34 
-83 29 tiles/sets/stone 34 
-83 30 tiles/sets/stone 34 
-83 31 tiles/sets/stone 34 
-83 32 tiles/sets/stone 34 
-83 33 tiles/sets/stone 34 
-83 34 tiles/sets/stone 21 
-83 35 tiles/sets/stone 51 
-83 36 tiles/sets/stone 2 
-83 37 tiles/slope 0 
-84 34 tiles/sets/stone 32 
-84 35 tiles/sets/stone 21 
-84 36 tiles/sets/stone 51 
-84 37 tiles/sets/stone 2 
-84 38 tiles/slope 0 
-85 35 tiles/sets/stone 49 
-85 36 tiles/sets/stone 5 
-85 37 tiles/sets/stone 51 
-85 38 tiles/sets/stone 2 
-85 39 tiles/slope 0 
-86 35 tiles/sets/stone 32 
-86 36 tiles/sets/stone 21 
-86 37 tiles/sets/stone 5 
-86 38 tiles/sets/stone 51 
-86 39 tiles/sets/stone 2 
-86 40 tiles/slope 0 
-87 40 tiles/sets/stone 2 
-87 41 tiles/slope 0 
-88 40 tiles/sets/stone 51 
-88 41 tiles/sets/stone 2 
-88 42 tiles/slope 0 
-89 40 tiles/sets/stone 5 
-89 41 tiles/sets/stone 51 
-89 42 tiles/sets/stone 2 
-89 43 tiles/slope 0 
-90 40 tiles/sets/stone 21 
-90 41 tiles/sets/stone 5 
-90 42 tiles/sets/stone 51 
-90 43 tiles/sets/stone 2 
-90 44 tiles/slope 0 
-91 40 tiles/sets/stone 49 
-91 41 tiles/sets/stone 5 
-91 42 tiles/sets/stone 5 
-91 43 tiles/sets/stone 51 
-91 44 tiles/sets/stone 2 
-91 45 tiles/slope 0 
-92 40 tiles/sets/stone 49 
-92 41 tiles/sets/stone 5 
-92 42 tiles/sets/stone 5 
-92 43 tiles/sets/stone 5 
-92 44 tiles/sets/stone 51 
-92 45 tiles/sets/stone 2 
-92 46 tiles/slope 0 
-93 40 tiles/sets/stone 49 
-93 41 tiles/sets/stone 5 
-93 42 tiles/sets/stone 5 
-93 43 tiles/sets/stone 5 
-93 44 tiles/sets/stone 5 
-93 45 tiles/sets/stone 51 
-93 46 tiles/sets/stone 2 
-93 47 tiles/slope 0 
-94 40 tiles/sets/stone 49 
-94 41 tiles/sets/stone 5 
-94 42 tiles/sets/stone 5 
-94 43 tiles/sets/stone 5 
-94 44 tiles/sets/stone 5 
-94 45 tiles/sets/stone 5 
-94 46 tiles/sets/stone 51 
-94 47 tiles/sets/stone 2 
-94 48 tiles/slope 0 
-95 40 tiles/sets/stone 49 
-95 41 tiles/sets/stone 5 
-95 42 tiles/sets/stone 5 
-95 43 tiles/sets/stone 5 
-95 44 tiles/sets/stone 5 
-95 45 tiles/sets/stone 5 
-95 46 tiles/sets/stone 5 
-95 47 tiles/sets/stone 51 
-95 48 tiles/sets/stone 2 
-95 49 tiles/slope 0 
-96 40 tiles/sets/stone 49 
-96 41 tiles/sets/stone 5 
-96 42 tiles/sets/stone 5 
-96 43 tiles/sets/stone 5 
-96 44 tiles/sets/stone 5 
-96 45 tiles/sets/stone 5 
-96 46 tiles/sets/stone 5 
-96 47 tiles/sets/stone 5 
-96 48 tiles/sets/stone 51 
-96 49 tiles/sets/stone 2 
-96 50 tiles/slope 0 
-97 40 tiles/sets/stone 49 
-97 41 tiles/sets/stone 5 
-97 42 tiles/sets/stone 5 
-97 43 tiles/sets/stone 5 
-97 44 tiles/sets/stone 5 
-97 45 tiles/sets/stone 5 
-97 46 tiles/sets/stone 5 
-97 47 tiles/sets/stone 5 
-97 48 tiles/sets/stone 5 
-97 49 tiles/sets/stone 51 
-97 50 tiles/sets/stone 2 
-97 51 tiles/slope 0 
-98 40 tiles/sets/stone 49 
-98 41 tiles/sets/stone 5 
-98 42 tiles/sets/stone 5 
-98 43 tiles/sets/stone 5 
-98 44 tiles/sets/stone 5 
-98 45 tiles/sets/stone 5 
-98 46 tiles/sets/stone 5 
-98 47 tiles/sets/stone 5 
-98 48 tiles/sets/stone 5 
-98 49 tiles/sets/stone 5 
-98 50 tiles/sets/stone 51 
-98 51 tiles/sets/stone 2 
-98 52 tiles/slope 0 
-99 40 tiles/sets/stone 49 
-99 41 tiles/sets/stone 5 
-99 42 tiles/sets/stone 5 
-99 43 tiles/sets/stone 5 
-99 44 tiles/sets/stone 5 
-99 45 tiles/sets/stone 5 
-99 46 tiles/sets/stone 5 
-99 47 tiles/sets/stone 5 
-99 48 tiles/sets/stone 5 
-99 49 tiles/sets/stone 5 
-99 50 tiles/sets/stone 5 
-99 51 tiles/sets/stone 51 
-99 52 tiles/sets/stone 2 
-99 53 tiles/slope 0 
-100 40 tiles/sets/stone 32 
-100 41 tiles/sets/stone 34 
-100 42 tiles/sets/stone 34 
-100 43 tiles/sets/stone 34 
-100 44 tiles/sets/stone 34 
-100 45 tiles/sets/stone 34 
-100 46 tiles/sets/stone 34 
-100 47 tiles/sets/stone 34 
-100 48 tiles/sets/stone 34 
-100 49 tiles/sets/stone 34 
-100 50 tiles/sets/stone 34 
-100 51 tiles/sets/stone 21 
-100 52 tiles/sets/stone 51 
-100 53 tiles/sets/stone 2 
-100 54 tiles/slope 0 
-101 51 tiles/sets/stone 32 
-101 52 tiles/sets/stone 21 
-101 53 tiles/sets/stone 51 
-101 54 tiles/sets/stone 2 
-101 55 tiles/slope 0 
-102 52 tiles/sets/stone 49 
-102 53 tiles/sets/stone 5 
-102 54 tiles/sets/stone 51 
-102 55 tiles/sets/stone 2 
-102 56 tiles/slope 0 
-103 52 tiles/sets/stone 49 
-103 53 tiles/sets/stone 5 
-103 54 tiles/sets/stone 5 
-103 55 tiles/sets/stone 51 
-103 56 tiles/sets/stone 2 
-103 57 tiles/slope 0 
-104 50 tiles/sets/stone 47 
-104 51 tiles/sets/stone 4 
-104 52 tiles/sets/stone 36 
-104 53 tiles/sets/stone 5 
-104 54 tiles/sets/stone 5 
-104 55 tiles/sets/stone 5 
-104 56 tiles/sets/stone 51 
-104 57 tiles/sets/stone 2 
-104 58 tiles/slope 0 
-105 50 tiles/sets/stone 49 
-105 51 tiles/sets/stone 5 
-105 52 tiles/sets/stone 5 
-105 53 tiles/sets/stone 5 
-105 54 tiles/sets/stone 5 
-105 55 tiles/sets/stone 5 
-105 56 tiles/sets/stone 5 
-105 57 tiles/sets/stone 51 
-105 58 tiles/sets/stone 2 
-105 59 tiles/slope 0 
-106 50 tiles/sets/stone 32 
-106 51 tiles/sets/stone 34 
-106 52 tiles/sets/stone 34 
-106 53 tiles/sets/stone 34 
-106 54 tiles/sets/stone 34 
-106 55 tiles/sets/stone 34 
-106 56 tiles/sets/stone 34 
-106 57 tiles/sets/stone 21 
-106 58 tiles/sets/stone 51 
-106 59 tiles/sets/stone 2 
-106 60 tiles/slope 0 
-107 57 tiles/sets/stone 32 
-107 58 tiles/sets/stone 21 
-107 59 tiles/sets/stone 51 
-107 60 tiles/sets/stone 2 
-107 61 tiles/slope 0 
-108 58 tiles/sets/stone 49 
-108 59 tiles/sets/stone 5 
-108 60 tiles/sets/stone 51 
-108 61 tiles/sets/stone 2 
-108 62 tiles/slope 0 
-109 58 tiles/sets/stone 49 
-109 59 tiles/sets/stone 5 
-109 60 tiles/sets/stone 5 
-109 61 tiles/sets/stone 51 
-109 62 tiles/sets/stone 2 
-109 63 tiles/slope 0 
-110 56 tiles/sets/stone 47 
-110 57 tiles/sets/stone 4 
-110 58 tiles/sets/stone 36 
-110 59 tiles/sets/stone 5 
-110 60 tiles/sets/stone 5 
-110 61 tiles/sets/stone 5 
-110 62 tiles/sets/stone 51 
-110 63 tiles/sets/stone 2 
-111 56 tiles/sets/stone 49 
-111 57 tiles/sets/stone 5 
-111 58 tiles/sets/stone 5 
-111 59 tiles/sets/stone 5 
-111 60 tiles/sets/stone 5 
-111 61 tiles/sets/stone 5 
-111 62 tiles/sets/stone 5 
-111 63 tiles/sets/stone 51 
-112 56 tiles/sets/stone 32 
-112 57 tiles/sets/stone 34 
-112 58 tiles/sets/stone 34 
-112 59 tiles/sets/stone 34 
-112 60 tiles/sets/stone 34 
-112 61 tiles/sets/stone 34 
-112 62 tiles/sets/stone 34 
-112 63 tiles/sets/stone 21 
-113 63 tiles/sets/stone 32 
-116 62 tiles/sets/stone 47 
-116 63 tiles/sets/stone 4 
-117 62 tiles/sets/stone 49 
-117 63 tiles/sets/stone 5 
-118 62 tiles/sets/stone 32 
-118 63 tiles/sets/stone 34 
-87 39 tiles/sets/stone 51 
-87 38 tiles/sets/stone 5 
-87 37 tiles/sets/stone 21 
-88 37 tiles/sets/stone 32 
-88 38 tiles/sets/stone 21 
-88 39 tiles/sets/stone 5 
-89 39 tiles/sets/stone 21 
-89 38 tiles/sets/stone 32 
-90 39 tiles/sets/stone 32 
-87 36 tiles/sets/stone 32 
-111 64 tiles/sets/stone 2 
-112 64 tiles/sets/stone 51 
-112 65 tiles/sets/stone 2 
-112 66 tiles/slope 0 
-113 64 tiles/sets/stone 21 
-113 65 tiles/sets/stone 51 
-113 66 tiles/sets/stone 2 
-113 67 tiles/slope 0 
-114 64 tiles/sets/stone 49 
-114 65 tiles/sets/stone 5 
-114 66 tiles/sets/stone 51 
-114 67 tiles/sets/stone 2 
-114 68 tiles/slope 0 
-115 64 tiles/sets/stone 49 
-115 65 tiles/sets/stone 5 
-115 66 tiles/sets/stone 5 
-115 67 tiles/sets/stone 51 
-115 68 tiles/sets/stone 2 
-115 69 tiles/slope 0 
-116 64 tiles/sets/stone 36 
-116 65 tiles/sets/stone 5 
-116 66 tiles/sets/stone 5 
-116 67 tiles/sets/stone 5 
-116 68 tiles/sets/stone 51 
-116 69 tiles/sets/stone 2 
-116 70 tiles/slope 0 
-117 64 tiles/sets/stone 5 
-117 65 tiles/sets/stone 5 
-117 66 tiles/sets/stone 5 
-117 67 tiles/sets/stone 5 
-117 68 tiles/sets/stone 5 
-117 69 tiles/sets/stone 51 
-117 70 tiles/sets/stone 2 
-117 71 tiles/slope 0 
-118 64 tiles/sets/stone 21 
-118 65 tiles/sets/stone 5 
-118 66 tiles/sets/stone 5 
-118 67 tiles/sets/stone 5 
-118 68 tiles/sets/stone 5 
-118 69 tiles/sets/stone 5 
-118 70 tiles/sets/stone 51 
-118 71 tiles/sets/stone 2 
-118 72 tiles/slope 0 
-119 64 tiles/sets/stone 49 
-119 65 tiles/sets/stone 5 
-119 66 tiles/sets/stone 5 
-119 67 tiles/sets/stone 5 
-119 68 tiles/sets/stone 5 
-119 69 tiles/sets/stone 5 
-119 70 tiles/sets/stone 5 
-119 71 tiles/sets/stone 51 
-119 72 tiles/sets/stone 2 
-119 73 tiles/slope 0 
-120 64 tiles/sets/stone 49 
-120 65 tiles/sets/stone 5 
-120 66 tiles/sets/stone 5 
-120 67 tiles/sets/stone 5 
-120 68 tiles/sets/stone 5 
-120 69 tiles/sets/stone 5 
-120 70 tiles/sets/stone 5 
-120 71 tiles/sets/stone 5 
-120 72 tiles/sets/stone 51 
-120 73 tiles/sets/stone 2 
-120 74 tiles/slope 0 
-121 64 tiles/sets/stone 49 
-121 65 tiles/sets/stone 5 
-121 66 tiles/sets/stone 5 
-121 67 tiles/sets/stone 5 
-121 68 tiles/sets/stone 5 
-121 69 tiles/sets/stone 5 
-121 70 tiles/sets/stone 5 
-121 71 tiles/sets/stone 5 
-121 72 tiles/sets/stone 5 
-121 73 tiles/sets/stone 51 
-121 74 tiles/sets/stone 2 
-121 75 tiles/slope 0 
-122 64 tiles/sets/stone 49 
-122 65 tiles/sets/stone 5 
-122 66 tiles/sets/stone 5 
-122 67 tiles/sets/stone 5 
-122 68 tiles/sets/stone 5 
-122 69 tiles/sets/stone 5 
-122 70 tiles/sets/stone 5 
-122 71 tiles/sets/stone 5 
-122 72 tiles/sets/stone 5 
-122 73 tiles/sets/stone 5 
-122 74 tiles/sets/stone 51 
-122 75 tiles/sets/stone 2 
-122 76 tiles/slope 0 
-123 64 tiles/sets/stone 49 
-123 65 tiles/sets/stone 5 
-123 66 tiles/sets/stone 5 
-123 67 tiles/sets/stone 5 
-123 68 tiles/sets/stone 5 
-123 69 tiles/sets/stone 5 
-123 70 tiles/sets/stone 5 
-123 71 tiles/sets/stone 5 
-123 72 tiles/sets/stone 5 
-123 73 tiles/sets/stone 5 
-123 74 tiles/sets/stone 5 
-123 75 tiles/sets/stone 51 
-123 76 tiles/sets/stone 2 
-123 77 tiles/slope 0 
-124 64 tiles/sets/stone 49 
-124 65 tiles/sets/stone 5 
-124 66 tiles/sets/stone 5 
-124 67 tiles/sets/stone 5 
-124 68 tiles/sets/stone 5 
-124 69 tiles/sets/stone 5 
-124 70 tiles/sets/stone 5 
-124 71 tiles/sets/stone 5 
-124 72 tiles/sets/stone 5 
-124 73 tiles/sets/stone 5 
-124 74 tiles/sets/stone 5 
-124 75 tiles/sets/stone 5 
-124 76 tiles/sets/stone 51 
-124 77 tiles/sets/stone 2 
-124 78 tiles/slope 0 
-125 64 tiles/sets/stone 49 
-125 65 tiles/sets/stone 5 
-125 66 tiles/sets/stone 5 
-125 67 tiles/sets/stone 5 
-125 68 tiles/sets/stone 5 
-125 69 tiles/sets/stone 5 
-125 70 tiles/sets/stone 5 
-125 71 tiles/sets/stone 5 
-125 72 tiles/sets/stone 5 
-125 73 tiles/sets/stone 5 
-125 74 tiles/sets/stone 5 
-125 75 tiles/sets/stone 5 
-125 76 tiles/sets/stone 5 
-125 77 tiles/sets/stone 51 
-125 78 tiles/sets/stone 2 
-125 79 tiles/slope 0 
-126 64 tiles/sets/stone 49 
-126 65 tiles/sets/stone 6 
-126 66 tiles/sets/stone 34 
-126 67 tiles/sets/stone 34 
-126 68 tiles/sets/stone 34 
-126 69 tiles/sets/stone 34 
-126 70 tiles/sets/stone 34 
-126 71 tiles/sets/stone 34 
-126 72 tiles/sets/stone 34 
-126 73 tiles/sets/stone 34 
-126 74 tiles/sets/stone 34 
-126 75 tiles/sets/stone 34 
-126 76 tiles/sets/stone 34 
-126 77 tiles/sets/stone 21 
-126 78 tiles/sets/stone 51 
-126 79 tiles/sets/stone 2 
-126 80 tiles/slope 0 
-127 64 tiles/sets/stone 32 
-127 65 tiles/sets/stone 17 
-127 77 tiles/sets/stone 32 
-127 78 tiles/sets/stone 21 
-127 79 tiles/sets/stone 51 
-127 80 tiles/sets/stone 2 
-127 81 tiles/slope 0 
-128 78 tiles/sets/stone 49 
-128 79 tiles/sets/stone 5 
-128 80 tiles/sets/stone 51 
-128 81 tiles/sets/stone 2 
-128 82 tiles/slope 0 
-129 78 tiles/sets/stone 49 
-129 79 tiles/sets/stone 5 
-129 80 tiles/sets/stone 5 
-129 81 tiles/sets/stone 51 
-129 82 tiles/sets/stone 2 
-129 83 tiles/slope 0 
-130 76 tiles/sets/stone 47 
-130 77 tiles/sets/stone 4 
-130 78 tiles/sets/stone 36 
-130 79 tiles/sets/stone 5 
-130 80 tiles/sets/stone 5 
-130 81 tiles/sets/stone 5 
-130 82 tiles/sets/stone 51 
-130 83 tiles/sets/stone 2 
-130 84 tiles/slope 0 
-131 76 tiles/sets/stone 49 
-131 77 tiles/sets/stone 5 
-131 78 tiles/sets/stone 5 
-131 79 tiles/sets/stone 5 
-131 80 tiles/sets/stone 5 
-131 81 tiles/sets/stone 5 
-131 82 tiles/sets/stone 5 
-131 83 tiles/sets/stone 51 
-131 84 tiles/sets/stone 2 
-131 85 tiles/slope 0 
-132 76 tiles/sets/stone 32 
-132 77 tiles/sets/stone 34 
-132 78 tiles/sets/stone 34 
-132 79 tiles/sets/stone 34 
-132 80 tiles/sets/stone 34 
-132 81 tiles/sets/stone 34 
-132 82 tiles/sets/stone 34 
-132 83 tiles/sets/stone 21 
-132 84 tiles/sets/stone 51 
-132 85 tiles/sets/stone 2 
-132 86 tiles/slope 0 
-133 83 tiles/sets/stone 32 
-133 84 tiles/sets/stone 21 
-133 85 tiles/sets/stone 51 
-133 86 tiles/sets/stone 2 
-133 87 tiles/slope 0 
-134 84 tiles/sets/stone 49 
-134 85 tiles/sets/stone 5 
-134 86 tiles/sets/stone 51 
-134 87 tiles/sets/stone 2 
-134 88 tiles/slope 0 
-135 84 tiles/sets/stone 49 
-135 85 tiles/sets/stone 5 
-135 86 tiles/sets/stone 5 
-135 87 tiles/sets/stone 51 
-135 88 tiles/sets/stone 2 
-135 89 tiles/slope 0 
-136 82 tiles/sets/stone 47 
-136 83 tiles/sets/stone 4 
-136 84 tiles/sets/stone 36 
-136 85 tiles/sets/stone 5 
-136 86 tiles/sets/stone 5 
-136 87 tiles/sets/stone 5 
-136 88 tiles/sets/stone 51 
-136 89 tiles/sets/stone 2 
-136 90 tiles/slope 0 
-137 82 tiles/sets/stone 49 
-137 83 tiles/sets/stone 5 
-137 84 tiles/sets/stone 5 
-137 85 tiles/sets/stone 5 
-137 86 tiles/sets/stone 5 
-137 87 tiles/sets/stone 5 
-137 88 tiles/sets/stone 5 
-137 89 tiles/sets/stone 51 
-137 90 tiles/sets/stone 2 
-137 91 tiles/slope 0 
-138 82 tiles/sets/stone 32 
-138 83 tiles/sets/stone 34 
-138 84 tiles/sets/stone 34 
-138 85 tiles/sets/stone 34 
-138 86 tiles/sets/stone 34 
-138 87 tiles/sets/stone 34 
-138 88 tiles/sets/stone 34 
-138 89 tiles/sets/stone 21 
-138 90 tiles/sets/stone 51 
-138 91 tiles/sets/stone 2 
-138 92 tiles/slope 0 
-139 89 tiles/sets/stone 32 
-139 90 tiles/sets/stone 21 
-139 91 tiles/sets/stone 51 
-139 92 tiles/sets/stone 2 
-139 93 tiles/slope 0 
-140 90 tiles/sets/stone 49 
-140 91 tiles/sets/stone 5 
-140 92 tiles/sets/stone 51 
-140 93 tiles/sets/stone 2 
-140 94 tiles/slope 0 
-141 90 tiles/sets/stone 49 
-141 91 tiles/sets/stone 5 
-141 92 tiles/sets/stone 5 
-141 93 tiles/sets/stone 51 
-141 94 tiles/sets/stone 2 
-141 95 tiles/slope 0 
-142 88 tiles/sets/stone 47 
-142 89 tiles/sets/stone 4 
-142 90 tiles/sets/stone 36 
-142 91 tiles/sets/stone 5 
-142 92 tiles/sets/stone 5 
-142 93 tiles/sets/stone 5 
-142 94 tiles/sets/stone 51 
-142 95 tiles/sets/stone 2 
-142 96 tiles/slope 0 
-143 88 tiles/sets/stone 49 
-143 89 tiles/sets/stone 5 
-143 90 tiles/sets/stone 5 
-143 91 tiles/sets/stone 5 
-143 92 tiles/sets/stone 5 
-143 93 tiles/sets/stone 5 
-143 94 tiles/sets/stone 5 
-143 95 tiles/sets/stone 51 
-143 96 tiles/sets/stone 2 
-143 97 tiles/slope 0 
-144 88 tiles/sets/stone 32 
-144 89 tiles/sets/stone 34 
-144 90 tiles/sets/stone 34 
-144 91 tiles/sets/stone 34 
-144 92 tiles/sets/stone 34 
-144 93 tiles/sets/stone 34 
-144 94 tiles/sets/stone 34 
-144 95 tiles/sets/stone 21 
-144 96 tiles/sets/stone 51 
-144 97 tiles/sets/stone 2 
-144 98 tiles/slope 0 
-145 95 tiles/sets/stone 32 
-145 96 tiles/sets/stone 21 
-145 97 tiles/sets/stone 51 
-145 98 tiles/sets/stone 2 
-145 99 tiles/slope 0 
-146 96 tiles/sets/stone 49 
-146 97 tiles/sets/stone 5 
-146 98 tiles/sets/stone 51 
-146 99 tiles/sets/stone 2 
-146 100 tiles/slope 0 
-147 96 tiles/sets/stone 32 
-147 97 tiles/sets/stone 21 
-147 98 tiles/sets/stone 5 
-147 99 tiles/sets/stone 51 
-147 100 tiles/sets/stone 2 
-147 101 tiles/slope 0 
-148 97 tiles/sets/stone 32 
-148 98 tiles/sets/stone 21 
-148 99 tiles/sets/stone 5 
-148 100 tiles/sets/stone 51 
-148 101 tiles/sets/stone 2 
-148 102 tiles/slope 0 
-149 98 tiles/sets/stone 32 
-149 99 tiles/sets/stone 21 
-149 100 tiles/sets/stone 5 
-149 101 tiles/sets/stone 51 
-149 102 tiles/sets/stone 2 
-149 103 tiles/slope 0 
-150 99 tiles/sets/stone 32 
-150 100 tiles/sets/stone 21 
-150 101 tiles/sets/stone 5 
-150 102 tiles/sets/stone 51 
-150 103 tiles/sets/stone 2 
-150 104 tiles/slope 0 
-151 100 tiles/sets/stone 32 
-151 101 tiles/sets/stone 21 
-151 102 tiles/sets/stone 5 
-151 103 tiles/sets/stone 51 
-151 104 tiles/sets/stone 2 
-151 105 tiles/slope 0 
-152 101 tiles/sets/stone 49 
-152 102 tiles/sets/stone 5 
-152 103 tiles/sets/stone 5 
-152 104 tiles/sets/stone 51 
-152 105 tiles/sets/stone 2 
-152 106 tiles/slope 0 
-153 101 tiles/sets/stone 49 
-153 102 tiles/sets/stone 5 
-153 103 tiles/sets/stone 5 
-153 104 tiles/sets/stone 5 
-153 105 tiles/sets/stone 51 
-153 106 tiles/sets/stone 2 
-153 107 tiles/slope 0 
-154 101 tiles/sets/stone 49 
-154 102 tiles/sets/stone 5 
-154 103 tiles/sets/stone 5 
-154 104 tiles/sets/stone 5 
-154 105 tiles/sets/stone 5 
-154 106 tiles/sets/stone 51 
-154 107 tiles/sets/stone 2 
-154 108 tiles/slope 0 
-155 101 tiles/sets/stone 49 
-155 102 tiles/sets/stone 5 
-155 103 tiles/sets/stone 5 
-155 104 tiles/sets/stone 5 
-155 105 tiles/sets/stone 5 
-155 106 tiles/sets/stone 5 
-155 107 tiles/sets/stone 51 
-155 108 tiles/sets/stone 2 
-155 109 tiles/slope 0 
-156 101 tiles/sets/stone 49 
-156 102 tiles/sets/stone 5 
-156 103 tiles/sets/stone 5 
-156 104 tiles/sets/stone 5 
-156 105 tiles/sets/stone 5 
-156 106 tiles/sets/stone 5 
-156 107 tiles/sets/stone 5 
-156 108 tiles/sets/stone 51 
-156 109 tiles/sets/stone 2 
-156 110 tiles/slope 0 
-157 101 tiles/sets/stone 49 
-157 102 tiles/sets/stone 5 
-157 103 tiles/sets/stone 5 
-157 104 tiles/sets/stone 5 
-157 105 tiles/sets/stone 5 
-157 106 tiles/sets/stone 5 
-157 107 tiles/sets/stone 5 
-157 108 tiles/sets/stone 5 
-157 109 tiles/sets/stone 51 
-157 110 tiles/sets/stone 2 
-157 111 tiles/slope 0 
-158 101 tiles/sets/stone 49 
-158 102 tiles/sets/stone 5 
-158 103 tiles/sets/stone 5 
-158 104 tiles/sets/stone 5 
-158 105 tiles/sets/stone 5 
-158 106 tiles/sets/stone 5 
-158 107 tiles/sets/stone 5 
-158 108 tiles/sets/stone 5 
-158 109 tiles/sets/stone 5 
-158 110 tiles/sets/stone 51 
-158 111 tiles/sets/stone 2 
-158 112 tiles/slope 0 
-159 101 tiles/sets/stone 49 
-159 102 tiles/sets/stone 5 
-159 103 tiles/sets/stone 5 
-159 104 tiles/sets/stone 5 
-159 105 tiles/sets/stone 5 
-159 106 tiles/sets/stone 5 
-159 107 tiles/sets/stone 5 
-159 108 tiles/sets/stone 5 
-159 109 tiles/sets/stone 5 
-159 110 tiles/sets/stone 5 
-159 111 tiles/sets/stone 51 
-159 112 tiles/sets/stone 2 
-159 113 tiles/slope 0 
-160 101 tiles/sets/stone 49 
-160 102 tiles/sets/stone 5 
-160 103 tiles/sets/stone 5 
-160 104 tiles/sets/stone 5 
-160 105 tiles/sets/stone 5 
-160 106 tiles/sets/stone 5 
-160 107 tiles/sets/stone 5 
-160 108 tiles/sets/stone 5 
-160 109 tiles/sets/stone 5 
-160 110 tiles/sets/stone 5 
-160 111 tiles/sets/stone 5 
-160 112 tiles/sets/stone 51 
-160 113 tiles/sets/stone 2 
-160 114 tiles/slope 0 
-161 101 tiles/sets/stone 32 
-161 102 tiles/sets/stone 34 
-161 103 tiles/sets/stone 34 
-161 104 tiles/sets/stone 34 
-161 105 tiles/sets/stone 34 
-161 106 tiles/sets/stone 34 
-161 107 tiles/sets/stone 34 
-161 108 tiles/sets/stone 34 
-161 109 tiles/sets/stone 34 
-161 110 tiles/sets/stone 34 
-161 111 tiles/sets/stone 34 
-161 112 tiles/sets/stone 21 
-161 113 tiles/sets/stone 51 
-161 114 tiles/sets/stone 2 
-161 115 tiles/slope 0 
-162 112 tiles/sets/stone 32 
-162 113 tiles/sets/stone 21 
-162 114 tiles/sets/stone 51 
-162 115 tiles/sets/stone 2 
-162 116 tiles/slope 0 
-163 113 tiles/sets/stone 49 
-163 114 tiles/sets/stone 5 
-163 115 tiles/sets/stone 51 
-163 116 tiles/sets/stone 2 
-163 117 tiles/slope 0 
-164 113 tiles/sets/stone 49 
-164 114 tiles/sets/stone 5 
-164 115 tiles/sets/stone 5 
-164 116 tiles/sets/stone 51 
-164 117 tiles/sets/stone 2 
-164 118 tiles/slope 0 
-165 111 tiles/sets/stone 47 
-165 112 tiles/sets/stone 4 
-165 113 tiles/sets/stone 36 
-165 114 tiles/sets/stone 5 
-165 115 tiles/sets/stone 5 
-165 116 tiles/sets/stone 5 
-165 117 tiles/sets/stone 51 
-165 118 tiles/sets/stone 2 
-165 119 tiles/slope 0 
-166 111 tiles/sets/stone 49 
-166 112 tiles/sets/stone 5 
-166 113 tiles/sets/stone 5 
-166 114 tiles/sets/stone 5 
-166 115 tiles/sets/stone 5 
-166 116 tiles/sets/stone 5 
-166 117 tiles/sets/stone 5 
-166 118 tiles/sets/stone 51 
-166 119 tiles/sets/stone 2 
-166 120 tiles/slope 0 
-167 111 tiles/sets/stone 32 
-167 112 tiles/sets/stone 34 
-167 113 tiles/sets/stone 34 
-167 114 tiles/sets/stone 34 
-167 115 tiles/sets/stone 34 
-167 116 tiles/sets/stone 34 
-167 117 tiles/sets/stone 34 
-167 118 tiles/sets/stone 21 
-167 119 tiles/sets/stone 51 
-167 120 tiles/sets/stone 2 
-167 121 tiles/slope 0 
-168 118 tiles/sets/stone 32 
-168 119 tiles/sets/stone 21 
-168 120 tiles/sets/stone 51 
-168 121 tiles/sets/stone 2 
-168 122 tiles/slope 0 
-169 119 tiles/sets/stone 49 
-169 120 tiles/sets/stone 5 
-169 121 tiles/sets/stone 51 
-169 122 tiles/sets/stone 2 
-169 123 tiles/slope 0 
-170 119 tiles/sets/stone 49 
-170 120 tiles/sets/stone 5 
-170 121 tiles/sets/stone 5 
-170 122 tiles/sets/stone 51 
-170 123 tiles/sets/stone 2 
-170 124 tiles/slope 0 
-171 117 tiles/sets/stone 47 
-171 118 tiles/sets/stone 4 
-171 119 tiles/sets/stone 36 
-171 120 tiles/sets/stone 5 
-171 121 tiles/sets/stone 5 
-171 122 tiles/sets/stone 5 
-171 123 tiles/sets/stone 51 
-171 124 tiles/sets/stone 2 
-171 125 tiles/slope 0 
-172 117 tiles/sets/stone 49 
-172 118 tiles/sets/stone 5 
-172 119 tiles/sets/stone 5 
-172 120 tiles/sets/stone 5 
-172 121 tiles/sets/stone 5 
-172 122 tiles/sets/stone 5 
-172 123 tiles/sets/stone 5 
-172 124 tiles/sets/stone 51 
-172 125 tiles/sets/stone 2 
-172 126 tiles/slope 0 
-173 117 tiles/sets/stone 32 
-173 118 tiles/sets/stone 34 
-173 119 tiles/sets/stone 34 
-173 120 tiles/sets/stone 34 
-173 121 tiles/sets/stone 34 
-173 122 tiles/sets/stone 34 
-173 123 tiles/sets/stone 34 
-173 124 tiles/sets/stone 21 
-173 125 tiles/sets/stone 51 
-173 126 tiles/sets/stone 2 
-173 127 tiles/slope 0 
-174 124 tiles/sets/stone 32 
-174 125 tiles/sets/stone 21 
-174 126 tiles/sets/stone 51 
-174 127 tiles/sets/stone 2 
-174 128 tiles/slope 0 
-175 125 tiles/sets/stone 49 
-175 126 tiles/sets/stone 5 
-175 127 tiles/sets/stone 51 
-175 128 tiles/sets/stone 2 
-175 129 tiles/slope 0 
-176 125 tiles/sets/stone 49 
-176 126 tiles/sets/stone 5 
-176 127 tiles/sets/stone 5 
-176 128 tiles/sets/stone 51 
-176 129 tiles/sets/stone 2 
-176 130 tiles/slope 0 
-177 123 tiles/sets/stone 47 
-177 124 tiles/sets/stone 4 
-177 125 tiles/sets/stone 36 
-177 126 tiles/sets/stone 5 
-177 127 tiles/sets/stone 5 
-177 128 tiles/sets/stone 5 
-177 129 tiles/sets/stone 51 
-177 130 tiles/sets/stone 2 
-177 131 tiles/slope 0 
-178 123 tiles/sets/stone 49 
-178 124 tiles/sets/stone 5 
-178 125 tiles/sets/stone 5 
-178 126 tiles/sets/stone 5 
-178 127 tiles/sets/stone 5 
-178 128 tiles/sets/stone 5 
-178 129 tiles/sets/stone 5 
-178 130 tiles/sets/stone 51 
-178 131 tiles/sets/stone 2 
-178 132 tiles/slope 0 
-179 123 tiles/sets/stone 32 
-179 124 tiles/sets/stone 34 
-179 125 tiles/sets/stone 34 
-179 126 tiles/sets/stone 34 
-179 127 tiles/sets/stone 34 
-179 128 tiles/sets/stone 34 
-179 129 tiles/sets/stone 34 
-179 130 tiles/sets/stone 21 
-179 131 tiles/sets/stone 51 
-179 132 tiles/sets/stone 2 
-179 133 tiles/slope 0 
-180 130 tiles/sets/stone 32 
-180 131 tiles/sets/stone 21 
-180 132 tiles/sets/stone 51 
-180 133 tiles/sets/stone 2 
-180 134 tiles/slope 0 
-181 131 tiles/sets/stone 49 
-181 132 tiles/sets/stone 5 
-181 133 tiles/sets/stone 51 
-181 134 tiles/sets/stone 2 
-181 135 tiles/slope 0 
-182 131 tiles/sets/stone 32 
-182 132 tiles/sets/stone 34 
-182 133 tiles/sets/stone 34 
-182 134 tiles/sets/stone 42 
-182 135 tiles/sets/stone 1 
-182 136 tiles/slope 0 
-110 64 tiles/slope 0 
-111 65 tiles/slope 0 
-183 136 tiles/sets/stone 0 
-56 6 tiles/sets/stone 5 
-57 6 tiles/sets/stone 5 
-58 6 tiles/sets/stone 5 
-59 6 tiles/sets/stone 5 
-60 6 tiles/sets/stone 5 
-61 6 tiles/sets/stone 5 
-62 6 tiles/sets/stone 5 
-63 6 tiles/sets/stone 5 
-64 6 tiles/sets/stone 5 
-65 6 tiles/sets/stone 34 
-75 3 tiles/slope 0 
-76 4 tiles/slope 0 
-77 5 tiles/slope 0 
-78 6 tiles/slope 0 
-79 7 tiles/slope 0 
-80 8 tiles/slope 0 
-81 9 tiles/slope 0 
-82 10 tiles/slope 0 
-83 11 tiles/slope 0 
-84 12 tiles/slope 0 
-85 13 tiles/slope 0 
-86 14 tiles/slope 0 
-87 15 tiles/slope 0 
-88 16 tiles/slope 0 
-89 17 tiles/slope 0 
-90 18 tiles/slope 0 
-91 19 tiles/slope 0 
-92 20 tiles/slope 0 
-93 21 tiles/slope 0 
-94 22 tiles/slope 0 
-95 23 tiles/slope 0 
-96 24 tiles/slope 0 
-97 25 tiles/slope 0 
-98 26 tiles/slope 0 
-99 27 tiles/slope 0 
-100 28 tiles/slope 0 
-101 29 tiles/slope 0 
-102 30 tiles/slope 0 
-103 31 tiles/slope 0 
-104 32 tiles/slope 0 
-105 33 tiles/slope 0 
-106 34 tiles/slope 0 
-107 35 tiles/slope 0 
-108 36 tiles/slope 0 
-109 37 tiles/slope 0 
-110 38 tiles/slope 0 
-111 39 tiles/slope 0 
-112 40 tiles/slope 0 
-113 41 tiles/slope 0 
-114 42 tiles/slope 0 
-115 43 tiles/slope 0 
-116 44 tiles/slope 0 
-117 45 tiles/slope 0 
-118 46 tiles/slope 0 
-119 47 tiles/slope 0 
-120 48 tiles/slope 0 
-121 49 tiles/slope 0 
-122 50 tiles/slope 0 
-123 51 tiles/slope 0 
-124 52 tiles/slope 0 
-125 53 tiles/slope 0 
-126 54 tiles/slope 0 
-127 55 tiles/slope 0 
-128 56 tiles/slope 0 
-129 57 tiles/slope 0 
-39 5 tiles/slope 1 
-38 6 tiles/slope 1 
-37 7 tiles/slope 1 
-36 8 tiles/slope 1 
-35 9 tiles/slope 1 
-33 11 tiles/slope 1 
-34 10 tiles/slope 1 
-32 12 tiles/slope 1 
-31 13 tiles/slope 1 
-30 14 tiles/slope 1 
-29 15 tiles/slope 1 
-28 16 tiles/slope 1 
-27 17 tiles/slope 1 
-26 18 tiles/slope 1 
-26 17 tiles/sets/stone 1 
-26 16 tiles/sets/stone 59 
-27 16 tiles/sets/stone 29 
-27 15 tiles/sets/stone 59 
-28 14 tiles/sets/stone 59 
-28 15 tiles/sets/stone 29 
-29 14 tiles/sets/stone 29 
-29 13 tiles/sets/stone 59 
-30 13 tiles/sets/stone 29 
-30 12 tiles/sets/stone 59 
-31 12 tiles/sets/stone 29 
-31 11 tiles/sets/stone 59 
-32 11 tiles/sets/stone 29 
-32 10 tiles/sets/stone 59 
-33 10 tiles/sets/stone 29 
-33 9 tiles/sets/stone 59 
-34 9 tiles/sets/stone 29 
-34 8 tiles/sets/stone 59 
-35 8 tiles/sets/stone 29 
-35 7 tiles/sets/stone 59 
-36 7 tiles/sets/stone 29 
-36 6 tiles/sets/stone 59 
-37 6 tiles/sets/stone 29 
-37 5 tiles/sets/stone 59 
-38 5 tiles/sets/stone 29 
-38 4 tiles/sets/stone 59 
-39 4 tiles/sets/stone 27 
-39 3 tiles/sets/stone 47 
-50 9 tiles/power_fruit 3 
-48 22 tiles/dynamic_color_cube 0 bbffaa 
-47 21 tiles/dynamic_color_cube 0 bbffaa 
-46 20 tiles/dynamic_color_cube 0 bbffaa 
-45 20 tiles/dynamic_color_cube 0 bbffaa 
-43 19 tiles/dynamic_color_cube 0 bbffaa 
-43 20 tiles/dynamic_color_cube 0 bbffaa 
-44 20 tiles/dynamic_color_cube 0 bbffaa 
-43 21 tiles/dynamic_color_cube 0 bbffaa 
-44 21 tiles/dynamic_color_cube 0 bbffaa 
-45 21 tiles/dynamic_color_cube 0 bbffaa 
-46 22 tiles/dynamic_color_cube 0 bbffaa 
-46 21 tiles/dynamic_color_cube 0 bbffaa 
-47 22 tiles/dynamic_color_cube 0 bbffaa 
-48 23 tiles/dynamic_color_cube 0 bbffaa 
-46 23 tiles/dynamic_color_cube 0 bbffaa 
-45 22 tiles/dynamic_color_cube 0 bbffaa 
-40 21 tiles/dynamic_color_cube 0 bbffaa 
-43 23 tiles/dynamic_color_cube 0 bbffaa 
-41 22 tiles/dynamic_color_cube 0 bbffaa 
-42 22 tiles/dynamic_color_cube 0 bbffaa 
-41 21 tiles/dynamic_color_cube 0 bbffaa 
-42 21 tiles/dynamic_color_cube 0 bbffaa 
-46 24 tiles/dynamic_color_cube 0 bbffaa 
-47 25 tiles/dynamic_color_cube 0 bbffaa 
-45 23 tiles/dynamic_color_cube 0 bbffaa 
-44 22 tiles/dynamic_color_cube 0 bbffaa 
-43 22 tiles/dynamic_color_cube 0 bbffaa 
-44 23 tiles/dynamic_color_cube 0 bbffaa 
-45 24 tiles/dynamic_color_cube 0 bbffaa 
-46 25 tiles/dynamic_color_cube 0 bbffaa 
-47 26 tiles/dynamic_color_cube 0 bbffaa 
-48 27 tiles/dynamic_color_cube 0 bbffaa 
-48 26 tiles/dynamic_color_cube 0 bbffaa 
-47 23 tiles/dynamic_color_cube 0 bbffaa 
-47 24 tiles/dynamic_color_cube 0 bbffaa 
-48 25 tiles/dynamic_color_cube 0 bbffaa 
-49 26 tiles/dynamic_color_cube 0 bbffaa 
-50 27 tiles/dynamic_color_cube 0 bbffaa 
-50 26 tiles/dynamic_color_cube 0 bbffaa 
-49 25 tiles/dynamic_color_cube 0 bbffaa 
-49 23 tiles/dynamic_color_cube 0 bbffaa 
-49 24 tiles/dynamic_color_cube 0 bbffaa 
-50 24 tiles/dynamic_color_cube 0 bbffaa 
-51 26 tiles/dynamic_color_cube 0 bbffaa 
-52 27 tiles/dynamic_color_cube 0 bbffaa 
-52 26 tiles/dynamic_color_cube 0 bbffaa 
-51 24 tiles/dynamic_color_cube 0 bbffaa 
-51 23 tiles/dynamic_color_cube 0 bbffaa 
-52 23 tiles/dynamic_color_cube 0 bbffaa 
-52 24 tiles/dynamic_color_cube 0 bbffaa 
-43 16 tiles/dynamic_color_cube 0 ffffaa 
-37 21 tiles/dynamic_color_cube 0 ffffaa 
-42 15 tiles/dynamic_color_cube 0 ffffaa 
-41 18 tiles/dynamic_color_cube 0 ffffaa 
-38 19 tiles/dynamic_color_cube 0 ffffaa 
-39 23 tiles/dynamic_color_cube 0 ffffaa 
-47 20 tiles/dynamic_color_cube 0 ffffaa 
-37 24 tiles/dynamic_color_cube 0 ffffaa 
-42 16 tiles/dynamic_color_cube 0 ffffaa 
-38 21 tiles/dynamic_color_cube 0 ffffaa 
-41 15 tiles/dynamic_color_cube 0 ffffaa 
-46 18 tiles/dynamic_color_cube 0 ffffaa 
-37 18 tiles/dynamic_color_cube 0 ffffaa 
-40 22 tiles/dynamic_color_cube 0 ffffaa 
-44 19 tiles/dynamic_color_cube 0 ffffaa 
-39 20 tiles/dynamic_color_cube 0 ffffaa 
-40 24 tiles/dynamic_color_cube 0 ffffaa 
-42 17 tiles/dynamic_color_cube 0 ffffaa 
-48 21 tiles/dynamic_color_cube 0 ffffaa 
-36 22 tiles/dynamic_color_cube 0 ffffaa 
-45 19 tiles/dynamic_color_cube 0 ffffaa 
-41 19 tiles/dynamic_color_cube 0 ffffaa 
-38 23 tiles/dynamic_color_cube 0 ffffaa 
-35 20 tiles/dynamic_color_cube 0 ffffaa 
-43 17 tiles/dynamic_color_cube 0 ffffaa 
-39 21 tiles/dynamic_color_cube 0 ffffaa 
-38 18 tiles/dynamic_color_cube 0 ffffaa 
-42 19 tiles/dynamic_color_cube 0 ffffaa 
-37 19 tiles/dynamic_color_cube 0 ffffaa 
-38 20 tiles/dynamic_color_cube 0 ffffaa 
-39 24 tiles/dynamic_color_cube 0 ffffaa 
-44 17 tiles/dynamic_color_cube 0 ffffaa 
-37 22 tiles/dynamic_color_cube 0 ffffaa 
-40 19 tiles/dynamic_color_cube 0 ffffaa 
-45 17 tiles/dynamic_color_cube 0 ffffaa 
-41 17 tiles/dynamic_color_cube 0 ffffaa 
-43 18 tiles/dynamic_color_cube 0 ffffaa 
-39 18 tiles/dynamic_color_cube 0 ffffaa 
-38 22 tiles/dynamic_color_cube 0 ffffaa 
-42 23 tiles/dynamic_color_cube 0 ffffaa 
-36 19 tiles/dynamic_color_cube 0 ffffaa 
-41 23 tiles/dynamic_color_cube 0 ffffaa 
-41 20 tiles/dynamic_color_cube 0 ffffaa 
-38 24 tiles/dynamic_color_cube 0 ffffaa 
-42 25 tiles/dynamic_color_cube 0 ffffaa 
-42 18 tiles/dynamic_color_cube 0 ffffaa 
-37 23 tiles/dynamic_color_cube 0 ffffaa 
-41 16 tiles/dynamic_color_cube 0 ffffaa 
-42 20 tiles/dynamic_color_cube 0 ffffaa 
-37 20 tiles/dynamic_color_cube 0 ffffaa 
-36 21 tiles/dynamic_color_cube 0 ffffaa 
-45 18 tiles/dynamic_color_cube 0 ffffaa 
-40 18 tiles/dynamic_color_cube 0 ffffaa 
-39 22 tiles/dynamic_color_cube 0 ffffaa 
-46 19 tiles/dynamic_color_cube 0 ffffaa 
-39 19 tiles/dynamic_color_cube 0 ffffaa 
-40 23 tiles/dynamic_color_cube 0 ffffaa 
-43 24 tiles/dynamic_color_cube 0 ffffaa 
-44 16 tiles/dynamic_color_cube 0 ffffaa 
-40 20 tiles/dynamic_color_cube 0 ffffaa 
-44 18 tiles/dynamic_color_cube 0 ffffaa 
-35 22 tiles/dynamic_color_cube 0 ffffaa 
-47 19 tiles/dynamic_color_cube 0 ffffaa 
-35 19 tiles/dynamic_color_cube 0 ffffaa 
-36 23 tiles/dynamic_color_cube 0 ffffaa 
-48 20 tiles/dynamic_color_cube 0 ffffaa 
-42 24 tiles/dynamic_color_cube 0 ffffaa 
-36 20 tiles/dynamic_color_cube 0 ffffaa 
-41 24 tiles/dynamic_color_cube 0 ffffaa 
-48 24 tiles/color_cube 14 
-51 25 tiles/dynamic_color_cube 0 bbffaa 
-50 25 tiles/color_cube 14 
-39 17 tiles/dynamic_color_cube 0 66eeff 
-40 17 tiles/dynamic_color_cube 0 66eeff 
-40 16 tiles/dynamic_color_cube 0 66eeff 
-39 16 tiles/dynamic_color_cube 0 66eeff 
-39 15 tiles/dynamic_color_cube 0 66eeff 
-39 14 tiles/dynamic_color_cube 0 66eeff 
-39 13 tiles/dynamic_color_cube 0 66eeff 
-40 15 tiles/dynamic_color_cube 0 66eeff 
-40 14 tiles/dynamic_color_cube 0 66eeff 
-40 13 tiles/dynamic_color_cube 0 66eeff 
-42 12 tiles/dynamic_color_cube 0 66eeff 
-39 12 tiles/dynamic_color_cube 0 66eeff 
-40 12 tiles/dynamic_color_cube 0 66eeff 
-41 12 tiles/dynamic_color_cube 0 66eeff 
-39 11 tiles/dynamic_color_cube 0 66eeff 
-40 11 tiles/dynamic_color_cube 0 66eeff 
-41 11 tiles/dynamic_color_cube 0 66eeff 
-42 11 tiles/dynamic_color_cube 0 66eeff 
-43 11 tiles/dynamic_color_cube 0 66eeff 
-47 18 tiles/dynamic_color_cube 0 66eeff 
-47 16 tiles/dynamic_color_cube 0 66eeff 
-47 17 tiles/dynamic_color_cube 0 66eeff 
-47 14 tiles/dynamic_color_cube 0 66eeff 
-47 15 tiles/dynamic_color_cube 0 66eeff 
-48 18 tiles/dynamic_color_cube 0 66eeff 
-48 17 tiles/dynamic_color_cube 0 66eeff 
-48 16 tiles/dynamic_color_cube 0 66eeff 
-48 15 tiles/dynamic_color_cube 0 66eeff 
-48 14 tiles/dynamic_color_cube 0 66eeff 
-50 13 tiles/dynamic_color_cube 0 66eeff 
-49 13 tiles/dynamic_color_cube 0 66eeff 
-48 13 tiles/dynamic_color_cube 0 66eeff 
-49 14 tiles/dynamic_color_cube 0 66eeff 
-50 23 tiles/color_cube 9 
-50 22 tiles/color_cube 9 
-51 22 tiles/color_cube 9 
-30 44 tiles/power_fruit 1 
-63 53 tiles/sets/rock 0 
-66 34 tiles/sets/rock 0 
-57 40 tiles/sets/grass 57 
-58 40 tiles/sets/grass 16 
-59 41 tiles/sets/grass 59 
-60 41 tiles/sets/grass 18 
-61 41 tiles/sets/grass 16 
-62 42 tiles/sets/grass 46 
-63 42 tiles/sets/grass 16 
-65 43 tiles/sets/grass 0 
-68 44 tiles/sets/grass 0 
-71 45 tiles/sets/grass 0 
-73 46 tiles/sets/grass 0 
-53 38 tiles/sets/grass 0 
-54 39 tiles/sets/grass 46 
-55 39 tiles/sets/grass 16 
-56 40 tiles/sets/grass 47 
-56 41 tiles/sets/grass 2 
-57 41 tiles/sets/grass 17 
-58 42 tiles/sets/grass 46 
-59 42 tiles/sets/grass 29 
-60 43 tiles/sets/grass 31 
-60 44 tiles/sets/grass 14 
-61 44 tiles/sets/grass 16 
-62 45 tiles/sets/grass 0 
-63 46 tiles/sets/grass 0 
-64 47 tiles/sets/grass 46 
-65 47 tiles/sets/grass 16 
-66 48 tiles/sets/grass 0 
-67 49 tiles/sets/grass 0 
-68 50 tiles/sets/grass 0 
-69 51 tiles/sets/grass 46 
-70 51 tiles/sets/grass 16 
-71 52 tiles/sets/grass 31 
-71 53 tiles/sets/grass 1 
-76 53 tiles/sets/grass 0 
-77 54 tiles/sets/grass 31 
-77 55 tiles/sets/grass 1 
-78 56 tiles/sets/grass 46 
-79 56 tiles/sets/grass 44 
-79 57 tiles/sets/grass 1 
-80 58 tiles/sets/grass 0 
-81 59 tiles/sets/grass 31 
-81 60 tiles/sets/grass 14 
-82 60 tiles/sets/grass 44 
-82 61 tiles/sets/grass 1 
-83 62 tiles/sets/grass 0 
-84 63 tiles/sets/grass 0 
-85 64 tiles/sets/grass 0 
-86 65 tiles/sets/grass 31 
-86 66 tiles/sets/grass 1 
-87 67 tiles/sets/grass 0 
-88 68 tiles/sets/grass 0 
-89 69 tiles/sets/grass 31 
-89 70 tiles/sets/grass 14 
-90 70 tiles/sets/grass 16 
-91 71 tiles/sets/grass 31 
-91 72 tiles/sets/grass 1 
-92 73 tiles/sets/grass 31 
-92 74 tiles/sets/grass 14 
-93 74 tiles/sets/grass 16 
-94 75 tiles/sets/grass 31 
-94 76 tiles/sets/grass 1 
-95 77 tiles/sets/grass 46 
-96 77 tiles/sets/grass 44 
-96 78 tiles/sets/grass 1 
-44 104 tiles/sets/grass 1 
-44 103 tiles/sets/grass 59 
-45 103 tiles/sets/grass 18 
-46 103 tiles/sets/grass 16 
-47 102 tiles/sets/grass 46 
-48 102 tiles/sets/grass 18 
-49 102 tiles/sets/grass 16 
-50 101 tiles/sets/grass 46 
-51 101 tiles/sets/grass 18 
-52 101 tiles/sets/grass 16 
-53 100 tiles/sets/grass 46 
-54 100 tiles/sets/grass 18 
-55 100 tiles/sets/grass 18 
-56 100 tiles/sets/grass 16 
-57 99 tiles/sets/grass 46 
-58 99 tiles/sets/grass 18 
-59 99 tiles/sets/grass 16 
-60 98 tiles/sets/grass 46 
-61 98 tiles/sets/grass 18 
-62 98 tiles/sets/grass 16 
-63 97 tiles/sets/grass 46 
-64 97 tiles/sets/grass 18 
-65 97 tiles/sets/grass 16 
-66 96 tiles/sets/grass 46 
-67 96 tiles/sets/grass 18 
-68 96 tiles/sets/grass 16 
-69 95 tiles/sets/grass 46 
-70 95 tiles/sets/grass 18 
-71 95 tiles/sets/grass 16 
-72 94 tiles/sets/grass 46 
-73 94 tiles/sets/grass 27 
-75 93 tiles/sets/grass 18 
-76 93 tiles/sets/grass 18 
-77 93 tiles/sets/grass 18 
-78 93 tiles/sets/grass 16 
-79 92 tiles/sets/grass 46 
-80 92 tiles/sets/grass 18 
-81 92 tiles/sets/grass 16 
-82 91 tiles/sets/grass 46 
-83 91 tiles/sets/grass 18 
-84 91 tiles/sets/grass 29 
-84 90 tiles/sets/grass 59 
-85 90 tiles/sets/grass 18 
-86 90 tiles/sets/grass 18 
-87 90 tiles/sets/grass 16 
-88 89 tiles/sets/grass 46 
-89 89 tiles/sets/grass 18 
-90 89 tiles/sets/grass 16 
-91 88 tiles/sets/grass 46 
-92 88 tiles/sets/grass 18 
-93 88 tiles/sets/grass 16 
-94 87 tiles/sets/grass 46 
-95 87 tiles/sets/grass 18 
-96 87 tiles/sets/grass 16 
-97 86 tiles/sets/grass 46 
-98 86 tiles/sets/grass 18 
-99 86 tiles/sets/grass 18 
-100 86 tiles/sets/grass 27 
-101 85 tiles/sets/grass 49 
-102 85 tiles/sets/grass 57 
-103 85 tiles/sets/grass 16 
-104 84 tiles/sets/grass 46 
-105 84 tiles/sets/grass 16 
-106 83 tiles/sets/grass 46 
-107 83 tiles/sets/grass 18 
-108 83 tiles/sets/grass 18 
-109 83 tiles/sets/grass 16 
-110 82 tiles/sets/grass 46 
-111 82 tiles/sets/grass 18 
-112 82 tiles/sets/grass 16 
-37 80 tiles/sets/grass 31 
-37 81 tiles/sets/grass 41 
-37 83 tiles/sets/grass 3 
-37 84 tiles/sets/grass 3 
-37 85 tiles/sets/grass 3 
-37 86 tiles/sets/grass 3 
-37 87 tiles/sets/grass 1 
-38 88 tiles/sets/grass 31 
-38 89 tiles/sets/grass 3 
-38 90 tiles/sets/grass 3 
-38 91 tiles/sets/grass 3 
-38 92 tiles/sets/grass 3 
-38 93 tiles/sets/grass 3 
-38 94 tiles/sets/grass 3 
-38 95 tiles/sets/grass 3 
-38 96 tiles/sets/grass 14 
-39 96 tiles/sets/grass 16 
-46 76 tiles/sets/grass 31 
-46 77 tiles/sets/grass 1 
-47 78 tiles/sets/grass 31 
-47 79 tiles/sets/grass 1 
-48 80 tiles/sets/grass 31 
-48 81 tiles/sets/grass 3 
-48 82 tiles/sets/grass 1 
-49 83 tiles/sets/grass 31 
-49 84 tiles/sets/grass 1 
-50 85 tiles/sets/grass 0 
-51 86 tiles/sets/grass 31 
-51 87 tiles/sets/grass 3 
-51 88 tiles/sets/grass 1 
-52 89 tiles/sets/grass 31 
-52 90 tiles/sets/grass 14 
-53 90 tiles/sets/grass 16 
-39 56 tiles/sets/grass 0 
-40 57 tiles/sets/grass 0 
-41 58 tiles/sets/grass 0 
-42 59 tiles/sets/grass 0 
-43 60 tiles/sets/grass 0 
-44 61 tiles/sets/grass 0 
-45 62 tiles/sets/grass 0 
-46 63 tiles/sets/grass 0 
-47 64 tiles/sets/grass 0 
-48 65 tiles/sets/grass 0 
-49 66 tiles/sets/grass 0 
-50 67 tiles/sets/grass 0 
-51 68 tiles/sets/grass 0 
-52 69 tiles/sets/grass 0 
-53 70 tiles/sets/grass 0 
-54 71 tiles/sets/grass 0 
-55 72 tiles/sets/grass 0 
-56 73 tiles/sets/grass 0 
-57 74 tiles/sets/grass 0 
-58 75 tiles/sets/grass 0 
-59 76 tiles/sets/grass 0 
-60 77 tiles/sets/grass 0 
-61 78 tiles/sets/grass 0 
-62 79 tiles/sets/grass 46 
-63 80 tiles/sets/grass 14 
-64 81 tiles/sets/grass 2 
-65 82 tiles/sets/grass 14 
-51 57 tiles/sets/grass 0 
-52 58 tiles/sets/grass 46 
-53 58 tiles/sets/grass 16 
-54 59 tiles/sets/grass 31 
-54 60 tiles/sets/grass 14 
-55 60 tiles/sets/grass 16 
-56 61 tiles/sets/grass 0 
-57 62 tiles/sets/grass 0 
-58 63 tiles/sets/grass 0 
-59 64 tiles/sets/grass 46 
-60 64 tiles/sets/grass 44 
-60 65 tiles/sets/grass 1 
-61 66 tiles/sets/grass 46 
-62 66 tiles/sets/grass 16 
-63 67 tiles/sets/grass 31 
-63 68 tiles/sets/grass 14 
-64 68 tiles/sets/grass 16 
-65 69 tiles/sets/grass 0 
-28 97 tiles/sets/grass 0 
-27 96 tiles/sets/grass 0 
-26 95 tiles/sets/grass 1 
-26 94 tiles/sets/grass 3 
-26 93 tiles/sets/grass 3 
-26 92 tiles/sets/grass 31 
-25 91 tiles/sets/grass 0 
-24 90 tiles/sets/grass 1 
-24 89 tiles/sets/grass 31 
-23 88 tiles/sets/grass 0 
-22 87 tiles/sets/grass 1 
-22 86 tiles/sets/grass 44 
-21 86 tiles/sets/grass 14 
-21 85 tiles/sets/grass 31 
-20 84 tiles/sets/grass 1 
-20 83 tiles/sets/grass 31 
-19 82 tiles/sets/grass 1 
-19 81 tiles/sets/grass 44 
-18 81 tiles/sets/grass 46 
-17 80 tiles/sets/grass 1 
-17 79 tiles/sets/grass 31 
-16 78 tiles/sets/grass 1 
-16 77 tiles/sets/grass 31 
-15 76 tiles/sets/grass 0 
-14 75 tiles/sets/grass 1 
-14 74 tiles/sets/grass 31 
-13 73 tiles/sets/grass 1 
-13 72 tiles/sets/grass 31 
-12 71 tiles/sets/grass 16 
-11 71 tiles/sets/grass 14 
-11 70 tiles/sets/grass 31 
-10 69 tiles/sets/grass 1 
-10 68 tiles/sets/grass 31 
-9 67 tiles/sets/grass 1 
-9 66 tiles/sets/grass 44 
-8 66 tiles/sets/grass 14 
-8 65 tiles/sets/grass 31 
-7 64 tiles/sets/grass 0 
-6 63 tiles/sets/grass 1 
-6 62 tiles/sets/grass 31 
-5 61 tiles/sets/grass 0 
-4 60 tiles/sets/grass 1 
-4 59 tiles/sets/grass 31 
-3 58 tiles/sets/grass 1 
-3 57 tiles/sets/grass 31 
-2 56 tiles/sets/grass 0 
-1 55 tiles/sets/grass 0 
-0 54 tiles/sets/grass 1 
-0 53 tiles/sets/grass 3 
-0 52 tiles/sets/grass 31 
-9 40 tiles/sets/grass 0 
-10 41 tiles/sets/grass 31 
-10 42 tiles/sets/grass 1 
-11 43 tiles/sets/grass 31 
-11 44 tiles/sets/grass 1 
-12 45 tiles/sets/grass 0 
-13 46 tiles/sets/grass 31 
-13 47 tiles/sets/grass 1 
-14 48 tiles/sets/grass 0 
-15 49 tiles/sets/grass 31 
-15 50 tiles/sets/grass 14 
-16 50 tiles/sets/grass 44 
-16 51 tiles/sets/grass 1 
-17 52 tiles/sets/grass 31 
-17 53 tiles/sets/grass 1 
-18 54 tiles/sets/grass 31 
-18 55 tiles/sets/grass 14 
-19 55 tiles/sets/grass 44 
-19 56 tiles/sets/grass 1 
-20 57 tiles/sets/grass 0 
-21 58 tiles/sets/grass 31 
-21 59 tiles/sets/grass 1 
-22 60 tiles/sets/grass 0 
-23 61 tiles/sets/grass 31 
-23 62 tiles/sets/grass 1 
-24 63 tiles/sets/grass 31 
-24 64 tiles/sets/grass 1 
-25 65 tiles/sets/grass 0 
-26 66 tiles/sets/grass 0 
-27 67 tiles/sets/grass 31 
-27 68 tiles/sets/grass 1 
-28 69 tiles/sets/grass 31 
-28 70 tiles/sets/grass 1 
-29 71 tiles/sets/grass 0 
-30 72 tiles/sets/grass 31 
-30 73 tiles/sets/grass 1 
-31 74 tiles/sets/grass 31 
-31 75 tiles/sets/grass 1 
-32 76 tiles/sets/grass 46 
-33 76 tiles/sets/grass 44 
-33 77 tiles/sets/grass 1 
-34 78 tiles/sets/grass 31 
-34 79 tiles/sets/grass 1 
-35 80 tiles/sets/grass 31 
-35 81 tiles/sets/grass 14 
-36 81 tiles/sets/grass 56 
-36 82 tiles/sets/grass 2 
-37 82 tiles/sets/grass 42 
-5 105 tiles/sets/grass 1 
-5 104 tiles/sets/grass 59 
-6 104 tiles/sets/grass 18 
-7 104 tiles/sets/grass 18 
-8 104 tiles/sets/grass 18 
-9 104 tiles/sets/grass 16 
-10 103 tiles/sets/grass 46 
-11 103 tiles/sets/grass 18 
-12 103 tiles/sets/grass 18 
-13 103 tiles/sets/grass 18 
-14 103 tiles/sets/grass 18 
-15 103 tiles/sets/grass 16 
-16 102 tiles/sets/grass 46 
-17 102 tiles/sets/grass 18 
-18 102 tiles/sets/grass 18 
-19 102 tiles/sets/grass 18 
-20 102 tiles/sets/grass 18 
-21 102 tiles/sets/grass 16 
-22 101 tiles/sets/grass 46 
-23 101 tiles/sets/grass 18 
-24 101 tiles/sets/grass 18 
-25 101 tiles/sets/grass 18 
-26 101 tiles/sets/grass 16 
-27 100 tiles/sets/grass 46 
-28 100 tiles/sets/grass 18 
-29 100 tiles/sets/grass 18 
-30 100 tiles/sets/grass 18 
-31 100 tiles/sets/grass 18 
-32 100 tiles/sets/grass 16 
-33 99 tiles/sets/grass 46 
-34 99 tiles/sets/grass 18 
-35 99 tiles/sets/grass 18 
-36 99 tiles/sets/grass 18 
-37 99 tiles/sets/grass 18 
-38 99 tiles/sets/grass 16 
-39 98 tiles/sets/grass 46 
-40 98 tiles/sets/grass 18 
-41 98 tiles/sets/grass 18 
-42 98 tiles/sets/grass 18 
-43 98 tiles/sets/grass 16 
-44 97 tiles/sets/grass 46 
-45 97 tiles/sets/grass 18 
-46 97 tiles/sets/grass 18 
-47 97 tiles/sets/grass 18 
-48 97 tiles/sets/grass 18 
-49 97 tiles/sets/grass 16 
-50 96 tiles/sets/grass 46 
-51 96 tiles/sets/grass 18 
-52 96 tiles/sets/grass 18 
-53 96 tiles/sets/grass 18 
-54 96 tiles/sets/grass 18 
-55 96 tiles/sets/grass 16 
-56 95 tiles/sets/grass 46 
-57 95 tiles/sets/grass 18 
-58 95 tiles/sets/grass 18 
-59 95 tiles/sets/grass 18 
-60 95 tiles/sets/grass 16 
-61 94 tiles/sets/grass 46 
-62 94 tiles/sets/grass 18 
-63 94 tiles/sets/grass 18 
-64 94 tiles/sets/grass 18 
-65 94 tiles/sets/grass 18 
-66 94 tiles/sets/grass 16 
-67 93 tiles/sets/grass 46 
-68 93 tiles/sets/grass 18 
-69 93 tiles/sets/grass 18 
-70 93 tiles/sets/grass 18 
-71 93 tiles/sets/grass 16 
-72 92 tiles/sets/grass 14 
-93 120 tiles/sets/grass 0 
-92 119 tiles/sets/grass 0 
-91 118 tiles/sets/grass 1 
-91 117 tiles/sets/grass 31 
-90 116 tiles/sets/grass 1 
-90 115 tiles/sets/grass 44 
-89 115 tiles/sets/grass 46 
-88 114 tiles/sets/grass 1 
-88 113 tiles/sets/grass 31 
-87 112 tiles/sets/grass 1 
-87 111 tiles/sets/grass 44 
-86 111 tiles/sets/grass 14 
-86 110 tiles/sets/grass 31 
-85 109 tiles/sets/grass 0 
-84 108 tiles/sets/grass 1 
-84 107 tiles/sets/grass 31 
-83 106 tiles/sets/grass 0 
-82 105 tiles/sets/grass 0 
-81 104 tiles/sets/grass 1 
-81 103 tiles/sets/grass 31 
-80 102 tiles/sets/grass 0 
-79 101 tiles/sets/grass 1 
-79 100 tiles/sets/grass 31 
-78 99 tiles/sets/grass 0 
-77 98 tiles/sets/grass 0 
-76 97 tiles/sets/grass 1 
-76 96 tiles/sets/grass 31 
-75 95 tiles/sets/grass 0 
-74 94 tiles/sets/grass 17 
-74 93 tiles/sets/grass 57 
-73 93 tiles/sets/grass 12 
-73 92 tiles/sets/grass 44 
-72 91 tiles/sets/grass 3 
-72 90 tiles/sets/grass 31 
-71 89 tiles/sets/grass 16 
-70 89 tiles/sets/grass 14 
-70 88 tiles/sets/grass 31 
-69 87 tiles/sets/grass 1 
-69 86 tiles/sets/grass 31 
-68 85 tiles/sets/grass 0 
-67 84 tiles/sets/grass 0 
-66 83 tiles/sets/grass 1 
-66 82 tiles/sets/grass 44 
-65 81 tiles/sets/grass 42 
-65 80 tiles/sets/grass 32 
-64 80 tiles/sets/grass 56 
-63 79 tiles/sets/grass 43 
-63 78 tiles/sets/grass 3 
-63 77 tiles/sets/grass 31 
-119 119 tiles/sets/grass 31 
-119 120 tiles/sets/grass 3 
-119 121 tiles/sets/grass 1 
-120 122 tiles/sets/grass 31 
-120 123 tiles/sets/grass 3 
-120 124 tiles/sets/grass 1 
-121 125 tiles/sets/grass 31 
-121 126 tiles/sets/grass 3 
-121 127 tiles/sets/grass 3 
-121 128 tiles/sets/grass 1 
-122 129 tiles/sets/grass 31 
-122 130 tiles/sets/grass 3 
-122 131 tiles/sets/grass 1 
-123 132 tiles/sets/grass 31 
-123 133 tiles/sets/grass 3 
-123 134 tiles/sets/grass 3 
-123 135 tiles/sets/grass 1 
-124 136 tiles/sets/grass 31 
-124 137 tiles/sets/grass 3 
-124 138 tiles/sets/grass 1 
-125 139 tiles/sets/grass 31 
-125 140 tiles/sets/grass 3 
-125 141 tiles/sets/grass 1 
-126 142 tiles/sets/grass 31 
-126 143 tiles/sets/grass 3 
-126 144 tiles/sets/grass 1 
-127 145 tiles/sets/grass 31 
-127 146 tiles/sets/grass 3 
-127 147 tiles/sets/grass 1 
-128 148 tiles/sets/grass 31 
-128 149 tiles/sets/grass 3 
-128 150 tiles/sets/grass 3 
-128 151 tiles/sets/grass 1 
-129 152 tiles/sets/grass 31 
-129 153 tiles/sets/grass 3 
-129 154 tiles/sets/grass 1 
-130 155 tiles/sets/grass 31 
-130 156 tiles/sets/grass 3 
-130 157 tiles/sets/grass 3 
-130 158 tiles/sets/grass 1 
-131 159 tiles/sets/grass 31 
-131 160 tiles/sets/grass 3 
-131 161 tiles/sets/grass 1 
-132 162 tiles/sets/grass 31 
-132 163 tiles/sets/grass 3 
-132 164 tiles/sets/grass 1 
-133 165 tiles/sets/grass 31 
-133 166 tiles/sets/grass 3 
-133 167 tiles/sets/grass 1 
-134 168 tiles/sets/grass 31 
-134 169 tiles/sets/grass 3 
-134 170 tiles/sets/grass 3 
-134 171 tiles/sets/grass 1 
-135 172 tiles/sets/grass 31 
-135 173 tiles/sets/grass 3 
-135 174 tiles/sets/grass 14 
-136 174 tiles/sets/grass 16 
-137 114 tiles/sets/grass 0 
-138 115 tiles/sets/grass 31 
-138 116 tiles/sets/grass 1 
-139 117 tiles/sets/grass 31 
-139 118 tiles/sets/grass 1 
-140 119 tiles/sets/grass 0 
-141 120 tiles/sets/grass 31 
-141 121 tiles/sets/grass 1 
-142 122 tiles/sets/grass 0 
-143 123 tiles/sets/grass 31 
-143 124 tiles/sets/grass 14 
-144 124 tiles/sets/grass 44 
-144 125 tiles/sets/grass 1 
-145 126 tiles/sets/grass 31 
-145 127 tiles/sets/grass 1 
-146 128 tiles/sets/grass 31 
-146 129 tiles/sets/grass 14 
-147 129 tiles/sets/grass 44 
-147 130 tiles/sets/grass 1 
-148 131 tiles/sets/grass 0 
-149 132 tiles/sets/grass 31 
-149 133 tiles/sets/grass 1 
-150 134 tiles/sets/grass 0 
-151 135 tiles/sets/grass 31 
-151 136 tiles/sets/grass 1 
-152 137 tiles/sets/grass 31 
-152 138 tiles/sets/grass 1 
-153 139 tiles/sets/grass 46 
-154 139 tiles/sets/grass 44 
-154 140 tiles/sets/grass 1 
-155 141 tiles/sets/grass 31 
-155 142 tiles/sets/grass 1 
-156 143 tiles/sets/grass 31 
-156 144 tiles/sets/grass 14 
-157 144 tiles/sets/grass 44 
-157 145 tiles/sets/grass 1 
-158 146 tiles/sets/grass 31 
-158 147 tiles/sets/grass 1 
-159 148 tiles/sets/grass 0 
-160 149 tiles/sets/grass 0 
-161 150 tiles/sets/grass 31 
-161 151 tiles/sets/grass 1 
-162 152 tiles/sets/grass 31 
-162 153 tiles/sets/grass 1 
-163 154 tiles/sets/grass 31 
-163 155 tiles/sets/grass 1 
-39 47 tiles/sets/grass 0 
-38 46 tiles/sets/grass 1 
-38 45 tiles/sets/grass 3 
-38 44 tiles/sets/grass 31 
-37 43 tiles/sets/grass 1 
-37 42 tiles/sets/grass 3 
-37 41 tiles/sets/grass 31 
-36 40 tiles/sets/grass 1 
-36 39 tiles/sets/grass 3 
-36 38 tiles/sets/grass 3 
-36 37 tiles/sets/grass 31 
-35 36 tiles/sets/grass 1 
-35 35 tiles/sets/grass 3 
-35 34 tiles/sets/grass 31 
-34 33 tiles/sets/grass 1 
-34 32 tiles/sets/grass 3 
-34 31 tiles/sets/grass 31 
-66 60 tiles/sets/grass 0 
-67 61 tiles/sets/grass 46 
-68 61 tiles/sets/grass 16 
-69 62 tiles/sets/grass 46 
-70 62 tiles/sets/grass 44 
-70 63 tiles/sets/grass 1 
-71 64 tiles/sets/grass 46 
-72 64 tiles/sets/grass 16 
-73 65 tiles/sets/grass 46 
-74 65 tiles/sets/grass 44 
-74 66 tiles/sets/grass 1 
-75 67 tiles/sets/grass 46 
-76 67 tiles/sets/grass 16 
-77 68 tiles/sets/grass 46 
-78 68 tiles/sets/grass 44 
-78 69 tiles/sets/grass 1 
-79 70 tiles/sets/grass 46 
-80 70 tiles/sets/grass 16 
-81 71 tiles/sets/grass 46 
-82 71 tiles/sets/grass 44 
-82 72 tiles/sets/grass 1 
-83 73 tiles/sets/grass 46 
-84 73 tiles/sets/grass 16 
-85 74 tiles/sets/grass 46 
-86 74 tiles/sets/grass 44 
-86 75 tiles/sets/grass 14 
-87 75 tiles/sets/grass 16 
-88 76 tiles/sets/grass 0 
-89 77 tiles/sets/grass 46 
-90 77 tiles/sets/grass 44 
-90 78 tiles/sets/grass 14 
-91 78 tiles/sets/grass 16 
-92 79 tiles/sets/grass 0 
-93 80 tiles/sets/grass 46 
-94 80 tiles/sets/grass 16 
-95 81 tiles/sets/grass 0 
-96 82 tiles/sets/grass 0 
-97 83 tiles/sets/grass 46 
-98 83 tiles/sets/grass 16 
-99 84 tiles/sets/grass 0 
-100 85 tiles/sets/grass 47 
-101 86 tiles/sets/grass 19 
-102 86 tiles/sets/grass 17 
-103 87 tiles/sets/grass 0 
-104 88 tiles/sets/grass 0 
-105 89 tiles/sets/grass 46 
-106 89 tiles/sets/grass 16 
-107 90 tiles/sets/grass 0 
-108 91 tiles/sets/grass 46 
-109 91 tiles/sets/grass 16 
-110 92 tiles/sets/grass 0 
-111 93 tiles/sets/grass 0 
-112 94 tiles/sets/grass 46 
-113 94 tiles/sets/grass 16 
-114 95 tiles/sets/grass 0 
-115 96 tiles/sets/grass 0 
-107 104 tiles/sets/grass 16 
-106 104 tiles/sets/grass 59 
-106 105 tiles/sets/grass 3 
-106 106 tiles/sets/grass 3 
-106 107 tiles/sets/grass 3 
-106 108 tiles/sets/grass 3 
-105 109 tiles/sets/grass 59 
-105 110 tiles/sets/grass 3 
-105 111 tiles/sets/grass 3 
-105 112 tiles/sets/grass 3 
-105 113 tiles/sets/grass 1 
-104 114 tiles/sets/grass 31 
-104 115 tiles/sets/grass 3 
-104 116 tiles/sets/grass 3 
-104 117 tiles/sets/grass 3 
-104 118 tiles/sets/grass 3 
-104 119 tiles/sets/grass 1 
-103 120 tiles/sets/grass 31 
-103 121 tiles/sets/grass 3 
-103 122 tiles/sets/grass 3 
-103 123 tiles/sets/grass 3 
-103 124 tiles/sets/grass 1 
-102 125 tiles/sets/grass 31 
-102 126 tiles/sets/grass 3 
-102 127 tiles/sets/grass 3 
-102 128 tiles/sets/grass 3 
-102 129 tiles/sets/grass 1 
-101 130 tiles/sets/grass 31 
-101 131 tiles/sets/grass 3 
-101 132 tiles/sets/grass 3 
-101 133 tiles/sets/grass 3 
-101 134 tiles/sets/grass 3 
-101 135 tiles/sets/grass 29 
-100 135 tiles/sets/grass 59 
-100 136 tiles/sets/grass 3 
-100 137 tiles/sets/grass 3 
-100 138 tiles/sets/grass 3 
-100 139 tiles/sets/grass 1 
-99 140 tiles/sets/grass 31 
-99 141 tiles/sets/grass 3 
-99 142 tiles/sets/grass 3 
-99 143 tiles/sets/grass 3 
-99 144 tiles/sets/grass 1 
-98 145 tiles/sets/grass 31 
-98 146 tiles/sets/grass 3 
-98 147 tiles/sets/grass 3 
-98 148 tiles/sets/grass 3 
-98 149 tiles/sets/grass 3 
-98 150 tiles/sets/grass 1 
-97 151 tiles/sets/grass 31 
-97 152 tiles/sets/grass 3 
-97 153 tiles/sets/grass 3 
-97 154 tiles/sets/grass 3 
-97 155 tiles/sets/grass 1 
-96 156 tiles/sets/grass 31 
-96 157 tiles/sets/grass 3 
-96 158 tiles/sets/grass 3 
-96 159 tiles/sets/grass 3 
-96 160 tiles/sets/grass 1 
-95 161 tiles/sets/grass 31 
-95 162 tiles/sets/grass 3 
-95 163 tiles/sets/grass 3 
-95 164 tiles/sets/grass 3 
-95 165 tiles/sets/grass 3 
-95 166 tiles/sets/grass 1 
-106 109 tiles/sets/grass 29 
-237 164 tiles/sets/grass 16 
-238 165 tiles/sets/grass 0 
-239 166 tiles/sets/grass 0 
-240 167 tiles/sets/grass 0 
-241 168 tiles/sets/grass 0 
-242 169 tiles/sets/grass 0 
-243 170 tiles/sets/grass 0 
-244 171 tiles/sets/grass 0 
-245 172 tiles/sets/grass 0 
-246 173 tiles/sets/grass 0 
-247 174 tiles/sets/grass 0 
-248 175 tiles/sets/grass 0 
-249 176 tiles/sets/grass 0 
-250 177 tiles/sets/grass 0 
-251 178 tiles/sets/grass 0 
-252 179 tiles/sets/grass 0 
-253 180 tiles/sets/grass 0 
-254 181 tiles/sets/grass 0 
-255 182 tiles/sets/grass 0 
-256 183 tiles/sets/grass 0 
-257 184 tiles/sets/grass 0 
-258 185 tiles/sets/grass 0 
-259 186 tiles/sets/grass 0 
-260 187 tiles/sets/grass 0 
-261 188 tiles/sets/grass 0 
-262 189 tiles/sets/grass 0 
-263 190 tiles/sets/grass 0 
-264 191 tiles/sets/grass 0 
-265 192 tiles/sets/grass 0 
-266 193 tiles/sets/grass 0 
-267 194 tiles/sets/grass 0 
-268 195 tiles/sets/grass 0 
-269 196 tiles/sets/grass 0 
-270 197 tiles/sets/grass 0 
-271 198 tiles/sets/grass 0 
-272 199 tiles/sets/grass 0 
-273 200 tiles/sets/grass 0 
-275 202 tiles/sets/grass 0 
-276 203 tiles/sets/grass 0 
-277 204 tiles/sets/grass 0 
-278 205 tiles/sets/grass 0 
-279 206 tiles/sets/grass 0 
-280 207 tiles/sets/grass 0 
-274 201 tiles/sets/grass 0 
-236 165 tiles/sets/grass 3 
-236 166 tiles/sets/grass 3 
-236 167 tiles/sets/grass 3 
-236 168 tiles/sets/grass 3 
-236 169 tiles/sets/grass 3 
-236 170 tiles/sets/grass 3 
-236 171 tiles/sets/grass 3 
-236 172 tiles/sets/grass 3 
-236 173 tiles/sets/grass 3 
-236 174 tiles/sets/grass 3 
-236 175 tiles/sets/grass 3 
-236 176 tiles/sets/grass 3 
-236 177 tiles/sets/grass 3 
-236 178 tiles/sets/grass 3 
-236 179 tiles/sets/grass 3 
-236 180 tiles/sets/grass 3 
-236 183 tiles/sets/grass 3 
-236 184 tiles/sets/grass 3 
-236 185 tiles/sets/grass 3 
-236 186 tiles/sets/grass 3 
-236 187 tiles/sets/grass 3 
-236 188 tiles/sets/grass 3 
-236 189 tiles/sets/grass 3 
-236 190 tiles/sets/grass 3 
-236 191 tiles/sets/grass 3 
-236 192 tiles/sets/grass 3 
-236 193 tiles/sets/grass 3 
-236 194 tiles/sets/grass 3 
-236 195 tiles/sets/grass 3 
-236 196 tiles/sets/grass 3 
-236 197 tiles/sets/grass 3 
-236 198 tiles/sets/grass 3 
-236 199 tiles/sets/grass 3 
-236 200 tiles/sets/grass 3 
-236 201 tiles/sets/grass 3 
-236 202 tiles/sets/grass 3 
-236 203 tiles/sets/grass 3 
-236 204 tiles/sets/grass 3 
-236 205 tiles/sets/grass 3 
-236 206 tiles/sets/grass 3 
-236 207 tiles/sets/grass 3 
-236 208 tiles/sets/grass 3 
-236 209 tiles/sets/grass 3 
-236 210 tiles/sets/grass 3 
-236 211 tiles/sets/grass 3 
-236 212 tiles/sets/grass 3 
-236 213 tiles/sets/grass 3 
-236 214 tiles/sets/grass 3 
-236 215 tiles/sets/grass 3 
-236 216 tiles/sets/grass 3 
-236 217 tiles/sets/grass 3 
-236 218 tiles/sets/grass 3 
-236 219 tiles/sets/grass 3 
-236 220 tiles/sets/grass 3 
-236 221 tiles/sets/grass 3 
-236 222 tiles/sets/grass 3 
-281 208 tiles/sets/grass 0 
-236 163 tiles/sets/grass 31 
-236 164 tiles/sets/grass 13 
-236 223 tiles/sets/grass 3 
-236 224 tiles/sets/grass 3 
-236 225 tiles/sets/grass 3 
-236 226 tiles/sets/grass 3 
-236 227 tiles/sets/grass 1 
-236 181 tiles/sets/grass 3 
-236 182 tiles/sets/grass 3 
-198 67 tiles/sets/grass 46 
-199 67 tiles/sets/grass 18 
-200 67 tiles/sets/grass 18 
-201 67 tiles/sets/grass 18 
-202 67 tiles/sets/grass 18 
-203 67 tiles/sets/grass 16 
-204 68 tiles/sets/grass 46 
-205 68 tiles/sets/grass 18 
-206 68 tiles/sets/grass 18 
-207 68 tiles/sets/grass 18 
-208 68 tiles/sets/grass 18 
-209 68 tiles/sets/grass 16 
-210 69 tiles/sets/grass 46 
-211 69 tiles/sets/grass 18 
-212 69 tiles/sets/grass 18 
-213 69 tiles/sets/grass 18 
-214 69 tiles/sets/grass 18 
-215 69 tiles/sets/grass 18 
-216 69 tiles/sets/grass 16 
-217 70 tiles/sets/grass 46 
-218 70 tiles/sets/grass 18 
-219 70 tiles/sets/grass 18 
-220 70 tiles/sets/grass 18 
-221 70 tiles/sets/grass 18 
-222 70 tiles/sets/grass 16 
-223 71 tiles/sets/grass 46 
-224 71 tiles/sets/grass 18 
-225 71 tiles/sets/grass 18 
-226 71 tiles/sets/grass 18 
-227 71 tiles/sets/grass 18 
-228 71 tiles/sets/grass 16 
-229 72 tiles/sets/grass 46 
-230 72 tiles/sets/grass 18 
-231 72 tiles/sets/grass 18 
-232 72 tiles/sets/grass 18 
-233 72 tiles/sets/grass 18 
-234 72 tiles/sets/grass 18 
-235 72 tiles/sets/grass 16 
-236 73 tiles/sets/grass 46 
-237 73 tiles/sets/grass 18 
-238 73 tiles/sets/grass 18 
-239 73 tiles/sets/grass 18 
-240 73 tiles/sets/grass 18 
-241 73 tiles/sets/grass 16 
-242 74 tiles/sets/grass 46 
-243 74 tiles/sets/grass 18 
-244 74 tiles/sets/grass 18 
-245 74 tiles/sets/grass 18 
-246 74 tiles/sets/grass 18 
-247 74 tiles/sets/grass 18 
-248 74 tiles/sets/grass 16 
-249 75 tiles/sets/grass 46 
-250 75 tiles/sets/grass 18 
-251 75 tiles/sets/grass 18 
-252 75 tiles/sets/grass 18 
-253 75 tiles/sets/grass 18 
-254 75 tiles/sets/grass 16 
-255 76 tiles/sets/grass 46 
-256 76 tiles/sets/grass 18 
-257 76 tiles/sets/grass 18 
-258 76 tiles/sets/grass 18 
-259 76 tiles/sets/grass 18 
-260 76 tiles/sets/grass 16 
-261 77 tiles/sets/grass 46 
-262 77 tiles/sets/grass 18 
-263 77 tiles/sets/grass 18 
-264 77 tiles/sets/grass 18 
-265 77 tiles/sets/grass 18 
-266 77 tiles/sets/grass 16 
-267 78 tiles/sets/grass 46 
-268 78 tiles/sets/grass 18 
-269 78 tiles/sets/grass 18 
-270 78 tiles/sets/grass 18 
-271 78 tiles/sets/grass 18 
-272 78 tiles/sets/grass 16 
-273 79 tiles/sets/grass 46 
-274 79 tiles/sets/grass 18 
-275 79 tiles/sets/grass 18 
-276 79 tiles/sets/grass 18 
-277 79 tiles/sets/grass 18 
-278 79 tiles/sets/grass 18 
-279 79 tiles/sets/grass 16 
-280 80 tiles/sets/grass 46 
-281 80 tiles/sets/grass 18 
-282 80 tiles/sets/grass 18 
-283 80 tiles/sets/grass 18 
-284 80 tiles/sets/grass 18 
-285 80 tiles/sets/grass 16 
-286 81 tiles/sets/grass 46 
-287 81 tiles/sets/grass 18 
-288 81 tiles/sets/grass 18 
-289 81 tiles/sets/grass 18 
-290 81 tiles/sets/grass 18 
-291 81 tiles/sets/grass 16 
-292 82 tiles/sets/grass 46 
-293 82 tiles/sets/grass 18 
-294 82 tiles/sets/grass 18 
-295 82 tiles/sets/grass 18 
-296 82 tiles/sets/grass 18 
-297 82 tiles/sets/grass 18 
-298 82 tiles/sets/grass 16 
-299 83 tiles/sets/grass 46 
-300 83 tiles/sets/grass 18 
-301 83 tiles/sets/grass 18 
-302 83 tiles/sets/grass 18 
-303 83 tiles/sets/grass 18 
-304 83 tiles/sets/grass 16 
-305 84 tiles/sets/grass 46 
-306 84 tiles/sets/grass 18 
-307 84 tiles/sets/grass 18 
-308 84 tiles/sets/grass 18 
-309 84 tiles/sets/grass 18 
-310 84 tiles/sets/grass 18 
-311 84 tiles/sets/grass 16 
-312 85 tiles/sets/grass 46 
-313 85 tiles/sets/grass 18 
-314 85 tiles/sets/grass 18 
-315 85 tiles/sets/grass 18 
-316 85 tiles/sets/grass 18 
-317 85 tiles/sets/grass 16 
-318 86 tiles/sets/grass 46 
-319 86 tiles/sets/grass 18 
-320 86 tiles/sets/grass 18 
-321 86 tiles/sets/grass 18 
-322 86 tiles/sets/grass 18 
-323 86 tiles/sets/grass 16 
-324 87 tiles/sets/grass 46 
-325 87 tiles/sets/grass 18 
-326 87 tiles/sets/grass 18 
-327 87 tiles/sets/grass 18 
-328 87 tiles/sets/grass 18 
-329 87 tiles/sets/grass 16 
-330 88 tiles/sets/grass 46 
-331 88 tiles/sets/grass 18 
-332 88 tiles/sets/grass 18 
-333 88 tiles/sets/grass 18 
-334 88 tiles/sets/grass 18 
-335 88 tiles/sets/grass 16 
-336 89 tiles/sets/grass 46 
-337 89 tiles/sets/grass 18 
-338 89 tiles/sets/grass 18 
-339 89 tiles/sets/grass 18 
-340 89 tiles/sets/grass 18 
-341 89 tiles/sets/grass 18 
-342 89 tiles/sets/grass 16 
-343 90 tiles/sets/grass 46 
-344 90 tiles/sets/grass 18 
-345 90 tiles/sets/grass 18 
-346 90 tiles/sets/grass 18 
-347 90 tiles/sets/grass 18 
-348 90 tiles/sets/grass 16 
-349 91 tiles/sets/grass 46 
-350 91 tiles/sets/grass 18 
-351 91 tiles/sets/grass 18 
-352 91 tiles/sets/grass 18 
-353 91 tiles/sets/grass 18 
-354 91 tiles/sets/grass 16 
-355 92 tiles/sets/grass 46 
-356 92 tiles/sets/grass 18 
-357 92 tiles/sets/grass 18 
-358 92 tiles/sets/grass 18 
-359 92 tiles/sets/grass 18 
-360 92 tiles/sets/grass 18 
-361 92 tiles/sets/grass 16 
-362 93 tiles/sets/grass 46 
-363 93 tiles/sets/grass 18 
-364 93 tiles/sets/grass 18 
-365 93 tiles/sets/grass 18 
-366 93 tiles/sets/grass 18 
-367 93 tiles/sets/grass 16 
-368 94 tiles/sets/grass 46 
-369 94 tiles/sets/grass 18 
-370 94 tiles/sets/grass 18 
-371 94 tiles/sets/grass 18 
-372 94 tiles/sets/grass 18 
-373 94 tiles/sets/grass 18 
-374 94 tiles/sets/grass 16 
-375 95 tiles/sets/grass 46 
-376 95 tiles/sets/grass 18 
-377 95 tiles/sets/grass 18 
-378 95 tiles/sets/grass 18 
-379 95 tiles/sets/grass 18 
-380 95 tiles/sets/grass 16 
-381 96 tiles/sets/grass 46 
-382 96 tiles/sets/grass 18 
-383 96 tiles/sets/grass 18 
-384 96 tiles/sets/grass 18 
-385 96 tiles/sets/grass 18 
-386 96 tiles/sets/grass 16 
-387 97 tiles/sets/grass 46 
-388 97 tiles/sets/grass 18 
-389 97 tiles/sets/grass 18 
-390 97 tiles/sets/grass 18 
-391 97 tiles/sets/grass 18 
-392 97 tiles/sets/grass 16 
-393 98 tiles/sets/grass 46 
-394 98 tiles/sets/grass 18 
-395 98 tiles/sets/grass 18 
-396 98 tiles/sets/grass 18 
-397 98 tiles/sets/grass 18 
-398 98 tiles/sets/grass 16 
-399 99 tiles/sets/grass 46 
-400 99 tiles/sets/grass 18 
-401 99 tiles/sets/grass 18 
-402 99 tiles/sets/grass 18 
-403 99 tiles/sets/grass 18 
-404 99 tiles/sets/grass 18 
-405 99 tiles/sets/grass 16 
-406 100 tiles/sets/grass 46 
-407 100 tiles/sets/grass 18 
-408 100 tiles/sets/grass 18 
-409 100 tiles/sets/grass 18 
-410 100 tiles/sets/grass 18 
-411 100 tiles/sets/grass 16 
-412 101 tiles/sets/grass 46 
-413 101 tiles/sets/grass 18 
-414 101 tiles/sets/grass 18 
-415 101 tiles/sets/grass 18 
-416 101 tiles/sets/grass 18 
-417 101 tiles/sets/grass 16 
-418 102 tiles/sets/grass 46 
-419 102 tiles/sets/grass 18 
-420 102 tiles/sets/grass 18 
-421 102 tiles/sets/grass 18 
-422 102 tiles/sets/grass 18 
-423 102 tiles/sets/grass 18 
-424 102 tiles/sets/grass 16 
-425 103 tiles/sets/grass 46 
-426 103 tiles/sets/grass 18 
-427 103 tiles/sets/grass 18 
-428 103 tiles/sets/grass 18 
-429 103 tiles/sets/grass 18 
-430 103 tiles/sets/grass 16 
-431 104 tiles/sets/grass 46 
-432 104 tiles/sets/grass 18 
-433 104 tiles/sets/grass 18 
-434 104 tiles/sets/grass 18 
-435 104 tiles/sets/grass 18 
-436 104 tiles/sets/grass 18 
-437 104 tiles/sets/grass 16 
-438 105 tiles/sets/grass 46 
-439 105 tiles/sets/grass 18 
-440 105 tiles/sets/grass 18 
-441 105 tiles/sets/grass 18 
-442 105 tiles/sets/grass 18 
-443 105 tiles/sets/grass 16 
-444 106 tiles/sets/grass 46 
-445 106 tiles/sets/grass 18 
-446 106 tiles/sets/grass 18 
-447 106 tiles/sets/grass 18 
-448 106 tiles/sets/grass 18 
-449 106 tiles/sets/grass 16 
-450 107 tiles/sets/grass 46 
-451 107 tiles/sets/grass 18 
-452 107 tiles/sets/grass 18 
-453 107 tiles/sets/grass 18 
-454 107 tiles/sets/grass 18 
-455 107 tiles/sets/grass 16 
-456 108 tiles/sets/grass 46 
-457 108 tiles/sets/grass 18 
-458 108 tiles/sets/grass 18 
-459 108 tiles/sets/grass 18 
-460 108 tiles/sets/grass 18 
-461 108 tiles/sets/grass 16 
-462 109 tiles/sets/grass 46 
-463 109 tiles/sets/grass 18 
-464 109 tiles/sets/grass 18 
-465 109 tiles/sets/grass 18 
-466 109 tiles/sets/grass 18 
-467 109 tiles/sets/grass 18 
-468 109 tiles/sets/grass 16 
-469 110 tiles/sets/grass 46 
-470 110 tiles/sets/grass 18 
-471 110 tiles/sets/grass 18 
-472 110 tiles/sets/grass 18 
-473 110 tiles/sets/grass 18 
-474 110 tiles/sets/grass 16 
-475 111 tiles/sets/grass 46 
-476 111 tiles/sets/grass 18 
-477 111 tiles/sets/grass 18 
-478 111 tiles/sets/grass 18 
-479 111 tiles/sets/grass 18 
-480 111 tiles/sets/grass 16 
-481 112 tiles/sets/grass 46 
-482 112 tiles/sets/grass 18 
-483 112 tiles/sets/grass 18 
-484 112 tiles/sets/grass 18 
-485 112 tiles/sets/grass 18 
-486 112 tiles/sets/grass 18 
-487 112 tiles/sets/grass 16 
-488 113 tiles/sets/grass 46 
-489 113 tiles/sets/grass 18 
-490 113 tiles/sets/grass 18 
-491 113 tiles/sets/grass 18 
-492 113 tiles/sets/grass 18 
-493 113 tiles/sets/grass 16 
-494 114 tiles/sets/grass 46 
-495 114 tiles/sets/grass 18 
-496 114 tiles/sets/grass 18 
-497 114 tiles/sets/grass 18 
-498 114 tiles/sets/grass 18 
-499 114 tiles/sets/grass 18 
-500 114 tiles/sets/grass 16 
-501 115 tiles/sets/grass 46 
-502 115 tiles/sets/grass 18 
-503 115 tiles/sets/grass 18 
-504 115 tiles/sets/grass 18 
-505 115 tiles/sets/grass 18 
-506 115 tiles/sets/grass 16 
-507 116 tiles/sets/grass 46 
-508 116 tiles/sets/grass 18 
-509 116 tiles/sets/grass 18 
-510 116 tiles/sets/grass 18 
-511 116 tiles/sets/grass 18 
-512 116 tiles/sets/grass 16 
-513 117 tiles/sets/grass 46 
-514 117 tiles/sets/grass 18 
-515 117 tiles/sets/grass 18 
-516 117 tiles/sets/grass 18 
-517 117 tiles/sets/grass 18 
-518 117 tiles/sets/grass 16 
-519 118 tiles/sets/grass 46 
-520 118 tiles/sets/grass 18 
-521 118 tiles/sets/grass 18 
-522 118 tiles/sets/grass 18 
-523 118 tiles/sets/grass 18 
-524 118 tiles/sets/grass 16 
-525 119 tiles/sets/grass 46 
-526 119 tiles/sets/grass 18 
-527 119 tiles/sets/grass 18 
-528 119 tiles/sets/grass 18 
-529 119 tiles/sets/grass 18 
-530 119 tiles/sets/grass 18 
-531 119 tiles/sets/grass 16 
-532 120 tiles/sets/grass 46 
-533 120 tiles/sets/grass 18 
-534 120 tiles/sets/grass 18 
-535 120 tiles/sets/grass 18 
-536 120 tiles/sets/grass 18 
-537 120 tiles/sets/grass 16 
-538 121 tiles/sets/grass 46 
-539 121 tiles/sets/grass 18 
-540 121 tiles/sets/grass 18 
-541 121 tiles/sets/grass 18 
-542 121 tiles/sets/grass 18 
-543 121 tiles/sets/grass 16 
-544 122 tiles/sets/grass 46 
-545 122 tiles/sets/grass 18 
-546 122 tiles/sets/grass 18 
-547 122 tiles/sets/grass 18 
-548 122 tiles/sets/grass 18 
-549 122 tiles/sets/grass 18 
-550 122 tiles/sets/grass 16 
-551 123 tiles/sets/grass 46 
-552 123 tiles/sets/grass 18 
-553 123 tiles/sets/grass 18 
-554 123 tiles/sets/grass 18 
-555 123 tiles/sets/grass 18 
-556 123 tiles/sets/grass 16 
-557 124 tiles/sets/grass 46 
-558 124 tiles/sets/grass 18 
-559 124 tiles/sets/grass 18 
-560 124 tiles/sets/grass 18 
-561 124 tiles/sets/grass 18 
-562 124 tiles/sets/grass 18 
-563 124 tiles/sets/grass 16 
-564 125 tiles/sets/grass 46 
-565 125 tiles/sets/grass 18 
-566 125 tiles/sets/grass 18 
-567 125 tiles/sets/grass 18 
-568 125 tiles/sets/grass 18 
-569 125 tiles/sets/grass 16 
-570 126 tiles/sets/grass 46 
-571 126 tiles/sets/grass 18 
-572 126 tiles/sets/grass 18 
-573 126 tiles/sets/grass 18 
-574 126 tiles/sets/grass 18 
-575 126 tiles/sets/grass 16 
-576 127 tiles/sets/grass 46 
-577 127 tiles/sets/grass 18 
-578 127 tiles/sets/grass 18 
-579 127 tiles/sets/grass 18 
-580 127 tiles/sets/grass 18 
-581 127 tiles/sets/grass 16 
-582 128 tiles/sets/grass 46 
-583 128 tiles/sets/grass 18 
-584 128 tiles/sets/grass 18 
-585 128 tiles/sets/grass 18 
-586 128 tiles/sets/grass 18 
-587 128 tiles/sets/grass 16 
-588 129 tiles/sets/grass 46 
-589 129 tiles/sets/grass 18 
-590 129 tiles/sets/grass 18 
-591 129 tiles/sets/grass 18 
-592 129 tiles/sets/grass 18 
-593 129 tiles/sets/grass 18 
-594 129 tiles/sets/grass 16 
-595 130 tiles/sets/grass 46 
-596 130 tiles/sets/grass 18 
-597 130 tiles/sets/grass 18 
-598 130 tiles/sets/grass 18 
-599 130 tiles/sets/grass 18 
-600 130 tiles/sets/grass 16 
-601 131 tiles/sets/grass 46 
-602 131 tiles/sets/grass 18 
-603 131 tiles/sets/grass 18 
-604 131 tiles/sets/grass 18 
-605 131 tiles/sets/grass 18 
-606 131 tiles/sets/grass 16 
-607 132 tiles/sets/grass 46 
-608 132 tiles/sets/grass 18 
-609 132 tiles/sets/grass 18 
-610 132 tiles/sets/grass 18 
-611 132 tiles/sets/grass 18 
-612 132 tiles/sets/grass 18 
-613 132 tiles/sets/grass 16 
-614 133 tiles/sets/grass 46 
-615 133 tiles/sets/grass 18 
-616 133 tiles/sets/grass 18 
-617 133 tiles/sets/grass 18 
-618 133 tiles/sets/grass 18 
-619 133 tiles/sets/grass 16 
-620 134 tiles/sets/grass 46 
-621 134 tiles/sets/grass 18 
-622 134 tiles/sets/grass 18 
-623 134 tiles/sets/grass 18 
-624 134 tiles/sets/grass 18 
-625 134 tiles/sets/grass 18 
-626 134 tiles/sets/grass 16 
-627 135 tiles/sets/grass 46 
-628 135 tiles/sets/grass 18 
-629 135 tiles/sets/grass 18 
-630 135 tiles/sets/grass 18 
-631 135 tiles/sets/grass 18 
-632 135 tiles/sets/grass 16 
-633 136 tiles/sets/grass 46 
-634 136 tiles/sets/grass 18 
-635 136 tiles/sets/grass 18 
-636 136 tiles/sets/grass 18 
-637 136 tiles/sets/grass 18 
-638 136 tiles/sets/grass 16 
-639 137 tiles/sets/grass 46 
-640 137 tiles/sets/grass 18 
-641 137 tiles/sets/grass 18 
-642 137 tiles/sets/grass 18 
-643 137 tiles/sets/grass 18 
-644 137 tiles/sets/grass 16 
-645 138 tiles/sets/grass 46 
-646 138 tiles/sets/grass 18 
-647 138 tiles/sets/grass 18 
-648 138 tiles/sets/grass 18 
-649 138 tiles/sets/grass 18 
-650 138 tiles/sets/grass 16 
-651 139 tiles/sets/grass 46 
-652 139 tiles/sets/grass 18 
-653 139 tiles/sets/grass 18 
-654 139 tiles/sets/grass 18 
-655 139 tiles/sets/grass 18 
-656 139 tiles/sets/grass 18 
-657 139 tiles/sets/grass 16 
-658 140 tiles/sets/grass 46 
-659 140 tiles/sets/grass 18 
-660 140 tiles/sets/grass 18 
-661 140 tiles/sets/grass 18 
-662 140 tiles/sets/grass 18 
-663 140 tiles/sets/grass 16 
-664 141 tiles/sets/grass 46 
-665 141 tiles/sets/grass 18 
-666 141 tiles/sets/grass 18 
-667 141 tiles/sets/grass 18 
-668 141 tiles/sets/grass 18 
-669 141 tiles/sets/grass 16 
-670 142 tiles/sets/grass 46 
-671 142 tiles/sets/grass 18 
-672 142 tiles/sets/grass 18 
-673 142 tiles/sets/grass 18 
-674 142 tiles/sets/grass 18 
-675 142 tiles/sets/grass 18 
-676 142 tiles/sets/grass 16 
-677 143 tiles/sets/grass 46 
-678 143 tiles/sets/grass 18 
-679 143 tiles/sets/grass 18 
-680 143 tiles/sets/grass 18 
-681 143 tiles/sets/grass 18 
-682 143 tiles/sets/grass 16 
-683 144 tiles/sets/grass 46 
-684 144 tiles/sets/grass 18 
-685 144 tiles/sets/grass 18 
-686 144 tiles/sets/grass 18 
-687 144 tiles/sets/grass 18 
-688 144 tiles/sets/grass 18 
-689 144 tiles/sets/grass 16 
-690 145 tiles/sets/grass 46 
-691 145 tiles/sets/grass 18 
-692 145 tiles/sets/grass 18 
-693 145 tiles/sets/grass 18 
-694 145 tiles/sets/grass 18 
-695 145 tiles/sets/grass 16 
-696 146 tiles/sets/grass 46 
-697 146 tiles/sets/grass 18 
-698 146 tiles/sets/grass 18 
-699 146 tiles/sets/grass 18 
-700 146 tiles/sets/grass 18 
-701 146 tiles/sets/grass 16 
-702 147 tiles/sets/grass 0 
-404 102 tiles/sets/grass 0 
+3 14 tiles/sets/grass 41 
+0 11 tiles/sets/grass 46 
+8 3 tiles/sets/grass 47 
+8 1 tiles/sets/grass 46 
+9 1 tiles/sets/grass 44 
+9 2 tiles/sets/grass 3 
+3 15 tiles/sets/grass 26 
+2 15 tiles/sets/grass 2 
+2 14 tiles/sets/grass 56 
+1 14 tiles/sets/grass 14 
+1 13 tiles/sets/grass 3 
+1 12 tiles/sets/grass 11 
+1 11 tiles/sets/grass 37 
+1 8 tiles/sets/grass 4 
+1 7 tiles/sets/grass 4 
+1 6 tiles/sets/grass 47 
+2 6 tiles/sets/grass 49 
+3 5 tiles/sets/grass 47 
+4 5 tiles/sets/grass 49 
+6 4 tiles/sets/grass 47 
+9 3 tiles/sets/grass 22 
+10 3 tiles/sets/grass 49 
+5 14 tiles/sets/grass 4 
+1 10 tiles/sets/grass 4 
+1 9 tiles/sets/grass 4 
+2 7 tiles/sets/grass 5 
+3 6 tiles/sets/grass 36 
+4 6 tiles/sets/grass 5 
+5 5 tiles/sets/grass 49 
+7 4 tiles/sets/grass 49 
+2 8 tiles/sets/grass 6 
+3 7 tiles/sets/grass 5 
+5 6 tiles/sets/grass 5 
+6 5 tiles/sets/grass 36 
+7 5 tiles/sets/grass 5 
+8 4 tiles/sets/grass 36 
+9 4 tiles/sets/grass 5 
+11 3 tiles/sets/grass 49 
+6 6 tiles/sets/grass 5 
+10 4 tiles/sets/grass 5 
+8 7 tiles/sets/grass 5 
+10 6 tiles/sets/grass 5 
+11 5 tiles/sets/grass 5 
+4 8 tiles/sets/grass 51 
+5 8 tiles/sets/grass 5 
+7 6 tiles/sets/grass 5 
+8 5 tiles/sets/grass 5 
+9 5 tiles/sets/grass 5 
+10 5 tiles/sets/grass 5 
+11 4 tiles/sets/grass 5 
+9 11 tiles/sets/grass 5 
+8 11 tiles/sets/grass 5 
+7 11 tiles/sets/grass 5 
+6 11 tiles/sets/grass 5 
+5 11 tiles/sets/grass 5 
+4 11 tiles/sets/grass 5 
+2 10 tiles/sets/grass 21 
+2 9 tiles/sets/grass 34 
+3 8 tiles/sets/grass 19 
+4 7 tiles/sets/grass 5 
+5 7 tiles/sets/grass 5 
+6 7 tiles/sets/grass 5 
+7 7 tiles/sets/grass 5 
+8 6 tiles/sets/grass 5 
+9 6 tiles/sets/grass 5 
+7 13 tiles/sets/grass 5 
+6 13 tiles/sets/grass 5 
+5 13 tiles/sets/grass 51 
+4 13 tiles/sets/grass 19 
+3 13 tiles/sets/grass 11 
+2 12 tiles/sets/grass 19 
+2 11 tiles/sets/grass 5 
+4 9 tiles/sets/grass 4 
+6 8 tiles/sets/grass 5 
+8 12 tiles/sets/grass 5 
+7 12 tiles/sets/grass 5 
+6 12 tiles/sets/grass 5 
+5 12 tiles/sets/grass 5 
+4 12 tiles/sets/grass 5 
+3 12 tiles/sets/grass 51 
+3 11 tiles/sets/grass 5 
+3 10 tiles/sets/grass 49 
+4 10 tiles/sets/grass 36 
+9 7 tiles/sets/grass 5 
+10 7 tiles/sets/grass 5 
+7 8 tiles/sets/grass 5 
+8 8 tiles/sets/grass 5 
+9 8 tiles/sets/grass 5 
+9 10 tiles/sets/grass 5 
+8 10 tiles/sets/grass 5 
+7 10 tiles/sets/grass 5 
+6 10 tiles/sets/grass 5 
+5 10 tiles/sets/grass 5 
+5 9 tiles/sets/grass 5 
+6 9 tiles/sets/grass 5 
+7 9 tiles/sets/grass 5 
+8 9 tiles/sets/grass 5 
+9 9 tiles/sets/grass 5 
+10 9 tiles/sets/grass 5 
+10 8 tiles/sets/grass 5 
+4 15 tiles/sets/grass 18 
+5 15 tiles/sets/grass 27 
+6 14 tiles/sets/grass 6 
+6 15 tiles/sets/grass 17 
+7 14 tiles/sets/grass 19 
+8 13 tiles/sets/grass 5 
+8 14 tiles/sets/grass 19 
+9 12 tiles/sets/grass 6 
+9 13 tiles/sets/grass 34 
+9 14 tiles/sets/grass 26 
+10 10 tiles/sets/grass 5 
+10 11 tiles/sets/grass 5 
+10 12 tiles/sets/grass 19 
+10 14 tiles/sets/grass 18 
+11 6 tiles/sets/grass 5 
+11 7 tiles/sets/grass 5 
+11 8 tiles/sets/grass 5 
+11 9 tiles/sets/grass 5 
+11 10 tiles/sets/grass 5 
+11 11 tiles/sets/grass 6 
+11 12 tiles/sets/grass 42 
+11 13 tiles/sets/grass 13 
+11 14 tiles/sets/grass 29 
+12 1 tiles/sets/grass 0 
+12 3 tiles/sets/grass 49 
+12 4 tiles/sets/grass 5 
+12 5 tiles/sets/grass 5 
+12 6 tiles/sets/grass 5 
+12 7 tiles/sets/grass 5 
+12 8 tiles/sets/grass 5 
+12 9 tiles/sets/grass 5 
+12 10 tiles/sets/grass 5 
+12 11 tiles/sets/grass 19 
+12 13 tiles/sets/grass 18 
+13 2 tiles/sets/grass 31 
+13 3 tiles/sets/grass 22 
+13 4 tiles/sets/grass 5 
+13 5 tiles/sets/grass 5 
+13 6 tiles/sets/grass 5 
+13 7 tiles/sets/grass 5 
+13 8 tiles/sets/grass 5 
+13 9 tiles/sets/grass 5 
+13 10 tiles/sets/grass 6 
+13 11 tiles/sets/grass 17 
+13 13 tiles/sets/grass 16 
+14 0 tiles/sets/grass 46 
+14 3 tiles/sets/grass 49 
+14 4 tiles/sets/grass 5 
+14 5 tiles/sets/grass 5 
+14 6 tiles/sets/grass 5 
+14 7 tiles/sets/grass 5 
+14 8 tiles/sets/grass 5 
+14 9 tiles/sets/grass 5 
+14 10 tiles/sets/grass 19 
+14 12 tiles/sets/grass 0 
+15 0 tiles/sets/grass 44 
+15 1 tiles/sets/grass 14 
+15 3 tiles/sets/grass 32 
+15 4 tiles/sets/grass 21 
+15 5 tiles/sets/grass 5 
+15 6 tiles/sets/grass 5 
+15 7 tiles/sets/grass 5 
+15 8 tiles/sets/grass 5 
+15 9 tiles/sets/grass 5 
+15 10 tiles/sets/grass 52 
+15 11 tiles/sets/grass 1 
+16 1 tiles/sets/grass 44 
+16 2 tiles/sets/grass 1 
+16 4 tiles/sets/grass 49 
+16 5 tiles/sets/grass 5 
+16 6 tiles/sets/grass 5 
+16 7 tiles/sets/grass 5 
+16 8 tiles/sets/grass 5 
+16 9 tiles/sets/grass 6 
+16 10 tiles/sets/grass 17 
+17 3 tiles/sets/grass 31 
+17 4 tiles/sets/grass 22 
+17 5 tiles/sets/grass 5 
+17 6 tiles/sets/grass 5 
+17 7 tiles/sets/grass 5 
+17 8 tiles/sets/grass 6 
+17 9 tiles/sets/grass 17 
+18 4 tiles/sets/grass 49 
+18 5 tiles/sets/grass 5 
+18 6 tiles/sets/grass 5 
+18 7 tiles/sets/grass 6 
+18 8 tiles/sets/grass 17 
+19 3 tiles/sets/grass 31 
+19 4 tiles/sets/grass 41 
+19 5 tiles/sets/grass 21 
+19 6 tiles/sets/grass 5 
+19 7 tiles/sets/grass 19 
+20 5 tiles/sets/grass 57 
+20 6 tiles/sets/grass 34 
+20 7 tiles/sets/grass 17 
+21 5 tiles/sets/grass 16 
+4 20 tiles/sets/grass 0 
 @background_tiles
+11 20 tiles/sets/stone 19 
+10 20 tiles/sets/stone 2 
+8 18 tiles/sets/stone 51 
+12 20 tiles/sets/stone 19 
+10 19 tiles/sets/stone 51 
+9 19 tiles/sets/stone 19 
+8 19 tiles/sets/stone 2 
+7 18 tiles/sets/stone 2 
+5 17 tiles/sets/stone 46 
+6 17 tiles/sets/stone 27 
+7 17 tiles/sets/stone 51 
+13 20 tiles/sets/stone 17 
+12 19 tiles/sets/stone 5 
+11 19 tiles/sets/stone 5 
+10 18 tiles/sets/stone 5 
+9 18 tiles/sets/stone 5 
+8 17 tiles/sets/stone 5 
+6 15 tiles/sets/stone 4 
+11 18 tiles/sets/stone 5 
+6 16 tiles/sets/stone 4 
+7 16 tiles/sets/stone 5 
+8 16 tiles/sets/stone 5 
+9 17 tiles/sets/stone 5 
+7 15 tiles/sets/stone 5 
+9 16 tiles/sets/stone 5 
+8 15 tiles/sets/stone 5 
+6 14 tiles/sets/stone 47 
+7 14 tiles/sets/stone 49 
+23 18 tiles/sets/stone 19 
+16 17 tiles/sets/stone 5 
+18 16 tiles/sets/stone 5 
+17 17 tiles/sets/stone 5 
+20 18 tiles/sets/stone 19 
+22 18 tiles/sets/stone 19 
+21 18 tiles/sets/stone 19 
+20 17 tiles/sets/stone 5 
+19 17 tiles/sets/stone 5 
+18 17 tiles/sets/stone 5 
+16 15 tiles/sets/stone 5 
+19 16 tiles/sets/stone 5 
+21 17 tiles/sets/stone 5 
+22 17 tiles/sets/stone 5 
+20 16 tiles/sets/stone 5 
+15 14 tiles/sets/stone 5 
+18 15 tiles/sets/stone 5 
+16 14 tiles/sets/stone 5 
+14 13 tiles/sets/stone 5 
+25 17 tiles/sets/stone 32 
+24 18 tiles/sets/stone 19 
+27 18 tiles/sets/stone 16 
+26 18 tiles/sets/stone 18 
+25 18 tiles/sets/stone 26 
+15 13 tiles/sets/stone 5 
+14 12 tiles/sets/stone 21 
+19 15 tiles/sets/stone 5 
+21 16 tiles/sets/stone 5 
+20 15 tiles/sets/stone 5 
+18 14 tiles/sets/stone 5 
+17 12 tiles/sets/stone 32 
+23 15 tiles/sets/stone 32 
+16 12 tiles/sets/stone 49 
+17 13 tiles/sets/stone 21 
+19 14 tiles/sets/stone 5 
+20 14 tiles/sets/stone 21 
+21 15 tiles/sets/stone 21 
+22 16 tiles/sets/stone 5 
+23 17 tiles/sets/stone 5 
+24 17 tiles/sets/stone 21 
+24 16 tiles/sets/stone 32 
+23 16 tiles/sets/stone 21 
+22 15 tiles/sets/stone 49 
+21 14 tiles/sets/stone 32 
+18 13 tiles/sets/stone 49 
+19 13 tiles/sets/stone 49 
+20 13 tiles/sets/stone 32 
+14 11 tiles/sets/stone 32 
+15 12 tiles/sets/stone 49 
+16 13 tiles/sets/stone 5 
+17 14 tiles/sets/stone 5 
+17 15 tiles/sets/stone 5 
+17 16 tiles/sets/stone 5 
+16 16 tiles/sets/stone 5 
+14 14 tiles/sets/stone 5 
+15 15 tiles/sets/stone 5 
+9 14 tiles/sets/stone 5 
+9 13 tiles/sets/stone 5 
+15 16 tiles/sets/stone 5 
+15 17 tiles/sets/stone 5 
+12 18 tiles/sets/stone 5 
+11 16 tiles/sets/stone 5 
+10 15 tiles/sets/stone 5 
+12 17 tiles/sets/stone 5 
+11 17 tiles/sets/stone 5 
+10 17 tiles/sets/stone 5 
+10 16 tiles/sets/stone 5 
+9 15 tiles/sets/stone 5 
+8 14 tiles/sets/stone 36 
+8 13 tiles/sets/stone 4 
+8 12 tiles/sets/stone 4 
+8 11 tiles/sets/stone 47 
+13 13 tiles/sets/stone 5 
+11 15 tiles/sets/stone 5 
+10 14 tiles/sets/stone 5 
+12 11 tiles/sets/stone 49 
+13 11 tiles/sets/stone 49 
+13 12 tiles/sets/stone 5 
+12 12 tiles/sets/stone 5 
+13 19 tiles/sets/grass 6 
+12 16 tiles/sets/grass 5 
+13 16 tiles/sets/grass 5 
+13 17 tiles/sets/grass 5 
+13 18 tiles/sets/grass 5 
+14 19 tiles/sets/grass 19 
+14 18 tiles/sets/grass 5 
+14 17 tiles/sets/grass 5 
+14 16 tiles/sets/grass 5 
+14 15 tiles/sets/grass 5 
+13 15 tiles/sets/grass 5 
+12 15 tiles/sets/grass 5 
+11 14 tiles/sets/grass 5 
+12 13 tiles/sets/grass 5 
+13 14 tiles/sets/grass 5 
+12 14 tiles/sets/grass 5 
+11 13 tiles/sets/grass 5 
+10 13 tiles/sets/grass 5 
+9 12 tiles/sets/grass 5 
+9 11 tiles/sets/grass 49 
+10 12 tiles/sets/grass 5 
+10 10 tiles/sets/grass 31 
+10 11 tiles/sets/grass 22 
+11 11 tiles/sets/grass 49 
+11 12 tiles/sets/grass 5 
+15 19 tiles/sets/grass 19 
+16 19 tiles/sets/grass 19 
+17 19 tiles/sets/grass 19 
+18 19 tiles/sets/grass 19 
+19 19 tiles/sets/grass 17 
+19 18 tiles/sets/grass 6 
+18 18 tiles/sets/grass 5 
+17 18 tiles/sets/grass 5 
+16 18 tiles/sets/grass 5 
+15 18 tiles/sets/grass 5 
+@wiring_tiles
+4 20 tiles/wiring/wires/actuator 0 
Index: resources/controls.sab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@eraser [9, 52]\r\n@select [66]\r\n@cut [52]\r\n@line [12, 40]\r\n@shift [59]\r\n@save [47]\r\n@drag_selection [129]\r\n@move_selection [57]\r\n@paste [50]\r\n@redo [53]\r\n@eyedropper [12, 31]\r\n@playtest [66]\r\n@down [20, 47]\r\n@undo [54]\r\n@pen [10, 35]\r\n@up [19, 51]\r\n@prev_selection [45]\r\n@copy [31]\r\n@next_selection [33]\r\n@jump [62]\r\n@suicide [39]\r\n@toggle_layer [61]\r\n@right [22, 32]\r\n@drag_camera [59]\r\n@pencil [8, 46]\r\n@fill [11, 34]\r\n@quick_restart [46]\r\n@selection [13, 50]\r\n@left [21, 29]\r\n@quick_test [14, 48]\r\n@delete_selection [67]\r\n@end_selection [32]\r\n@return [111]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/controls.sab b/resources/controls.sab
--- a/resources/controls.sab	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/resources/controls.sab	(date 1708573791938)
@@ -18,6 +18,7 @@
 @copy [31]
 @next_selection [33]
 @jump [62]
+@toggle_wiring [61]
 @suicide [39]
 @toggle_layer [61]
 @right [22, 32]
Index: core/src/com/sab/littleh/controls/Controls.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.controls;\r\n\r\nimport static com.badlogic.gdx.Input.Keys.*;\r\nimport com.badlogic.gdx.Input;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.util.Images;\r\nimport com.sab.littleh.util.sab_format.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\npublic class Controls {\r\n    public static List<String> controlList = new ArrayList<>();\r\n    public static final Map<String, Control> controlMap = new LinkedHashMap<>();\r\n    public static final Control UP = new Control(\"Up\", false, Input.Keys.UP, Input.Keys.W);\r\n    public static final Control DOWN = new Control(\"Down\", false, Input.Keys.DOWN, Input.Keys.S);\r\n    public static final Control LEFT = new Control(\"Left\", false ,Input.Keys.LEFT, Input.Keys.A);\r\n    public static final Control RIGHT = new Control(\"Right\", false, Input.Keys.RIGHT, Input.Keys.D);\r\n    public static final Control JUMP = new Control(\"Jump\", false, Input.Keys.SPACE);\r\n\r\n    public static void load() {\r\n        // Set defaults\r\n        resetControls();\r\n\r\n        File settingsFile = LittleH.getFileResource(\"controls.sab\");\r\n        if (!settingsFile.exists()) {\r\n            try {\r\n                settingsFile.createNewFile();\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(\"Program does not have sufficient permissions to create settings file.\");\r\n            }\r\n        }\r\n        try {\r\n            SabData data = SabReader.read(settingsFile);\r\n            setFrom(data);\r\n        } catch (SabParsingException e) {\r\n            e.printStackTrace();\r\n        }\r\n        save();\r\n    }\r\n\r\n    private static void setFrom(SabData data) {\r\n        for (String key : data.getValues().keySet()) {\r\n            SabValue[] values = data.getValue(key).asArray();\r\n            int[] keys = new int[values.length];\r\n            for (int i = 0; i < values.length; i++) keys[i] = values[i].asInt();\r\n            if (controlMap.containsKey(key)) {\r\n                controlMap.get(key).replaceKeys(keys);\r\n            }\r\n        }\r\n        controlList = new ArrayList<>();\r\n        controlList.addAll(controlMap.keySet());\r\n    }\r\n\r\n    public static void save() {\r\n        try {\r\n            SabWriter.write(LittleH.getFileResource(\"controls.sab\"), toSabData());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static SabData toSabData() {\r\n        SabData data = new SabData();\r\n        for (String key : controlMap.keySet()) {\r\n            data.insertValue(key, controlMap.get(key).valueArray());\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static Collection<Control> getControls() {\r\n        return controlMap.values();\r\n    }\r\n\r\n    public static void resetControls() {\r\n        controlMap.clear();\r\n        UP.replaceKeys(Input.Keys.UP, W);\r\n        DOWN.replaceKeys(Input.Keys.DOWN, S);\r\n        LEFT.replaceKeys(Input.Keys.LEFT, A);\r\n        RIGHT.replaceKeys(Input.Keys.RIGHT, D);\r\n        JUMP.replaceKeys(SPACE);\r\n        controlMap.put(\"up\", UP);\r\n        controlMap.put(\"down\", DOWN);\r\n        controlMap.put(\"left\", LEFT);\r\n        controlMap.put(\"right\", RIGHT);\r\n        controlMap.put(\"jump\", JUMP);\r\n        controlMap.put(\"shift\", new Control(\"Playtest w/o dialogue\", false, SHIFT_LEFT));\r\n        controlMap.put(\"suicide\", new Control(\"To Checkpoint\", false, K));\r\n        controlMap.put(\"quick_restart\", new Control(\"Quick Reset\", false, R));\r\n        controlMap.put(\"return\", new Control(\"Return/Back\", false, ESCAPE));\r\n        controlMap.put(\"select\", new Control(\"Select/Accept\", false, ENTER));\r\n        controlMap.put(\"pencil\", new Control(\"Pencil\", false, NUM_1, R));\r\n        controlMap.put(\"eraser\", new Control(\"Eraser\", false, NUM_2, X));\r\n        controlMap.put(\"pen\", new Control(\"Pen\", false, NUM_3, G));\r\n        controlMap.put(\"fill\", new Control(\"Fill Tool\", false, NUM_4, F));\r\n        controlMap.put(\"line\", new Control(\"Line Tool\", false, NUM_5, L));\r\n        controlMap.put(\"eyedropper\", new Control(\"Tile Picker\", false, NUM_6, C));\r\n        controlMap.put(\"selection\", new Control(\"Selection\", false, NUM_7, V));\r\n        controlMap.put(\"quick_test\", new Control(\"Quick Test\", false, NUM_8, T));\r\n        controlMap.put(\"playtest\", new Control(\"Quick Test\", false, ENTER));\r\n        controlMap.put(\"toggle_layer\", new Control(\"Toggle Edit Background\", false, TAB));\r\n        controlMap.put(\"prev_selection\", new Control(\"Previous Tile Menu\", false, Q));\r\n        controlMap.put(\"next_selection\", new Control(\"Next Tile Menu\", false, E));\r\n        controlMap.put(\"drag_camera\", new Control(\"Drag Camera\", false, SHIFT_LEFT));\r\n        controlMap.put(\"move_selection\", new Control(\"Move Selection\", false, ALT_LEFT));\r\n        controlMap.put(\"drag_selection\", new Control(\"Drag Selection\", false, CONTROL_LEFT));\r\n        controlMap.put(\"end_selection\", new Control(\"End Selection\", true, D));\r\n        controlMap.put(\"delete_selection\", new Control(\"Delete Selection\", false, BACKSPACE));\r\n        controlMap.put(\"copy\", new Control(\"Copy\", true, C));\r\n        controlMap.put(\"cut\", new Control(\"Cut\", true, X));\r\n        controlMap.put(\"paste\", new Control(\"Paste\", true, V));\r\n        controlMap.put(\"save\", new Control(\"Save Level\", true, S));\r\n        controlMap.put(\"undo\", new Control(\"Undo\", true, Z));\r\n        controlMap.put(\"redo\", new Control(\"Redo\", true, Y));\r\n    }\r\n\r\n    public static Control get(String key) {\r\n        return controlMap.get(key);\r\n    }\r\n\r\n    public static Control get(int index) {\r\n        return controlMap.get(controlList.get(index));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/controls/Controls.java b/core/src/com/sab/littleh/controls/Controls.java
--- a/core/src/com/sab/littleh/controls/Controls.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/controls/Controls.java	(date 1708571415480)
@@ -99,7 +99,8 @@
         controlMap.put("selection", new Control("Selection", false, NUM_7, V));
         controlMap.put("quick_test", new Control("Quick Test", false, NUM_8, T));
         controlMap.put("playtest", new Control("Quick Test", false, ENTER));
-        controlMap.put("toggle_layer", new Control("Toggle Edit Background", false, TAB));
+        controlMap.put("toggle_layer", new Control("Toggle Background Editor", false, TAB));
+        controlMap.put("toggle_wiring", new Control("Toggle Wiring Mode", true, TAB));
         controlMap.put("prev_selection", new Control("Previous Tile Menu", false, Q));
         controlMap.put("next_selection", new Control("Next Tile Menu", false, E));
         controlMap.put("drag_camera", new Control("Drag Camera", false, SHIFT_LEFT));
Index: assets/scripts/level_editor/special.sab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@0 tiles/sets/bounce\r\n@1 tiles/sets/water\r\n@2 tiles/invisiblock\r\n@3 tiles/invisible_death\r\n@4 tiles/one_way\r\n@5 tiles/mud\r\n@6 tiles/gravity_swapper\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/scripts/level_editor/special.sab b/assets/scripts/level_editor/special.sab
--- a/assets/scripts/level_editor/special.sab	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/assets/scripts/level_editor/special.sab	(date 1708571415484)
@@ -5,3 +5,4 @@
 @4 tiles/one_way
 @5 tiles/mud
 @6 tiles/gravity_swapper
+@7 tiles/wiring/button
Index: assets/scripts/level_editor/wiring.sab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/scripts/level_editor/wiring.sab b/assets/scripts/level_editor/wiring.sab
new file mode 100644
--- /dev/null	(date 1708571415494)
+++ b/assets/scripts/level_editor/wiring.sab	(date 1708571415494)
@@ -0,0 +1,5 @@
+@0 tiles/wiring/wires/red_wire
+@1 tiles/wiring/wires/yellow_wire
+@2 tiles/wiring/wires/green_wire
+@3 tiles/wiring/wires/blue_wire
+@4 tiles/wiring/actuator
\ No newline at end of file
Index: core/src/com/sab/littleh/game/entity/player/powerups/BallMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.entity.player.powerups;\r\n\r\nimport com.sab.littleh.game.entity.player.Player;\r\nimport com.sab.littleh.game.level.Level;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.util.Animation;\r\nimport com.sab.littleh.controls.Controls;\r\nimport com.sab.littleh.controls.ControlInput;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.SoundEngine;\r\n\r\n// BALLMODE\r\n// (BALLS!!!!!)\r\n\r\npublic class BallMode extends Powerup {\r\n\r\n   private static Animation rollAnimation = new Animation(1, 0);\r\n   private float rotationSpeed;\r\n   private float ballRotation;\r\n   private boolean superSlam;\r\n   private int bounceSoundCool;\r\n\r\n   public BallMode(Player player) {\r\n      super(player);\r\n   }\r\n\r\n   @Override\r\n   public void init(Player player) {\r\n      super.init(player);\r\n      superSlam = false;\r\n      player.image = \"player/ball_h\";\r\n      bounceSoundCool = 0;\r\n   }\r\n\r\n   @Override\r\n   public void jump(Level game) {\r\n      if (player.touchingWater) {\r\n         if (player.controller.isJustPressed(Controls.JUMP) || player.controller.isJustPressed(Controls.UP)) {\r\n            player.velocityY = -12;\r\n            SoundEngine.playSound(\"swim.ogg\");\r\n         }\r\n         return;\r\n      }\r\n      super.jump(game);\r\n   }\r\n\r\n   @Override\r\n   public void updateVelocity() {\r\n      // Ball floats\r\n      if (player.touchingWater) {\r\n         player.velocityX *= 0.98f;\r\n         player.velocityY *= 0.98f;\r\n         player.velocityY += 0.85f;\r\n         return;\r\n      }\r\n      if (!(player.slippery && player.crouched)) player.velocityX *= 0.975f;\r\n      else player.velocityX *= 0.985f;\r\n      player.velocityY *= 0.985f;\r\n      player.velocityY += 1f * player.getGravityMagnitude();\r\n   }\r\n   \r\n   @Override\r\n   public void update(Level game) {\r\n      if (bounceSoundCool > 0)\r\n         bounceSoundCool--;\r\n      if (player.win) {\r\n         if (player.currentAnimation.getFrame() > 19) {\r\n            ballRotation *= 0.5f;\r\n         } else {\r\n            ballRotation += rotationSpeed;\r\n            rotationSpeed = player.velocityX / 32f;\r\n         }\r\n      }\r\n      if (player.touchingGround) superSlam = false;\r\n      if (player.controller.isJustPressed(Controls.DOWN) && game.mapData.getValue(\"crouching\").asBool()) {\r\n         if (!player.touchingGround && !superSlam) {\r\n            superSlam = true;\r\n         }\r\n      }\r\n      // Makes the little H SLAM down with BIG BALL ENERGY\r\n      if (superSlam) {\r\n         player.velocityY += 2 * player.getGravityMagnitude();\r\n      }\r\n\r\n      super.update(game);\r\n\r\n      if (!player.dead && !player.win) player.currentAnimation = rollAnimation;\r\n      if (player.win || player.dead) return;\r\n      if (player.crouched) {\r\n         ballRotation = 0;\r\n         rotationSpeed = 0;\r\n      } else {\r\n         ballRotation += rotationSpeed;\r\n         rotationSpeed = player.velocityX / 32f;\r\n      }\r\n\r\n      if (player.fallingFasterThan(196f)) {\r\n         player.velocityY = 196f * player.getGravityMagnitude();\r\n      } else if (player.risingFasterThan(196f)) {\r\n         player.velocityY = 196f * -player.getGravityMagnitude();\r\n      }\r\n   }\r\n   \r\n   // Bounce like BALL in BALLMODE\r\n   @Override\r\n   public void onCollision(boolean horizontal, boolean vertical) {\r\n      if (horizontal) {\r\n         player.velocityX *= -1f;\r\n         if (bounceSoundCool <= 0) {\r\n            SoundEngine.playSound(\"ball_bounce.ogg\");\r\n            bounceSoundCool = 5;\r\n         }\r\n         // Minimum BOUNCING BALL SPEED\r\n         player.velocityX = Math.max(15, Math.abs(player.velocityX)) * Math.signum(player.velocityX);\r\n      }\r\n      if (vertical) {\r\n         player.velocityY *= -1f;\r\n         // Minimum BOUNCING BALL SPEED\r\n         player.velocityY = Math.max(15, Math.abs(player.velocityY)) * Math.signum(player.velocityY);\r\n         if (bounceSoundCool <= 0) {\r\n            SoundEngine.playSound(\"ball_bounce.ogg\");\r\n            bounceSoundCool = 5;\r\n         }\r\n      }\r\n   }\r\n   \r\n   @Override\r\n   public void touchingTile(Tile tile) {\r\n      super.touchingTile(tile);\r\n      // Makes bouncy tiles LAUNCH the BALL\r\n      if (tile.hasTag(\"bounce\")) {\r\n         player.velocityY += 2.5f * -player.getGravityMagnitude();\r\n      }\r\n      if (tile.hasTag(\"slope\") && tile.hasTag(\"normal_slope\") && !player.lastTouchedTiles.contains(tile)) {\r\n         float xSpeed = Math.abs(player.velocityX);\r\n         float ySpeed = Math.abs(player.velocityY);\r\n         float speedForBounce = 24;\r\n         if (tile.tileType == 0) {\r\n            if (xSpeed > ySpeed && xSpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               player.velocityX *= 0;\r\n               player.velocityY += xSpeed * 1.2f;\r\n            } else if (ySpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               player.velocityY *= 0;\r\n               player.velocityX -= ySpeed * 1.2f;\r\n            }\r\n         } else if (tile.tileType == 1) {\r\n            if (xSpeed > ySpeed && xSpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               player.velocityX *= 0;\r\n               player.velocityY += xSpeed * 1.2f;\r\n            } else if (ySpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               player.velocityY *= 0;\r\n               player.velocityX += ySpeed * 1.2f;\r\n            }\r\n         } else if (tile.tileType == 2) {\r\n            if (xSpeed > ySpeed && xSpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               System.out.println(player.velocityX + \", \" + xSpeed);\r\n               player.velocityX *= 0;\r\n               player.velocityY -= xSpeed * 1.2f;\r\n            } else if (ySpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               player.velocityY *= 0;\r\n               player.velocityX -= ySpeed * 1.2f;\r\n            }\r\n         } else if (tile.tileType == 3) {\r\n            if (xSpeed > ySpeed && xSpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               player.velocityX *= 0;\r\n               player.velocityY += xSpeed * 1.2f;\r\n            } else if (ySpeed > speedForBounce) {\r\n               SoundEngine.playSound(\"ball_bounce.ogg\");\r\n               player.velocityY *= 0;\r\n               player.velocityX -= ySpeed * 1.2f;\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   @Override\r\n   public void preDrawPlayer(Graphics g, Level game) {\r\n      player.rotation = ballRotation;\r\n   }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/entity/player/powerups/BallMode.java b/core/src/com/sab/littleh/game/entity/player/powerups/BallMode.java
--- a/core/src/com/sab/littleh/game/entity/player/powerups/BallMode.java	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/core/src/com/sab/littleh/game/entity/player/powerups/BallMode.java	(date 1708571415489)
@@ -158,7 +158,6 @@
          } else if (tile.tileType == 2) {
             if (xSpeed > ySpeed && xSpeed > speedForBounce) {
                SoundEngine.playSound("ball_bounce.ogg");
-               System.out.println(player.velocityX + ", " + xSpeed);
                player.velocityX *= 0;
                player.velocityY -= xSpeed * 1.2f;
             } else if (ySpeed > speedForBounce) {
Index: assets/maps/testing.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/maps/testing.map b/assets/maps/testing.map
new file mode 100644
--- /dev/null	(date 1708571415498)
+++ b/assets/maps/testing.map	(date 1708571415498)
@@ -0,0 +1,10 @@
+@crouching true
+@look_around true
+@is_deluxe true
+@time_limit -1
+@author AshQuimby
+@background mountains
+@name Testing
+@double_jumping true
+@wall_sliding true
+@version 0.1.5
Index: assets/resources/settings.sab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@author_name The Minuscule M Murderer\r\n@rainbow_title false\r\n@debug_mode false\r\n@grid_enabled true\r\n@h_color 0\r\n@master_volume 50\r\n@screen_shake true\r\n@use_shaders true\r\n@high_contrast_selection false\r\n@vibration true\r\n@auto_dialogue false\r\n@up_equals_jump true\r\n@divided_tile_selection false\r\n@background_visibility true\r\n@music_volume 100\r\n@fullscreen windowed_fullscreen\r\n@zoom_scalar 100\r\n@building_song menu/building_song.ogg\r\n@mute_game false\r\n@sfx_volume 100\r\n@retro_mode false\r\n@font minecraft\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/resources/settings.sab b/assets/resources/settings.sab
--- a/assets/resources/settings.sab	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/assets/resources/settings.sab	(date 1708571415504)
@@ -1,9 +1,9 @@
 @author_name The Minuscule M Murderer
 @rainbow_title false
 @debug_mode false
-@grid_enabled true
+@grid_enabled false
 @h_color 0
-@master_volume 50
+@master_volume 0
 @screen_shake true
 @use_shaders true
 @high_contrast_selection false
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"little_h:jar\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"965e289a-d713-4277-9876-48fb620d91fe\" name=\"Changes\" comment=\"Fixed water shader issues with corners\">\r\n      <change afterPath=\"$PROJECT_DIR$/assets/resources/controls.sab\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/assets/resources/settings.sab\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/assets/shaders/crt.fsh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/assets/shaders/crt.fsh\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/assets/shaders/crush.fsh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/assets/shaders/crush.fsh\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/assets/shaders/palette.fsh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/assets/shaders/palette.fsh\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/assets/shaders/vines.vsh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/assets/shaders/vines.vsh\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/src/com/sab/littleh/campaign/SaveFile.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/src/com/sab/littleh/campaign/SaveFile.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <task path=\"$PROJECT_DIR$/desktop\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"desktop\" type=\"2d1252cf:ModuleNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"desktop\" type=\"2d1252cf:ModuleNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"desktop\" type=\"2d1252cf:ModuleNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"other\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"GLSL Shader\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"1a0a8d7a-7c9b-4bce-8a8d-7f4f15a23c48\" />\r\n        <option name=\"url\" value=\"https://github.com/AshQuimby/Little-H-Deluxe.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MacroExpansionManager\">\r\n    <option name=\"directoryName\" value=\"gr0up0vx\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2SSJdCFaG7qveJnuslte7kF3uE1\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"com.sab.littleh.mainmenu\" />\r\n      <recent name=\"com.sab.littleh.game.level\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\maps\\summit\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\scripts\\campaign\\overworld\\levels\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\maps\\desert\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\local\\dialogues\\en\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\maps\\hyperspace\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\resources\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\shaders\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\images\\campaign\\visual_novel\\portraits\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\local\\texts\\en\" />\r\n    </key>\r\n    <key name=\"MoveInnerDialog.RECENTS_KEY\">\r\n      <recent name=\"com.sab.littleh.util.sab_format\" />\r\n      <recent name=\"com.sab.littleh.util\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"com.sab.littleh.campaign\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.sab.littleh.campaign.overworld\" />\r\n      <recent name=\"com.sab.littleh.net\" />\r\n      <recent name=\"com.sab.littleh.mainmenu\" />\r\n      <recent name=\"com.sab.littleh.game.entity.enemy\" />\r\n      <recent name=\"com.sab.littleh.game.entity.player.powerups\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Gradle.Little-H-Deluxe:desktop [run]\">\r\n    <configuration name=\"DesktopLauncher\" type=\"Application\" factoryName=\"Application\" singleton=\"false\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.sab.littleh.DesktopLauncher\" />\r\n      <module name=\"little_h.desktop.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.sab.littleh.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LittleHServer\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.sab.littleh.net.LittleHServer\" />\r\n      <module name=\"little_h.core.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.sab.littleh.net.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Little-H-Deluxe [run]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"run\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Little-H-Deluxe:desktop [run]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$/desktop\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"run\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.LittleHServer\" />\r\n      <item itemvalue=\"Application.DesktopLauncher\" />\r\n      <item itemvalue=\"Gradle.Little-H-Deluxe [run]\" />\r\n      <item itemvalue=\"Gradle.Little-H-Deluxe:desktop [run]\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.Little-H-Deluxe:desktop [run]\" />\r\n        <item itemvalue=\"Gradle.Little-H-Deluxe [run]\" />\r\n        <item itemvalue=\"Application.DesktopLauncher\" />\r\n        <item itemvalue=\"Application.DesktopLauncher\" />\r\n        <item itemvalue=\"Application.DesktopLauncher\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f5ded004-22a9-481a-9a2a-b40c1a1f3aae\" name=\"Changes\" comment=\"\" />\r\n      <created>1689134133824</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1689134133824</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial Commit\">\r\n      <created>1691388722702</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1691388722702</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Push from United Kingdom\">\r\n      <created>1692470606635</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692470606635</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Back in the states\">\r\n      <created>1692897740581</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692897740581</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Back in the states\">\r\n      <created>1692897755496</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692897755496</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Back in the states\">\r\n      <created>1692921631860</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692921631860</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Updates with background implementation\">\r\n      <created>1692922031819</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692922031819</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Updates with background implementation\">\r\n      <created>1692923258379</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692923258379</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692923282341</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692923282341</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692923419205</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692923419205</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692924234254</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692924234254</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692924899833</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692924899833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692925076253</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692925076253</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692925942565</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692925942565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692926164299</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692926164300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692926325325</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692926325325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692926349892</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692926349892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692929105784</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692929105784</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Map settings are shown when level starts or when Shift is held. Splish sound effect added. TileSelections fixed.\">\r\n      <created>1692934842721</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692934842721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Map settings are shown when level starts or when Shift is held. Splish sound effect added. TileSelections fixed.\">\r\n      <created>1692939566784</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692939566784</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Bug Squashing\">\r\n      <created>1692988273888</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692988273888</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Glitch causing enemies to not respawn fixed. More hotkeys added for tools.\">\r\n      <created>1692990277245</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692990277245</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Enemy updates\">\r\n      <created>1693003651026</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693003651026</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Fixed bugs, added stone mode. Updated music tracks.\">\r\n      <created>1693343531477</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693343531477</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Added pause menus\">\r\n      <created>1693349961043</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693349961043</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Completely overhauled controls\">\r\n      <created>1693375699030</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693375699030</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Completely overhauled controls\">\r\n      <created>1693375733042</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693375733042</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Added decor\">\r\n      <created>1693449837790</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693449837790</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Big Updates\">\r\n      <created>1693519680639</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693519680639</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Big Updates\">\r\n      <created>1693539086566</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693539086566</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Campaign stuff\">\r\n      <created>1694756765305</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694756765305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Campaign stuff\">\r\n      <created>1695004421024</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695004421024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"Reworked Layer System\">\r\n      <created>1703451422040</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703451422040</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"A bunch of shader stuff added, alpha broke and I cant seem to properly be able to apply shader's to Backpacker H's hair. Anti-gravity and a jump restoring pearl have also been added. Tutorial level has been updated.\">\r\n      <created>1705735610732</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705735610732</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"34\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"campaign\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Initial Commit\" />\r\n    <MESSAGE value=\"Push from United Kingdom\" />\r\n    <MESSAGE value=\"Back in the states\" />\r\n    <MESSAGE value=\"Updates with background implementation\" />\r\n    <MESSAGE value=\"Attempting to fix issues with .idea\" />\r\n    <MESSAGE value=\"Fixing crash on MacOS\" />\r\n    <MESSAGE value=\"Map settings are shown when level starts or when Shift is held. Splish sound effect added. TileSelections fixed.\" />\r\n    <MESSAGE value=\"Bug Squashing\" />\r\n    <MESSAGE value=\"Glitch causing enemies to not respawn fixed. More hotkeys added for tools.\" />\r\n    <MESSAGE value=\"Enemy updates\" />\r\n    <MESSAGE value=\"Grid shows up when editing background\" />\r\n    <MESSAGE value=\"Fixed regex issue\" />\r\n    <MESSAGE value=\"Fixed bugs, added stone mode. Updated music tracks.\" />\r\n    <MESSAGE value=\"Added pause menus\" />\r\n    <MESSAGE value=\"Completely overhauled controls\" />\r\n    <MESSAGE value=\"Added decor\" />\r\n    <MESSAGE value=\"Big Updates\" />\r\n    <MESSAGE value=\"Campaign stuff\" />\r\n    <MESSAGE value=\"Reworked Layer System\" />\r\n    <MESSAGE value=\"A bunch of shader stuff added, alpha broke and I cant seem to properly be able to apply shader's to Backpacker H's hair. Anti-gravity and a jump restoring pearl have also been added. Tutorial level has been updated.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"A bunch of shader stuff added, alpha broke and I cant seem to properly be able to apply shader's to Backpacker H's hair. Anti-gravity and a jump restoring pearl have also been added. Tutorial level has been updated.\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/little_h$DesktopLauncher__1_.ic\" NAME=\"DesktopLauncher (1) Coverage Results\" MODIFIED=\"1689325330492\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>com.sab.littleh.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c241f2d3ea9683ac2e177d1621b71093d7b3c2ce)
+++ b/.idea/workspace.xml	(date 1708573501610)
@@ -9,16 +9,48 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="965e289a-d713-4277-9876-48fb620d91fe" name="Changes" comment="Fixed water shader issues with corners">
-      <change afterPath="$PROJECT_DIR$/assets/resources/controls.sab" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/assets/resources/settings.sab" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/jarRepositories.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/jarRepositories.xml" afterDir="false" />
+    <list default="true" id="965e289a-d713-4277-9876-48fb620d91fe" name="Changes" comment="Gitignore updates">
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/actuator.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/button.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/blue_wire_rotation_0.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/blue_wire_rotation_1.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/blue_wire_rotation_2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/blue_wire_rotation_3.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/green_wire_rotation_0.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/green_wire_rotation_1.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/green_wire_rotation_2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/green_wire_rotation_3.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/red_wire_rotation_0.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/red_wire_rotation_1.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/red_wire_rotation_2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/red_wire_rotation_3.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/yellow_wire_rotation_0.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/yellow_wire_rotation_1.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/yellow_wire_rotation_2.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/tiles/wiring/wires/yellow_wire_rotation_3.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/images/ui/buttons/icons/wiring_mode.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/maps/testing.map" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/assets/scripts/level_editor/wiring.sab" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/assets/shaders/crt.fsh" beforeDir="false" afterPath="$PROJECT_DIR$/assets/shaders/crt.fsh" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/assets/shaders/crush.fsh" beforeDir="false" afterPath="$PROJECT_DIR$/assets/shaders/crush.fsh" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/assets/shaders/palette.fsh" beforeDir="false" afterPath="$PROJECT_DIR$/assets/shaders/palette.fsh" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/assets/shaders/vines.vsh" beforeDir="false" afterPath="$PROJECT_DIR$/assets/shaders/vines.vsh" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/campaign/SaveFile.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/campaign/SaveFile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/images/tiles/enemy.png" beforeDir="false" afterPath="$PROJECT_DIR$/assets/images/tiles/enemy.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/images/tiles/enemy_box.png" beforeDir="false" afterPath="$PROJECT_DIR$/assets/images/tiles/enemy_box.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/maps/hyperspace/pinball.map" beforeDir="false" afterPath="$PROJECT_DIR$/assets/maps/hyperspace/pinball.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/resources/settings.sab" beforeDir="false" afterPath="$PROJECT_DIR$/assets/resources/settings.sab" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/scripts/base_tags.sab" beforeDir="false" afterPath="$PROJECT_DIR$/assets/scripts/base_tags.sab" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/assets/scripts/level_editor/special.sab" beforeDir="false" afterPath="$PROJECT_DIR$/assets/scripts/level_editor/special.sab" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/controls/Controls.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/controls/Controls.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/entity/player/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/entity/player/Player.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/entity/player/powerups/BallMode.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/entity/player/powerups/BallMode.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/entity/player/powerups/Powerup.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/entity/player/powerups/Powerup.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/Level.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/Level.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelEditor.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelEditor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelLoader.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelLoader.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/Tile.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/Tile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/TileTags.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/TileTags.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/mainmenu/LevelEditorMenu.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/mainmenu/LevelEditorMenu.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/settings/Settings.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/settings/Settings.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/maps/test.map" beforeDir="false" afterPath="$PROJECT_DIR$/maps/test.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/resources/controls.sab" beforeDir="false" afterPath="$PROJECT_DIR$/resources/controls.sab" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -143,7 +175,7 @@
       <recent name="com.sab.littleh.game.entity.player.powerups" />
     </key>
   </component>
-  <component name="RunManager" selected="Gradle.Little-H-Deluxe:desktop [run]">
+  <component name="RunManager" selected="Application.DesktopLauncher">
     <configuration name="DesktopLauncher" type="Application" factoryName="Application" singleton="false" temporary="true">
       <option name="MAIN_CLASS_NAME" value="com.sab.littleh.DesktopLauncher" />
       <module name="little_h.desktop.main" />
@@ -468,7 +500,14 @@
       <option name="project" value="LOCAL" />
       <updated>1705735610732</updated>
     </task>
-    <option name="localTasksCounter" value="34" />
+    <task id="LOCAL-00034" summary="Gitignore updates">
+      <created>1708547699961</created>
+      <option name="number" value="00034" />
+      <option name="presentableId" value="LOCAL-00034" />
+      <option name="project" value="LOCAL" />
+      <updated>1708547699961</updated>
+    </task>
+    <option name="localTasksCounter" value="35" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -521,7 +560,9 @@
     <MESSAGE value="Campaign stuff" />
     <MESSAGE value="Reworked Layer System" />
     <MESSAGE value="A bunch of shader stuff added, alpha broke and I cant seem to properly be able to apply shader's to Backpacker H's hair. Anti-gravity and a jump restoring pearl have also been added. Tutorial level has been updated." />
-    <option name="LAST_COMMIT_MESSAGE" value="A bunch of shader stuff added, alpha broke and I cant seem to properly be able to apply shader's to Backpacker H's hair. Anti-gravity and a jump restoring pearl have also been added. Tutorial level has been updated." />
+    <MESSAGE value="Fixed water shader issues with corners" />
+    <MESSAGE value="Gitignore updates" />
+    <option name="LAST_COMMIT_MESSAGE" value="Gitignore updates" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/little_h$DesktopLauncher__1_.ic" NAME="DesktopLauncher (1) Coverage Results" MODIFIED="1689325330492" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
