Index: core/src/com/sab/littleh/game/level/LevelEditor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.level;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.mainmenu.LevelEditorMenu;\r\nimport com.sab.littleh.settings.Settings;\r\nimport com.sab.littleh.util.DynamicCamera;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.Images;\r\n\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\npublic class LevelEditor {\r\n    protected static DynamicCamera camera = LittleH.program.dynamicCamera;\r\n    protected Level level;\r\n    public static boolean saved;\r\n    protected Set<Point> fillTiles;\r\n    protected static Rectangle selection;\r\n    protected static boolean selectionAlive;\r\n    protected static TileSelection tileSelection;\r\n    protected static Vector2 selectionAnchor;\r\n    protected static boolean movingSelection;\r\n    protected static boolean nudgingSelection;\r\n    protected List<UndoAction> undoQueue;\r\n    protected int undoIndex;\r\n    protected String layer;\r\n\r\n    public LevelEditor(Level level, String layer) {\r\n        this.level = level;\r\n        setSaved(true);\r\n        fillTiles = new HashSet<>();\r\n        undoQueue = new ArrayList<>();\r\n        this.layer = layer;\r\n    }\r\n\r\n    public void setSaved(boolean value) {\r\n        saved = value;\r\n        String title = \" | Editing level: \" + level.mapData.getValue(\"name\");\r\n        if (!saved)\r\n            title += \" (Unsaved)\";\r\n        LittleH.setTitle(title);\r\n    }\r\n\r\n    public Point addTile(Tile tileToCopy, int x, int y, boolean addToUndoQueue) {\r\n        Tile tile = tileToCopy;\r\n        if (!tileToCopy.image.equals(\"delete\"))\r\n            tile = tileToCopy.copy();\r\n        tile.x = x;\r\n        tile.y = y;\r\n\r\n        Point amountNegativeResize = resizeAround(x, y);\r\n\r\n        tile.x = Math.max(0, x);\r\n        tile.y = Math.max(0, y);\r\n\r\n        level.removeTile(layer, tile.x, tile.y);\r\n\r\n        if (!tileToCopy.image.equals(\"delete\"))\r\n            level.addTile(layer, tile);\r\n\r\n        if (amountNegativeResize.x > 0 || amountNegativeResize.y > 0) {\r\n            undoQueue.forEach(undoAction -> {\r\n                undoAction.resize(amountNegativeResize);\r\n            });\r\n        }\r\n\r\n        if (addToUndoQueue) {\r\n            Tile tileAt = level.mapLayers.get(layer).tileMap.get(tile.x).get(tile.y);\r\n            if (tileAt == null) {\r\n                tileAt = new Tile(\"delete\");\r\n                tileAt.x = tile.x;\r\n                tileAt.y = tile.y;\r\n            } else {\r\n                tileAt = tileAt.copy();\r\n            }\r\n            if (!Tile.tilesEqual(tileAt, tile))\r\n                addUndoAction(new UndoTile(tile.copy(), tileAt));\r\n        }\r\n\r\n        if (tile.image.equals(\"delete\")) {\r\n            level.mapLayers.get(layer).tileMap.get(tile.x).set(tile.y, null);\r\n        } else {\r\n            level.mapLayers.get(layer).tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n\r\n        Tile[][] neighbors = getNeighbors(null, tile.x, tile.y);\r\n\r\n        for (Tile[] tiles : neighbors)\r\n            for (Tile neighborTile : tiles)\r\n                if (neighborTile != null)\r\n                    checkTiling(getNeighbors(neighborTile, neighborTile.x, neighborTile.y), neighborTile);\r\n        setSaved(false);\r\n\r\n        return amountNegativeResize;\r\n    }\r\n\r\n    public void select(Point position) {\r\n        if (selectionActive()) {\r\n            updateSelection(position);\r\n        } else {\r\n            startSelection(position);\r\n        }\r\n    }\r\n\r\n    public void startSelection(Point point) {\r\n        endSelection();\r\n        selection = new Rectangle(point.x, point.y, 1, 1);\r\n        selectionAlive = true;\r\n    }\r\n\r\n    public void updateSelection(Point point) {\r\n        if (selection == null) {\r\n            startSelection(point);\r\n        } else {\r\n            Point range = new Point(point.x - selection.x - selection.width + 1, point.y - selection.y - selection.height + 1);\r\n            selection.width += range.x;\r\n            selection.height += range.y;\r\n        }\r\n    }\r\n\r\n    public void selectionReleased() {\r\n        if (selection != null) {\r\n            selection = selectionNormalized();\r\n            if (tileSelection != null)\r\n                tileSelection.setRect(selection);\r\n        }\r\n        selectionAlive = false;\r\n        selectionAnchor = null;\r\n        movingSelection = false;\r\n        nudgingSelection = false;\r\n    }\r\n\r\n    public boolean selectionActive() {\r\n        return selection != null && selectionAlive;\r\n    }\r\n\r\n    public void endSelection() {\r\n        selection = null;\r\n        tileSelection = null;\r\n    }\r\n\r\n    public void startMovingSelection(Vector2 relativeTo) {\r\n        nudgingSelection = true;\r\n        selectionAnchor = new Vector2();\r\n        selectionAnchor.x = selection.x * 64 - relativeTo.x;\r\n        selectionAnchor.y = selection.y * 64 - relativeTo.y;\r\n        if (tileSelection == null)\r\n            tileSelection = new TileSelection(selection, level, false, layer);\r\n    }\r\n\r\n    public void updateSelectionPosition(Vector2 mousePosition) {\r\n        if (selection != null) {\r\n            if (selectionAnchor == null)\r\n                startMovingSelection(mousePosition);\r\n            selection.x = (int) (selectionAnchor.x + mousePosition.x) / 64;\r\n            selection.y = (int) (selectionAnchor.y + mousePosition.y) / 64;\r\n            if (tileSelection != null)\r\n                tileSelection.translate();\r\n        }\r\n    }\r\n\r\n    public void setSelectionPosition(Vector2 mousePosition) {\r\n        if (selection != null) {\r\n            movingSelection = true;\r\n            selection.x = (int) (mousePosition.x) / 64 - selection.width / 2;\r\n            selection.y = (int) (mousePosition.y) / 64 - selection.height / 2;\r\n            if (tileSelection != null)\r\n                tileSelection.translate();\r\n        }\r\n    }\r\n\r\n    public Point resizeAround(int x, int y) {\r\n        int widthToAdd = 0;\r\n        int heightToAdd = 0;\r\n\r\n        if (x < 0) {\r\n            widthToAdd = Math.abs(x);\r\n            for (int i = 0; i < widthToAdd; i++) {\r\n                Collection<MapLayer> layers = level.mapLayers.values();\r\n                for (MapLayer mapLayer : layers) {\r\n                    List<Tile> tiles = new ArrayList<>(level.getHeight());\r\n                    for (int j = 0; j < level.getHeight(); j++)\r\n                        tiles.add(null);\r\n                    mapLayer.tileMap.add(0, tiles);\r\n                }\r\n                camera.targetPosition.x += 64;\r\n                camera.position.x += 64;\r\n            }\r\n        } else if (x >= level.getWidth()) {\r\n            int expandX = x - level.getWidth() + 1;\r\n            for (int i = 0; i < expandX; i++) {\r\n                Collection<MapLayer> layers = level.mapLayers.values();\r\n                for (MapLayer mapLayer : layers) {\r\n                    List<Tile> tiles = new ArrayList<>(level.getHeight());\r\n                    for (int j = 0; j < level.getHeight(); j++)\r\n                        tiles.add(null);\r\n                    mapLayer.tileMap.add(tiles);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (y < 0) {\r\n            heightToAdd = Math.abs(y);\r\n            boolean cameraShifted = false;\r\n\r\n            Collection<MapLayer> layers = level.mapLayers.values();\r\n            for (MapLayer mapLayer : layers) {\r\n                for (List<Tile> tiles : mapLayer.tileMap) {\r\n                    for (int i = 0; i < heightToAdd; i++) {\r\n                        tiles.add(0, null);\r\n                        if (!cameraShifted) {\r\n                            camera.targetPosition.y += 64;\r\n                            camera.position.y += 64;\r\n                        }\r\n                    }\r\n                    cameraShifted = true;\r\n                }\r\n            }\r\n        } else if (y >= level.getHeight()) {\r\n            int expandY = y - level.getHeight() + 1;\r\n\r\n            Collection<MapLayer> layers = level.mapLayers.values();\r\n            for (MapLayer mapLayer : layers) {\r\n                for (List<Tile> tiles : mapLayer.tileMap) {\r\n                    for (int i = 0; i < expandY; i++) {\r\n                        tiles.add(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (widthToAdd > 0 || heightToAdd > 0) {\r\n            Collection<MapLayer> layers = level.mapLayers.values();\r\n            for (MapLayer mapLayer : layers) {\r\n                for (Tile tile : mapLayer.allTiles) {\r\n                    tile.x += widthToAdd;\r\n                    tile.y += heightToAdd;\r\n                }\r\n            }\r\n\r\n            if (selection != null) {\r\n                selection.x += widthToAdd;\r\n                selection.y += heightToAdd;\r\n                if (tileSelection != null) {\r\n                    tileSelection.resize(widthToAdd, heightToAdd);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (LittleH.program.getMenu() instanceof LevelEditorMenu) {\r\n            ((LevelEditorMenu) LittleH.program.getMenu()).negativeResize(widthToAdd, heightToAdd);\r\n        }\r\n\r\n        return new Point(widthToAdd, heightToAdd);\r\n    }\r\n\r\n    public boolean isNudging() {\r\n        return nudgingSelection;\r\n    }\r\n\r\n    public boolean isMoving() {\r\n        return movingSelection;\r\n    }\r\n\r\n    public Tile[][] getNeighbors(Tile tile, int tileX, int tileY) {\r\n        // Magic\r\n        Tile[][] neighbors = new Tile[3][3];\r\n        for (int i = tileX - 1; i < tileX + 2; i++) {\r\n            for (int j = tileY - 1; j < tileY + 2; j++) {\r\n                Tile otherTile = level.getTileAt(layer, i, j);\r\n                if (otherTile != null && !otherTile.ignoreTiling) {\r\n                    if (tile != null && !tile.image.equals(\"delete\") && tile.hasTag(\"exclusive_tiling\") && !otherTile.image.equals(tile.image)) {\r\n                        neighbors[tileX - i + 1][tileY - j + 1] = null;\r\n                        continue;\r\n                    }\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = otherTile;\r\n                } else {\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = null;\r\n                }\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    public int numNeighbors(Tile[][] tileMatrix) {\r\n        int count = 0;\r\n        for (Tile[] tiles : tileMatrix) {\r\n            for (Tile tile : tiles) {\r\n                if (tile != null) count++;\r\n            }\r\n        }\r\n        // Subtract one to remove itself\r\n        return count - 1;\r\n    }\r\n\r\n    public void checkTiling(Tile[][] neighbors, Tile tile) {\r\n        if (tile.ignoreTiling) return;\r\n        int tileType = 0;\r\n\r\n        int numNeighbors = numNeighbors(neighbors);\r\n        // No neighbors\r\n        if (numNeighbors == 0) {\r\n            tileType = 0;\r\n        // Max neighbors\r\n        } else if (numNeighbors == 8) {\r\n            tileType = 5;\r\n        } else {\r\n            // Seven connecting pieces\r\n            if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = rotateType(6, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = rotateType(6, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 2), new Point(0, 1), new Point(2, 2), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = 6;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 2), new Point(2, 1)) && numNeighbors == 7) {\r\n                tileType = rotateType(6, 3);\r\n\r\n                // Six connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 2), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = 7;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 2), new Point(1, 2), new Point(2, 2))) {\r\n                tileType = rotateType(7, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0), new Point(2, 1), new Point(0, 2), new Point(0, 1), new Point(0, 0))) {\r\n                tileType = rotateType(7, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(2, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0))) {\r\n                tileType = rotateType(7, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = 8;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 0))) {\r\n                tileType = rotateType(8, 1);\r\n\r\n                // Five connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(2, 1), new Point(2, 0), new Point(1, 0)) && neighbors[0][1] == null) {\r\n                tileType = rotateType(4, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(2, 1)) && neighbors[1][2] == null) {\r\n                tileType = rotateType(4, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0)) && neighbors[2][1] == null) {\r\n                tileType = 4;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 2), new Point(1, 2), new Point(2, 2), new Point(2, 1)) && neighbors[1][0] == null) {\r\n                tileType = rotateType(4, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 2))) {\r\n                tileType = rotateType(9, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = rotateType(9, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 0))) {\r\n                tileType = rotateType(9, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(0, 2))) {\r\n                tileType = 9;\r\n\r\n                // Four connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = 10;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = rotateType(11, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = rotateType(11, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(1, 0))) {\r\n                tileType = 11;\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(2, 2), new Point(1, 2), new Point(0, 1))) {\r\n                tileType = rotateType(11, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0), new Point(2, 1), new Point(2, 0))) {\r\n                tileType = rotateType(12, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(2, 1), new Point(1, 0))) {\r\n                tileType = rotateType(12, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(0, 0), new Point(1, 0))) {\r\n                tileType = 12;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1), new Point(2, 1))) {\r\n                tileType = rotateType(12, 1);\r\n\r\n                // Three connecting pieces\r\n\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(1, 0))) {\r\n                tileType = 13;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = rotateType(13, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0), new Point(2, 1))) {\r\n                tileType = rotateType(13, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(0, 1), new Point(2, 1))) {\r\n                tileType = rotateType(13, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 2), new Point(1, 2), new Point(0, 1))) {\r\n                tileType = 2;\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(2, 2), new Point(2, 1))) {\r\n                tileType = rotateType(2, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(2, 0), new Point(1, 0))) {\r\n                tileType = rotateType(2, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(0, 0), new Point(1, 0))) {\r\n                tileType = rotateType(2, 3);\r\n\r\n                // Two connecting pieces\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2), new Point(1, 0))) {\r\n                tileType = 3;\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(0, 1))) {\r\n                tileType = rotateType(3, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 2))) {\r\n                tileType = 14;\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(1, 2))) {\r\n                tileType = rotateType(14, 1);\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1), new Point(1, 0))) {\r\n                tileType = rotateType(14, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1), new Point(1, 0))) {\r\n                tileType = rotateType(14, 3);\r\n\r\n                // One connecting piece\r\n            } else if (checkNeighbors(neighbors, new Point(1, 2))) {\r\n                tileType = 1;\r\n            } else if (checkNeighbors(neighbors, new Point(0, 1))) {\r\n                tileType = rotateType(1, 3);\r\n            } else if (checkNeighbors(neighbors, new Point(1, 0))) {\r\n                tileType = rotateType(1, 2);\r\n            } else if (checkNeighbors(neighbors, new Point(2, 1))) {\r\n                tileType = rotateType(1, 1);\r\n            }\r\n        }\r\n\r\n        if (!tile.image.equals(\"delete\"))\r\n            tile.setTileType(tileType);\r\n    }\r\n\r\n    public int rotateType(int baseType, int rotations) {\r\n        return baseType + rotations * 15;\r\n    }\r\n\r\n    public boolean checkNeighbors(Tile[][] neighbors, Point... positions) {\r\n        for (Point relPos : positions) {\r\n            if (neighbors[relPos.x][relPos.y] == null) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void drawLine(Tile tile, int endX, int endY, int startX, int startY) {\r\n        Point resize = new Point();\r\n        for (Point point : getLinePoints(endX, endY, startX, startY)) {\r\n            Point tileResize = addTile(tile, point.x + resize.x, point.y + resize.y, true);\r\n            resize.x += tileResize.x;\r\n            resize.y += tileResize.y;\r\n        }\r\n        addTile(tile, endX + resize.x, endY + resize.y, true);\r\n    }\r\n\r\n    public void fill(Tile fillTile, int originX, int originY) {\r\n        // Don't let people fill out of bounds\r\n        if (!(originX >= 0 && originY >= 0 && originX < level.getWidth() && originY < level.getHeight())) return;\r\n        // Don't fill tiles of the same type\r\n        if (Tile.tilesEqual(fillTile, level.getTileAt(layer, originX, originY)) || fillTile.image.equals(\"delete\") && level.getTileAt(layer, originX, originY) == null) return;\r\n        fillTiles.clear();\r\n\r\n        List<Point> open = new ArrayList<>();\r\n        Set<Point> closed = new HashSet<>();\r\n\r\n        Point origin = new Point(originX, originY);\r\n        Tile tileToFill = level.getTileAt(layer, originX, originY);\r\n        open.add(origin);\r\n        closed.add(origin);\r\n\r\n        int tilesFilled = 0;\r\n        while (open.size() > 0) {\r\n            Point current = open.get(0);\r\n            open.remove(0);\r\n\r\n            fillTiles.add(current);\r\n            tilesFilled++;\r\n\r\n            int x = current.x;\r\n            int y = current.y;\r\n\r\n            if (x + 1 < level.getWidth() && !Tile.tilesEqual(level.getTileAt(layer, x + 1, y), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x + 1, y), tileToFill)\r\n                    && !closed.contains(new Point(x + 1, y)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x + 1, y))) {\r\n                open.add(new Point(x + 1, y));\r\n                closed.add(new Point(x + 1, y));\r\n            }\r\n            if (x - 1 >= 0 && !Tile.tilesEqual(level.getTileAt(layer, x - 1, y), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x - 1, y), tileToFill)\r\n                    && !closed.contains(new Point(x - 1, y)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x - 1, y))) {\r\n                open.add(new Point(x - 1, y));\r\n                closed.add(new Point(x - 1, y));\r\n            }\r\n            if (y + 1 < level.getHeight() && !Tile.tilesEqual(level.getTileAt(layer, x, y + 1), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x, y + 1), tileToFill)\r\n                    && !closed.contains(new Point(x, y + 1)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x, y + 1))) {\r\n                open.add(new Point(x, y + 1));\r\n                closed.add(new Point(x, y + 1));\r\n            }\r\n            if (y - 1 >= 0 && !Tile.tilesEqual(level.getTileAt(layer, x, y - 1), fillTile) && Tile.tilesEqual(level.getTileAt(layer, x, y - 1), tileToFill)\r\n                    && !closed.contains(new Point(x, y - 1)) && Tile.extrasEqual(tileToFill, level.getTileAt(layer, x, y - 1))) {\r\n                open.add(new Point(x, y - 1));\r\n                closed.add(new Point(x, y - 1));\r\n            }\r\n        }\r\n\r\n        // Add a \"fill\" action to the undo queue\r\n        if (tileToFill == null) {\r\n            // Save undo actions of null instead as tiles with the tag \"delete\"\r\n            tileToFill = new Tile(\"delete\");\r\n        }\r\n//        fillTile = fillTile.copy();\r\n\r\n        // Add/delete all tiles\r\n        for (Point point : fillTiles) {\r\n            addTile(fillTile, point.x, point.y, false);\r\n        }\r\n\r\n        addUndoAction(new UndoFill(fillTile.copy(), tileToFill.copy(), Set.copyOf(fillTiles)));\r\n\r\n        // Empty the list for good measure\r\n        fillTiles.clear();\r\n    }\r\n\r\n    public Rectangle selectionAsWorldCoords() {\r\n        Rectangle selection = selectionNormalized();\r\n        return new Rectangle(selection.x * 64, selection.y * 64, selection.width * 64, selection.height * 64);\r\n    }\r\n\r\n    public Rectangle selectionNormalized() {\r\n        Rectangle selection = new Rectangle(this.selection);\r\n\r\n        if (selection.width <= 0) {\r\n            selection.x += selection.width - 1;\r\n            selection.width = Math.abs(selection.width) + 2;\r\n        }\r\n\r\n        if (selection.height <= 0) {\r\n            selection.y += selection.height - 1;\r\n            selection.height = Math.abs(selection.height) + 2;\r\n        }\r\n\r\n        return selection;\r\n    }\r\n\r\n    public void renderSelection(Graphics g) {\r\n        if (tileSelection != null) {\r\n            tileSelection.render(g);\r\n        }\r\n\r\n        Texture selectionImage = Images.getImage(!Settings.localSettings.selectionContrast.value ? \"ui/selection.png\" : \"ui/selection_high_con.png\");\r\n\r\n        if (selection != null) {\r\n            Rectangle selection = selectionNormalized();\r\n            Rectangle rect = selectionAsWorldCoords();\r\n            int frameY = LittleH.getTick() / 12 % 4 * 8;\r\n            com.badlogic.gdx.math.Rectangle frame = new com.badlogic.gdx.math.Rectangle(0, frameY, 8, 8);\r\n            for (int i = 0; i < selection.width; i++) {\r\n                g.drawImage(selectionImage, rect.x + 64 * i, rect.y, 64, 64,\r\n                        frame, 180);\r\n                g.drawImage(selectionImage, rect.x + 64 * i, rect.y + rect.height - 64, 64, 64,\r\n                        frame);\r\n            }\r\n            for (int i = 0; i < selection.height; i++) {\r\n                g.drawImage(selectionImage, rect.x, rect.y + i * 64, 64, 64,\r\n                        frame, 90);\r\n                g.drawImage(selectionImage, rect.x + rect.width - 64, rect.y + i * 64, 64, 64,\r\n                        frame, 270);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void deleteSelection() {\r\n        if (selection != null && !selectionAlive) {\r\n            UndoSelection undoSelection = new UndoSelection();\r\n            for (int i = 0; i < selection.width; i++) {\r\n                for (int j = 0; j < selection.height; j++) {\r\n                    Tile tileAt = level.getTileAt(layer, selection.x + i, selection.y + j);\r\n                    if (tileAt != null) {\r\n                        undoSelection.add(tileAt.copy(), new Tile(\"delete\"));\r\n                        addTile(new Tile(\"delete\"), selection.x + i, selection.y + j, false);\r\n                    }\r\n                }\r\n            }\r\n            addUndoAction(undoSelection);\r\n            setSaved(false);\r\n        }\r\n    }\r\n\r\n    public void undo() {\r\n        if (undoIndex < undoQueue.size()) {\r\n            undoQueue.get(undoIndex).undo(this);\r\n            undoIndex++;\r\n        }\r\n    }\r\n\r\n    public void redo() {\r\n        if (undoIndex > 0) {\r\n            undoIndex--;\r\n            undoQueue.get(undoIndex).redo(this);\r\n        }\r\n    }\r\n\r\n    public void trimUndoQueue() {\r\n        for (int i = undoIndex - 1; i >= 0; i--) {\r\n            undoQueue.remove(i);\r\n        }\r\n        undoIndex = 0;\r\n    }\r\n\r\n    public void addUndoAction(UndoAction action) {\r\n        trimUndoQueue();\r\n        undoQueue.add(0, action);\r\n    }\r\n\r\n    public void pasteSelection() {\r\n        if (tileSelection != null) {\r\n            tileSelection.paste(this);\r\n        }\r\n        setSaved(false);\r\n    }\r\n\r\n    public void copySelection() {\r\n        tileSelection = new TileSelection(selection, level, layer);\r\n    }\r\n\r\n    public boolean hasSelection() {\r\n        return selection != null;\r\n    }\r\n\r\n    public Level getLevel() {\r\n        return level;\r\n    }\r\n\r\n    public boolean hasTileSelection() {\r\n        return tileSelection != null;\r\n    }\r\n\r\n    public Tile getTileAt(int x, int y) {\r\n        return level.getTileAt(layer, x, y);\r\n    }\r\n\r\n    public List<Point> getLinePoints(int endX, int endY, int startX, int startY) {\r\n        List<Point> points = new ArrayList<>();\r\n        int dX = endX - startX;\r\n        int dY = endY - startY;\r\n\r\n        dX *= 64;\r\n        dY *= 64;\r\n\r\n        float dLen = (float) Math.sqrt(dX * dX + dY * dY);\r\n        float sclX = ((float) dX / dLen);\r\n        float sclY = ((float) dY / dLen);\r\n\r\n        int[] delta = new int[]{ dX, dY };\r\n        int[] point = new int[]{ startX * 64 + 32, startY * 64 + 32 };\r\n        Vector2 spillover = new Vector2();\r\n\r\n        int len = 0;\r\n        while (true) {\r\n            Vector2 vec = new Vector2(sclX * 64, sclY * 64);\r\n            Point step = new Point((int) (sclX * 64 + spillover.x), (int) (sclY * 64 + spillover.y));\r\n            vec.x -= step.x;\r\n            vec.y -= step.y;\r\n            spillover.add(vec);\r\n\r\n            Point linePoint = new Point((point[0]) / 64, (point[1]) / 64);\r\n            points.add(linePoint);\r\n            if (linePoint.x == endX && linePoint.y == endY || Math.abs(delta[0]) < 64 && Math.abs(delta[1]) < 64)\r\n                break;\r\n\r\n            point[0] += step.x;\r\n            point[1] += step.y;\r\n            delta[0] -= step.x;\r\n            delta[1] -= step.y;\r\n            len++;\r\n            if (len > 512)\r\n                break;\r\n        }\r\n        return points;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/level/LevelEditor.java b/core/src/com/sab/littleh/game/level/LevelEditor.java
--- a/core/src/com/sab/littleh/game/level/LevelEditor.java	(revision da44e287090b74d167d943ff8a58b2418f0de4c1)
+++ b/core/src/com/sab/littleh/game/level/LevelEditor.java	(date 1708671846582)
@@ -274,14 +274,16 @@
         for (int i = tileX - 1; i < tileX + 2; i++) {
             for (int j = tileY - 1; j < tileY + 2; j++) {
                 Tile otherTile = level.getTileAt(layer, i, j);
-                if (otherTile != null && !otherTile.ignoreTiling) {
-                    if (tile != null && !tile.image.equals("delete") && tile.hasTag("exclusive_tiling") && !otherTile.image.equals(tile.image)) {
-                        neighbors[tileX - i + 1][tileY - j + 1] = null;
-                        continue;
-                    }
-                    neighbors[tileX - i + 1][tileY - j + 1] = otherTile;
-                } else {
-                    neighbors[tileX - i + 1][tileY - j + 1] = null;
+                if (otherTile != null) {
+                    if (tile != null && !tile.image.equals("delete") && tile.hasTag("exclusive_tiling")) {
+                        for (String string : tile.tags.getTagParameters("exclusive_tiling")) {
+                            if (otherTile.hasTag(string)) {
+                                neighbors[tileX - i + 1][tileY - j + 1] = otherTile;
+                                break;
+                            }
+                        }
+                    } else if (!otherTile.ignoreTiling)
+                        neighbors[tileX - i + 1][tileY - j + 1] = otherTile;
                 }
             }
         }
Index: maps/test.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@crouching true\r\n@look_around true\r\n@is_deluxe true\r\n@time_limit -1\r\n@author AshQuimby\r\n@background cold_mountains\r\n@name Test\r\n@double_jumping true\r\n@wall_sliding true\r\n@version 0.1.5\r\n6 15 tiles/sets/grass 41 \r\n3 12 tiles/sets/grass 46 \r\n11 4 tiles/sets/grass 47 \r\n11 2 tiles/sets/grass 46 \r\n12 2 tiles/sets/grass 44 \r\n12 3 tiles/sets/grass 3 \r\n6 16 tiles/sets/grass 21 \r\n5 16 tiles/sets/grass 5 \r\n5 15 tiles/sets/grass 49 \r\n4 15 tiles/sets/grass 22 \r\n4 14 tiles/sets/grass 3 \r\n4 13 tiles/sets/grass 11 \r\n4 12 tiles/sets/grass 37 \r\n4 9 tiles/sets/grass 4 \r\n4 8 tiles/sets/grass 4 \r\n4 7 tiles/sets/grass 47 \r\n5 7 tiles/sets/grass 49 \r\n6 6 tiles/sets/grass 47 \r\n7 6 tiles/sets/grass 49 \r\n9 5 tiles/sets/grass 47 \r\n12 4 tiles/sets/grass 22 \r\n13 4 tiles/sets/grass 49 \r\n8 15 tiles/sets/grass 4 \r\n4 11 tiles/sets/grass 4 \r\n4 10 tiles/sets/grass 4 \r\n5 8 tiles/sets/grass 5 \r\n6 7 tiles/sets/grass 36 \r\n7 7 tiles/sets/grass 5 \r\n8 6 tiles/sets/grass 49 \r\n10 5 tiles/sets/grass 49 \r\n5 9 tiles/sets/grass 6 \r\n6 8 tiles/sets/grass 5 \r\n8 7 tiles/sets/grass 5 \r\n9 6 tiles/sets/grass 36 \r\n10 6 tiles/sets/grass 5 \r\n11 5 tiles/sets/grass 36 \r\n12 5 tiles/sets/grass 5 \r\n14 4 tiles/sets/grass 49 \r\n9 7 tiles/sets/grass 5 \r\n13 5 tiles/sets/grass 5 \r\n11 8 tiles/sets/grass 5 \r\n13 7 tiles/sets/grass 5 \r\n14 6 tiles/sets/grass 5 \r\n7 9 tiles/sets/grass 51 \r\n8 9 tiles/sets/grass 5 \r\n10 7 tiles/sets/grass 5 \r\n11 6 tiles/sets/grass 5 \r\n12 6 tiles/sets/grass 5 \r\n13 6 tiles/sets/grass 5 \r\n14 5 tiles/sets/grass 5 \r\n12 12 tiles/sets/grass 5 \r\n11 12 tiles/sets/grass 5 \r\n10 12 tiles/sets/grass 5 \r\n9 12 tiles/sets/grass 5 \r\n8 12 tiles/sets/grass 5 \r\n7 12 tiles/sets/grass 5 \r\n5 11 tiles/sets/grass 21 \r\n5 10 tiles/sets/grass 34 \r\n6 9 tiles/sets/grass 19 \r\n7 8 tiles/sets/grass 5 \r\n8 8 tiles/sets/grass 5 \r\n9 8 tiles/sets/grass 5 \r\n10 8 tiles/sets/grass 5 \r\n11 7 tiles/sets/grass 5 \r\n12 7 tiles/sets/grass 5 \r\n10 14 tiles/sets/grass 5 \r\n9 14 tiles/sets/grass 5 \r\n8 14 tiles/sets/grass 51 \r\n7 14 tiles/sets/grass 19 \r\n6 14 tiles/sets/grass 11 \r\n5 13 tiles/sets/grass 19 \r\n5 12 tiles/sets/grass 5 \r\n7 10 tiles/sets/grass 4 \r\n9 9 tiles/sets/grass 5 \r\n11 13 tiles/sets/grass 5 \r\n10 13 tiles/sets/grass 5 \r\n9 13 tiles/sets/grass 5 \r\n8 13 tiles/sets/grass 5 \r\n7 13 tiles/sets/grass 5 \r\n6 13 tiles/sets/grass 51 \r\n6 12 tiles/sets/grass 5 \r\n6 11 tiles/sets/grass 49 \r\n7 11 tiles/sets/grass 36 \r\n12 8 tiles/sets/grass 5 \r\n13 8 tiles/sets/grass 5 \r\n10 9 tiles/sets/grass 5 \r\n11 9 tiles/sets/grass 5 \r\n12 9 tiles/sets/grass 5 \r\n12 11 tiles/sets/grass 5 \r\n11 11 tiles/sets/grass 5 \r\n10 11 tiles/sets/grass 5 \r\n9 11 tiles/sets/grass 5 \r\n8 11 tiles/sets/grass 5 \r\n8 10 tiles/sets/grass 5 \r\n9 10 tiles/sets/grass 5 \r\n10 10 tiles/sets/grass 5 \r\n11 10 tiles/sets/grass 5 \r\n12 10 tiles/sets/grass 5 \r\n13 10 tiles/sets/grass 5 \r\n13 9 tiles/sets/grass 5 \r\n7 16 tiles/sets/grass 49 \r\n8 16 tiles/sets/grass 36 \r\n9 15 tiles/sets/grass 6 \r\n9 16 tiles/sets/grass 34 \r\n10 15 tiles/sets/grass 19 \r\n11 14 tiles/sets/grass 5 \r\n11 15 tiles/sets/grass 19 \r\n12 13 tiles/sets/grass 6 \r\n12 14 tiles/sets/grass 34 \r\n12 15 tiles/sets/grass 26 \r\n13 11 tiles/sets/grass 5 \r\n13 12 tiles/sets/grass 5 \r\n13 13 tiles/sets/grass 19 \r\n13 15 tiles/sets/grass 18 \r\n14 7 tiles/sets/grass 5 \r\n14 8 tiles/sets/grass 5 \r\n14 9 tiles/sets/grass 5 \r\n14 10 tiles/sets/grass 5 \r\n14 11 tiles/sets/grass 5 \r\n14 12 tiles/sets/grass 6 \r\n14 13 tiles/sets/grass 42 \r\n14 14 tiles/sets/grass 13 \r\n14 15 tiles/sets/grass 29 \r\n15 2 tiles/sets/grass 0 \r\n15 4 tiles/sets/grass 49 \r\n15 5 tiles/sets/grass 5 \r\n15 6 tiles/sets/grass 5 \r\n15 7 tiles/sets/grass 5 \r\n15 8 tiles/sets/grass 5 \r\n15 9 tiles/sets/grass 5 \r\n15 10 tiles/sets/grass 5 \r\n15 11 tiles/sets/grass 5 \r\n15 12 tiles/sets/grass 19 \r\n15 14 tiles/sets/grass 18 \r\n16 3 tiles/sets/grass 31 \r\n16 4 tiles/sets/grass 22 \r\n16 5 tiles/sets/grass 5 \r\n16 6 tiles/sets/grass 5 \r\n16 7 tiles/sets/grass 5 \r\n16 8 tiles/sets/grass 5 \r\n16 9 tiles/sets/grass 5 \r\n16 10 tiles/sets/grass 5 \r\n16 11 tiles/sets/grass 6 \r\n16 12 tiles/sets/grass 17 \r\n16 14 tiles/sets/grass 16 \r\n17 1 tiles/sets/grass 46 \r\n17 4 tiles/sets/grass 49 \r\n17 5 tiles/sets/grass 5 \r\n17 6 tiles/sets/grass 5 \r\n17 7 tiles/sets/grass 5 \r\n17 8 tiles/sets/grass 5 \r\n17 9 tiles/sets/grass 5 \r\n17 10 tiles/sets/grass 5 \r\n17 11 tiles/sets/grass 19 \r\n17 13 tiles/sets/grass 0 \r\n18 1 tiles/sets/grass 44 \r\n18 2 tiles/sets/grass 14 \r\n18 4 tiles/sets/grass 32 \r\n18 5 tiles/sets/grass 21 \r\n18 6 tiles/sets/grass 5 \r\n18 7 tiles/sets/grass 5 \r\n18 8 tiles/sets/grass 5 \r\n18 9 tiles/sets/grass 5 \r\n18 10 tiles/sets/grass 5 \r\n18 11 tiles/sets/grass 52 \r\n18 12 tiles/sets/grass 1 \r\n19 2 tiles/sets/grass 44 \r\n19 3 tiles/sets/grass 1 \r\n19 5 tiles/sets/grass 49 \r\n19 6 tiles/sets/grass 5 \r\n19 7 tiles/sets/grass 5 \r\n19 8 tiles/sets/grass 5 \r\n19 9 tiles/sets/grass 5 \r\n19 10 tiles/sets/grass 6 \r\n19 11 tiles/sets/grass 17 \r\n20 4 tiles/sets/grass 31 \r\n20 5 tiles/sets/grass 22 \r\n20 6 tiles/sets/grass 5 \r\n20 7 tiles/sets/grass 5 \r\n20 8 tiles/sets/grass 5 \r\n20 9 tiles/sets/grass 6 \r\n20 10 tiles/sets/grass 17 \r\n21 5 tiles/sets/grass 49 \r\n21 6 tiles/sets/grass 5 \r\n21 7 tiles/sets/grass 5 \r\n21 8 tiles/sets/grass 6 \r\n21 9 tiles/sets/grass 17 \r\n22 4 tiles/sets/grass 31 \r\n22 5 tiles/sets/grass 41 \r\n22 6 tiles/sets/grass 21 \r\n22 7 tiles/sets/grass 5 \r\n22 8 tiles/sets/grass 19 \r\n23 6 tiles/sets/grass 57 \r\n23 7 tiles/sets/grass 34 \r\n23 8 tiles/sets/grass 17 \r\n24 6 tiles/sets/grass 16 \r\n7 3 tiles/sets/grass 16 \r\n6 3 tiles/sets/grass 46 \r\n5 2 tiles/sets/grass 17 \r\n4 2 tiles/sets/grass 2 \r\n3 1 tiles/sets/grass 18 \r\n2 1 tiles/sets/grass 14 \r\n2 0 tiles/sets/grass 31 \r\n5 1 tiles/sets/grass 32 \r\n4 1 tiles/sets/grass 56 \r\n13 27 tiles/sets/grass 2 \r\n14 27 tiles/sets/grass 19 \r\n15 27 tiles/sets/grass 19 \r\n16 27 tiles/sets/grass 19 \r\n17 27 tiles/sets/grass 19 \r\n18 27 tiles/sets/grass 19 \r\n19 27 tiles/sets/grass 19 \r\n20 27 tiles/sets/grass 19 \r\n21 27 tiles/sets/grass 19 \r\n22 27 tiles/sets/grass 19 \r\n23 27 tiles/sets/grass 19 \r\n24 27 tiles/sets/grass 19 \r\n25 27 tiles/sets/grass 19 \r\n26 27 tiles/sets/grass 19 \r\n27 27 tiles/sets/grass 19 \r\n28 27 tiles/sets/grass 19 \r\n29 27 tiles/sets/grass 51 \r\n30 27 tiles/sets/grass 6 \r\n31 27 tiles/sets/grass 19 \r\n32 27 tiles/sets/grass 19 \r\n33 27 tiles/sets/grass 19 \r\n34 27 tiles/sets/grass 19 \r\n35 27 tiles/sets/grass 51 \r\n36 27 tiles/sets/grass 6 \r\n37 27 tiles/sets/grass 19 \r\n38 27 tiles/sets/grass 19 \r\n39 27 tiles/sets/grass 19 \r\n40 27 tiles/sets/grass 19 \r\n41 27 tiles/sets/grass 19 \r\n42 27 tiles/sets/grass 19 \r\n43 27 tiles/sets/grass 19 \r\n44 27 tiles/sets/grass 19 \r\n45 27 tiles/sets/grass 19 \r\n46 27 tiles/sets/grass 19 \r\n47 27 tiles/sets/grass 19 \r\n48 27 tiles/sets/grass 19 \r\n49 27 tiles/sets/grass 19 \r\n50 27 tiles/sets/grass 17 \r\n50 26 tiles/sets/grass 32 \r\n49 26 tiles/sets/grass 49 \r\n48 26 tiles/sets/grass 49 \r\n47 26 tiles/sets/grass 49 \r\n46 26 tiles/sets/grass 49 \r\n45 26 tiles/sets/grass 49 \r\n44 26 tiles/sets/grass 49 \r\n43 26 tiles/sets/grass 49 \r\n42 26 tiles/sets/grass 49 \r\n41 26 tiles/sets/grass 49 \r\n40 26 tiles/sets/grass 49 \r\n39 26 tiles/sets/grass 49 \r\n38 26 tiles/sets/grass 49 \r\n37 26 tiles/sets/grass 49 \r\n36 26 tiles/sets/grass 49 \r\n35 26 tiles/sets/grass 49 \r\n34 26 tiles/sets/grass 49 \r\n33 26 tiles/sets/grass 49 \r\n32 26 tiles/sets/grass 49 \r\n31 26 tiles/sets/grass 49 \r\n30 26 tiles/sets/grass 49 \r\n29 26 tiles/sets/grass 49 \r\n28 26 tiles/sets/grass 49 \r\n27 26 tiles/sets/grass 49 \r\n26 26 tiles/sets/grass 49 \r\n25 26 tiles/sets/grass 49 \r\n24 26 tiles/sets/grass 49 \r\n23 26 tiles/sets/grass 49 \r\n22 26 tiles/sets/grass 49 \r\n21 26 tiles/sets/grass 49 \r\n20 26 tiles/sets/grass 49 \r\n19 26 tiles/sets/grass 49 \r\n15 26 tiles/sets/grass 49 \r\n14 26 tiles/sets/grass 49 \r\n13 26 tiles/sets/grass 47 \r\n17 26 tiles/sets/grass 49 \r\n18 26 tiles/sets/grass 49 \r\n16 26 tiles/sets/grass 49 \r\n29 28 tiles/sets/grass 4 \r\n29 29 tiles/sets/grass 4 \r\n29 30 tiles/sets/grass 4 \r\n29 31 tiles/sets/grass 2 \r\n30 31 tiles/sets/grass 17 \r\n30 30 tiles/sets/grass 34 \r\n30 29 tiles/sets/grass 34 \r\n30 28 tiles/sets/grass 34 \r\n35 28 tiles/sets/grass 4 \r\n35 29 tiles/sets/grass 4 \r\n35 30 tiles/sets/grass 4 \r\n35 31 tiles/sets/grass 4 \r\n35 32 tiles/sets/grass 4 \r\n35 33 tiles/sets/grass 2 \r\n36 33 tiles/sets/grass 17 \r\n36 32 tiles/sets/grass 34 \r\n36 31 tiles/sets/grass 34 \r\n36 30 tiles/sets/grass 34 \r\n36 29 tiles/sets/grass 34 \r\n36 28 tiles/sets/grass 34 \r\n29 35 tiles/sets/grass 47 \r\n30 35 tiles/sets/grass 49 \r\n30 36 tiles/sets/grass 19 \r\n29 36 tiles/sets/grass 2 \r\n22 33 tiles/sets/grass 19 \r\n21 33 tiles/sets/grass 19 \r\n20 33 tiles/sets/grass 19 \r\n19 33 tiles/sets/grass 19 \r\n18 33 tiles/sets/grass 19 \r\n17 33 tiles/sets/grass 2 \r\n17 32 tiles/sets/grass 47 \r\n18 32 tiles/sets/grass 49 \r\n19 32 tiles/sets/grass 49 \r\n20 32 tiles/sets/grass 49 \r\n21 32 tiles/sets/grass 49 \r\n22 32 tiles/sets/grass 49 \r\n23 33 tiles/sets/malice 17 \r\n23 32 tiles/sets/malice 32 \r\n31 36 tiles/sets/malice 17 \r\n31 35 tiles/sets/malice 32 \r\n4 16 tiles/sets/grass 5 \r\n3 16 tiles/sets/grass 5 \r\n2 16 tiles/sets/grass 4 \r\n3 15 tiles/sets/grass 49 \r\n2 15 tiles/sets/grass 47 \r\n1 17 tiles/sets/stone 56 \r\n2 17 tiles/sets/stone 36 \r\n3 17 tiles/sets/stone 5 \r\n4 17 tiles/sets/stone 5 \r\n3 18 tiles/sets/stone 19 \r\n2 18 tiles/sets/stone 19 \r\n1 18 tiles/sets/stone 2 \r\n4 18 tiles/sets/stone 19 \r\n5 18 tiles/sets/stone 19 \r\n6 18 tiles/sets/stone 19 \r\n7 18 tiles/sets/stone 19 \r\n8 18 tiles/sets/stone 19 \r\n9 18 tiles/sets/stone 19 \r\n9 17 tiles/sets/stone 21 \r\n8 17 tiles/sets/stone 5 \r\n7 17 tiles/sets/stone 5 \r\n6 17 tiles/sets/stone 5 \r\n5 17 tiles/sets/stone 5 \r\n0 17 tiles/sets/stone 46 \r\n10 17 tiles/sets/stone 49 \r\n11 17 tiles/sets/stone 49 \r\n12 17 tiles/sets/stone 49 \r\n13 17 tiles/sets/stone 49 \r\n14 17 tiles/sets/stone 49 \r\n15 17 tiles/sets/stone 49 \r\n13 18 tiles/sets/stone 19 \r\n11 18 tiles/sets/stone 19 \r\n10 18 tiles/sets/stone 19 \r\n14 18 tiles/sets/stone 19 \r\n16 18 tiles/sets/stone 19 \r\n17 18 tiles/sets/stone 17 \r\n17 17 tiles/sets/stone 57 \r\n18 17 tiles/sets/stone 18 \r\n16 17 tiles/sets/stone 49 \r\n15 18 tiles/sets/stone 19 \r\n19 17 tiles/sets/stone 16 \r\n12 18 tiles/sets/stone 19 \r\n@background_tiles\r\n14 21 tiles/sets/stone 19 \r\n13 21 tiles/sets/stone 2 \r\n11 19 tiles/sets/stone 51 \r\n15 21 tiles/sets/stone 19 \r\n13 20 tiles/sets/stone 51 \r\n12 20 tiles/sets/stone 19 \r\n11 20 tiles/sets/stone 2 \r\n10 19 tiles/sets/stone 2 \r\n8 18 tiles/sets/stone 46 \r\n9 18 tiles/sets/stone 27 \r\n10 18 tiles/sets/stone 51 \r\n16 21 tiles/sets/stone 17 \r\n15 20 tiles/sets/stone 5 \r\n14 20 tiles/sets/stone 5 \r\n13 19 tiles/sets/stone 5 \r\n12 19 tiles/sets/stone 5 \r\n11 18 tiles/sets/stone 5 \r\n9 16 tiles/sets/stone 4 \r\n14 19 tiles/sets/stone 5 \r\n9 17 tiles/sets/stone 4 \r\n10 17 tiles/sets/stone 5 \r\n11 17 tiles/sets/stone 5 \r\n12 18 tiles/sets/stone 5 \r\n10 16 tiles/sets/stone 5 \r\n12 17 tiles/sets/stone 5 \r\n11 16 tiles/sets/stone 5 \r\n9 15 tiles/sets/stone 47 \r\n10 15 tiles/sets/stone 49 \r\n26 19 tiles/sets/stone 19 \r\n19 18 tiles/sets/stone 5 \r\n21 17 tiles/sets/stone 5 \r\n20 18 tiles/sets/stone 5 \r\n23 19 tiles/sets/stone 19 \r\n25 19 tiles/sets/stone 19 \r\n24 19 tiles/sets/stone 19 \r\n23 18 tiles/sets/stone 5 \r\n22 18 tiles/sets/stone 5 \r\n21 18 tiles/sets/stone 5 \r\n19 16 tiles/sets/stone 5 \r\n22 17 tiles/sets/stone 5 \r\n24 18 tiles/sets/stone 5 \r\n25 18 tiles/sets/stone 5 \r\n23 17 tiles/sets/stone 5 \r\n18 15 tiles/sets/stone 5 \r\n21 16 tiles/sets/stone 5 \r\n19 15 tiles/sets/stone 5 \r\n17 14 tiles/sets/stone 5 \r\n28 18 tiles/sets/stone 32 \r\n27 19 tiles/sets/stone 19 \r\n30 19 tiles/sets/stone 16 \r\n29 19 tiles/sets/stone 18 \r\n28 19 tiles/sets/stone 26 \r\n18 14 tiles/sets/stone 5 \r\n17 13 tiles/sets/stone 21 \r\n22 16 tiles/sets/stone 5 \r\n24 17 tiles/sets/stone 5 \r\n23 16 tiles/sets/stone 5 \r\n21 15 tiles/sets/stone 5 \r\n20 13 tiles/sets/stone 32 \r\n26 16 tiles/sets/stone 32 \r\n19 13 tiles/sets/stone 49 \r\n20 14 tiles/sets/stone 21 \r\n22 15 tiles/sets/stone 5 \r\n23 15 tiles/sets/stone 21 \r\n24 16 tiles/sets/stone 21 \r\n25 17 tiles/sets/stone 5 \r\n26 18 tiles/sets/stone 5 \r\n27 18 tiles/sets/stone 21 \r\n27 17 tiles/sets/stone 32 \r\n26 17 tiles/sets/stone 21 \r\n25 16 tiles/sets/stone 49 \r\n24 15 tiles/sets/stone 32 \r\n21 14 tiles/sets/stone 49 \r\n22 14 tiles/sets/stone 49 \r\n23 14 tiles/sets/stone 32 \r\n17 12 tiles/sets/stone 32 \r\n18 13 tiles/sets/stone 49 \r\n19 14 tiles/sets/stone 5 \r\n20 15 tiles/sets/stone 5 \r\n20 16 tiles/sets/stone 5 \r\n20 17 tiles/sets/stone 5 \r\n19 17 tiles/sets/stone 5 \r\n17 15 tiles/sets/stone 5 \r\n18 16 tiles/sets/stone 5 \r\n12 15 tiles/sets/stone 5 \r\n12 14 tiles/sets/stone 5 \r\n18 17 tiles/sets/stone 5 \r\n18 18 tiles/sets/stone 5 \r\n15 19 tiles/sets/stone 5 \r\n14 17 tiles/sets/stone 5 \r\n13 16 tiles/sets/stone 5 \r\n15 18 tiles/sets/stone 5 \r\n14 18 tiles/sets/stone 5 \r\n13 18 tiles/sets/stone 5 \r\n13 17 tiles/sets/stone 5 \r\n12 16 tiles/sets/stone 5 \r\n11 15 tiles/sets/stone 36 \r\n11 14 tiles/sets/stone 4 \r\n11 13 tiles/sets/stone 4 \r\n11 12 tiles/sets/stone 47 \r\n16 14 tiles/sets/stone 5 \r\n14 16 tiles/sets/stone 5 \r\n13 15 tiles/sets/stone 5 \r\n15 12 tiles/sets/stone 49 \r\n16 12 tiles/sets/stone 49 \r\n16 13 tiles/sets/stone 5 \r\n15 13 tiles/sets/stone 5 \r\n16 20 tiles/sets/grass 6 \r\n15 17 tiles/sets/grass 5 \r\n16 17 tiles/sets/grass 5 \r\n16 18 tiles/sets/grass 5 \r\n16 19 tiles/sets/grass 5 \r\n17 20 tiles/sets/grass 19 \r\n17 19 tiles/sets/grass 5 \r\n17 18 tiles/sets/grass 5 \r\n17 17 tiles/sets/grass 5 \r\n17 16 tiles/sets/grass 5 \r\n16 16 tiles/sets/grass 5 \r\n15 16 tiles/sets/grass 5 \r\n14 15 tiles/sets/grass 5 \r\n15 14 tiles/sets/grass 5 \r\n16 15 tiles/sets/grass 5 \r\n15 15 tiles/sets/grass 5 \r\n14 14 tiles/sets/grass 5 \r\n13 14 tiles/sets/grass 5 \r\n12 13 tiles/sets/grass 5 \r\n12 12 tiles/sets/grass 49 \r\n13 13 tiles/sets/grass 5 \r\n13 11 tiles/sets/grass 31 \r\n13 12 tiles/sets/grass 22 \r\n14 12 tiles/sets/grass 49 \r\n14 13 tiles/sets/grass 5 \r\n18 20 tiles/sets/grass 19 \r\n19 20 tiles/sets/grass 19 \r\n20 20 tiles/sets/grass 19 \r\n21 20 tiles/sets/grass 19 \r\n22 20 tiles/sets/grass 17 \r\n22 19 tiles/sets/grass 6 \r\n21 19 tiles/sets/grass 5 \r\n20 19 tiles/sets/grass 5 \r\n19 19 tiles/sets/grass 5 \r\n18 19 tiles/sets/grass 5 \r\n5 19 tiles/prop 0 malice_h \r\n@wiring_tiles\r\n8 26 tiles/wiring/wires/actuator 0 \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/maps/test.map b/maps/test.map
--- a/maps/test.map	(revision da44e287090b74d167d943ff8a58b2418f0de4c1)
+++ b/maps/test.map	(date 1708671966616)
@@ -371,6 +371,22 @@
 15 18 tiles/sets/stone 19 
 19 17 tiles/sets/stone 16 
 12 18 tiles/sets/stone 19 
+19 41 tiles/sets/water 2 
+19 40 tiles/sets/water 4 
+19 39 tiles/sets/water 4 
+19 38 tiles/sets/water 47 
+20 38 tiles/sets/water 49 
+21 38 tiles/sets/water 49 
+22 38 tiles/sets/water 32 
+22 39 tiles/sets/water 34 
+22 40 tiles/sets/water 34 
+22 41 tiles/sets/water 17 
+21 41 tiles/sets/water 19 
+20 41 tiles/sets/water 19 
+20 40 tiles/sets/water 5 
+21 39 tiles/sets/water 5 
+21 40 tiles/sets/water 5 
+20 39 tiles/sets/water 5 
 @background_tiles
 14 21 tiles/sets/stone 19 
 13 21 tiles/sets/stone 2 
@@ -515,5 +531,26 @@
 19 19 tiles/sets/grass 5 
 18 19 tiles/sets/grass 5 
 5 19 tiles/prop 0 malice_h 
+13 22 tiles/prop 0 fallen_h 
 @wiring_tiles
-8 26 tiles/wiring/wires/actuator 0 
+8 26 tiles/wiring/actuator 0 
+6 26 tiles/wiring/wires/red_wire 59 
+7 28 tiles/wiring/wires/red_wire 18 
+6 28 tiles/wiring/wires/red_wire 14 
+6 27 tiles/wiring/wires/red_wire 3 
+9 28 tiles/wiring/wires/green_wire 46 
+10 28 tiles/wiring/wires/green_wire 29 
+10 27 tiles/wiring/wires/green_wire 31 
+10 25 tiles/wiring/wires/yellow_wire 3 
+10 24 tiles/wiring/wires/yellow_wire 44 
+9 24 tiles/wiring/wires/yellow_wire 18 
+6 25 tiles/wiring/wires/blue_wire 1 
+6 24 tiles/wiring/wires/blue_wire 59 
+7 24 tiles/wiring/wires/blue_wire 16 
+10 26 tiles/wiring/wires/yellow_wire 29 
+7 26 tiles/wiring/wires/red_wire 18 
+8 28 tiles/wiring/wires/red_wire 29 
+8 27 tiles/wiring/wires/red_wire 3 
+8 25 tiles/wiring/wires/yellow_wire 3 
+8 24 tiles/wiring/wires/yellow_wire 59 
+9 26 tiles/wiring/wires/yellow_wire 18 
Index: core/src/com/sab/littleh/game/level/Level.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sab.littleh.game.level;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.Input;\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.math.MathUtils;\r\nimport com.badlogic.gdx.math.Matrix3;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.sab.littleh.LittleH;\r\nimport com.sab.littleh.controls.Controls;\r\nimport com.sab.littleh.controls.ControlInput;\r\nimport com.sab.littleh.game.entity.Entity;\r\nimport com.sab.littleh.game.entity.GameObject;\r\nimport com.sab.littleh.game.entity.Particle;\r\nimport com.sab.littleh.game.entity.enemy.Enemy;\r\nimport com.sab.littleh.game.entity.player.Player;\r\nimport com.sab.littleh.game.entity.player.powerups.GunMode;\r\nimport com.sab.littleh.game.tile.Tile;\r\nimport com.sab.littleh.mainmenu.LevelEditorMenu;\r\nimport com.sab.littleh.mainmenu.MainMenu;\r\nimport com.sab.littleh.settings.Settings;\r\nimport com.sab.littleh.util.*;\r\nimport com.sab.littleh.util.Graphics;\r\nimport com.sab.littleh.util.dialogue.Dialogue;\r\nimport com.sab.littleh.util.dialogue.Dialogues;\r\nimport com.sab.littleh.util.sab_format.SabData;\r\nimport com.sab.littleh.util.sab_format.SabValue;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class Level {\r\n    public static final String[] backgrounds = {\r\n            \"mountains\",\r\n            \"cold_mountains\",\r\n            \"desert\",\r\n            \"cave\",\r\n            \"tundra\",\r\n            \"hyperspace\"\r\n    };\r\n    public static final Color[] themeTints = {\r\n            new Color(0.7f, 0.4f, 0.0f, 0.05f),\r\n            new Color(0.3f, 0.2f, 0.9f, 0.12f),\r\n            new Color(0.8f, 0.6f, 0.0f, 0.1f),\r\n            new Color(0.1f, 0.1f, 0.2f, 0.24f),\r\n            new Color(0.0f, 0.4f, 0.8f, 0.1f),\r\n            new Color(0.7f, 0.0f, 0.65f, 0.04f),\r\n    };\r\n    public static Level currentLevel;\r\n    public final SabData mapData;\r\n    public HashMap<String, MapLayer> mapLayers;\r\n//    public List<Tile> backgroundTiles;\r\n//    public List<Tile> allTiles;\r\n//    public List<Tile> checkpointSavedTiles;\r\n//    public List<Tile> notifiableTiles;\r\n//    public List<Tile> checkpointState;\r\n//    public List<Tile> updatableTiles;\r\n//    public List<List<Tile>> tileMap;\r\n//    public List<List<Tile>> backgroundMap;\r\n\r\n    public Player playerBackup;\r\n    public Player player;\r\n    public int timeLimit;\r\n    public int gameTick;\r\n    private Tile testTile;\r\n    private boolean levelEnded;\r\n    private boolean tilesDesynced;\r\n    private final List<Particle> particles;\r\n    private final List<Enemy> enemies;\r\n    private final List<GameObject> gameObjects;\r\n    private String background;\r\n    private Point startPos;\r\n    private Popup popup;\r\n    private ParallaxBackground parallaxBackground;\r\n    private long currentTime;\r\n    private long checkedTime;\r\n    private Dialogue currentDialogue;\r\n    private boolean ignoreDialogue;\r\n\r\n    public Level(SabData mapData) {\r\n        mapLayers = new HashMap<>();\r\n        particles = new ArrayList<>();\r\n        enemies = new ArrayList<>();\r\n        gameObjects = new ArrayList<>();\r\n        this.mapData = mapData;\r\n        background = mapData.getRawValue(\"background\");\r\n        timeLimit = mapData.getValue(\"time_limit\").asInt();\r\n        if (mapData.hasValue(\"movement_options\")) {\r\n            String value = mapData.getRawValue(\"movement_options\");\r\n            mapData.remove(\"movement_options\");\r\n            String[] values = value.replace(\",\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").split(\" \");\r\n            String[] options = {\r\n                    \"double_jumping\",\r\n                    \"wall_sliding\",\r\n                    \"crouching\"\r\n            };\r\n            for (int i = 0; i < 3; i++) {\r\n                mapData.insertValue(options[i], new SabValue(values[i]));\r\n            }\r\n        }\r\n        currentLevel = this;\r\n    }\r\n\r\n    public void init() {\r\n        parallaxBackground = new ParallaxBackground(background, mapData.getValue(\"bonus_background\"));\r\n    }\r\n\r\n    public void startGame(Point startPos) {\r\n        GunMode.bullets.clear();\r\n        enemies.clear();\r\n        levelEnded = true;\r\n        Dialogues.resetDialogues();\r\n        player = new Player(new Point(startPos.x, startPos.y));\r\n        playerBackup = player;\r\n        LittleH.program.dynamicCamera.setPosition(player.getCenter());\r\n        desyncTiles();\r\n        SoundEngine.playMusic(\"areas/\" + mapData.getRawValue(\"background\") + \"_song.ogg\");\r\n        gameTick = 0;\r\n        timeLimit = mapData.getValue(\"time_limit\").asInt();\r\n        this.startPos = startPos;\r\n        currentTime = 0;\r\n        checkedTime = currentTime;\r\n        Cursors.switchCursor(\"none\");\r\n        notify(\"game_start\", startPos.x, startPos.y);\r\n    }\r\n\r\n    public void removeTile(String layer, int x, int y) {\r\n        Tile toRemove = getTileAt(layer, x, y);\r\n        if (toRemove != null) {\r\n            while (mapLayers.get(layer).allTiles.contains(toRemove))\r\n                mapLayers.get(layer).allTiles.remove(toRemove);\r\n        }\r\n    }\r\n\r\n    public void changeBackground(String background) {\r\n        mapData.insertValue(\"background\", background);\r\n        this.background = background;\r\n        parallaxBackground = new ParallaxBackground(background);\r\n    }\r\n\r\n    public void startPopup(String text, int length) {\r\n        popup = new Popup(text, length);\r\n    }\r\n\r\n    public void addTile(String layer, Tile tile) {\r\n        mapLayers.get(layer).allTiles.add(tile);\r\n    }\r\n\r\n    public void addTileToMap(String layer, Tile tile) {\r\n        mapLayers.get(layer).tileMap.get(tile.x).set(tile.y, tile);\r\n    }\r\n\r\n    public void addTiles(List<Tile> tiles, int levelWidth, int levelHeight) {\r\n        MapLayer newLayer = new MapLayer();\r\n        mapLayers.put(\"normal\", newLayer);\r\n        newLayer.tileMap = new ArrayList<>(levelWidth);\r\n        for (int i = 0; i < levelWidth; i++) {\r\n            newLayer.tileMap.add(i, new ArrayList<>(levelHeight));\r\n            for (int j = 0; j < levelHeight; j++) {\r\n                newLayer.tileMap.get(i).add(null);\r\n            }\r\n        }\r\n        newLayer.allTiles.addAll(tiles);\r\n        for (Tile tile : newLayer.allTiles) {\r\n            newLayer.tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n    }\r\n\r\n    public void addBackground(List<Tile> tiles) {\r\n        MapLayer newLayer = new MapLayer();\r\n        mapLayers.put(\"background\", newLayer);\r\n        newLayer.tileMap = new ArrayList<>(getWidth());\r\n        for (int i = 0; i < getWidth(); i++) {\r\n            newLayer.tileMap.add(i, new ArrayList<>(getHeight()));\r\n            for (int j = 0; j < getHeight(); j++) {\r\n                newLayer.tileMap.get(i).add(null);\r\n            }\r\n        }\r\n        newLayer.allTiles.addAll(tiles);\r\n        for (Tile tile : newLayer.allTiles) {\r\n            newLayer.tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n    }\r\n\r\n    public void addWiring(List<Tile> tiles) {\r\n        MapLayer newLayer = new MapLayer();\r\n        mapLayers.put(\"wiring\", newLayer);\r\n        newLayer.tileMap = new ArrayList<>(getWidth());\r\n        for (int i = 0; i < getWidth(); i++) {\r\n            newLayer.tileMap.add(i, new ArrayList<>(getHeight()));\r\n            for (int j = 0; j < getHeight(); j++) {\r\n                newLayer.tileMap.get(i).add(null);\r\n            }\r\n        }\r\n        newLayer.allTiles.addAll(tiles);\r\n        for (Tile tile : newLayer.allTiles) {\r\n            newLayer.tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n    }\r\n\r\n    public void mouseUp() {\r\n        if (currentDialogue != null) {\r\n            currentDialogue.mouseUp();\r\n        }\r\n    }\r\n\r\n    public void enterPressed() {\r\n        if (currentDialogue != null) {\r\n            if (currentDialogue.finished()) {\r\n                currentDialogue = null;\r\n            } else if (currentDialogue.finishedBlock()) {\r\n                currentDialogue.nextBlock();\r\n            } else {\r\n                currentDialogue.toEnd();\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean escapePressed() {\r\n        if (currentDialogue != null) {\r\n            currentDialogue = null;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void update() {\r\n        if (inGame()) {\r\n            gameTick++;\r\n\r\n            if (currentDialogue != null) {\r\n                currentDialogue.update();\r\n                if (!currentDialogue.finishedBlock()) {\r\n                    currentDialogue.next();\r\n                }\r\n                ControlInput.localControls.releaseControl(Controls.UP);\r\n                ControlInput.localControls.releaseControl(Controls.DOWN);\r\n                ControlInput.localControls.releaseControl(Controls.LEFT);\r\n                ControlInput.localControls.releaseControl(Controls.RIGHT);\r\n                ControlInput.localControls.releaseControl(Controls.JUMP);\r\n                player.update(this);\r\n                particles.forEach(Particle::update);\r\n                particles.removeIf(particle -> !particle.alive);\r\n                return;\r\n            }\r\n\r\n            if (player.startSpeedrunTimer() && !player.win) {\r\n                if (player.ticksAlive % 60 == 0) {\r\n                    timeLimit--;\r\n                    if (timeLimit == 0) {\r\n                        player.trueKill();\r\n                        timeLimit = mapData.getValue(\"time_limit\").asInt();\r\n                    }\r\n                }\r\n\r\n                currentTime += 16 + (gameTick % 3 == 0 ? 0 : 1);\r\n            }\r\n        }\r\n\r\n        if (player != null) {\r\n            if (!player.warpingOut())\r\n                LittleH.program.dynamicCamera.targetPosition = new Vector2(player.getCenterX(), player.y + player.height / 2);\r\n            if (Gdx.input.isKeyPressed(Input.Keys.SHIFT_LEFT) && mapData.getValue(\"look_around\").asBool()) {\r\n                if (Cursors.cursorIs(\"none\")) {\r\n                    Gdx.input.setCursorPosition(-MainMenu.relZeroX(), -MainMenu.relZeroY());\r\n                    Cursors.switchCursor(\"magnifier\");\r\n                }\r\n                LittleH.program.dynamicCamera.setPosition(player.getCenter());\r\n                LittleH.program.dynamicCamera.update();\r\n                LittleH.program.dynamicCamera.setPosition(MouseUtil.getDynamicMousePosition());\r\n            } else {\r\n                if (Cursors.cursorIs(\"magnifier\")) {\r\n                    Gdx.input.setCursorPosition(-MainMenu.relZeroX(), -MainMenu.relZeroY());\r\n                    Cursors.switchCursor(\"none\");\r\n                }\r\n            }\r\n            float cameraScalar = Math.min(2400f / LittleH.program.getWidth(), 1350f / LittleH.program.getHeight());\r\n            LittleH.program.dynamicCamera.targetZoom = cameraScalar / Settings.localSettings.zoomScalar.asFloat();\r\n            player.update(this);\r\n        }\r\n\r\n        for (GameObject gameObject : gameObjects) {\r\n            gameObject.update(this);\r\n        }\r\n\r\n        for (Particle particle : particles) {\r\n            particle.update();\r\n        }\r\n\r\n        for (Enemy enemy : enemies) {\r\n            enemy.update(this);\r\n        }\r\n\r\n        enemies.removeIf(enemy -> {\r\n            if (enemy.remove) {\r\n                enemy.getParent().removeTag(\"enemy\");\r\n            }\r\n            return enemy.remove || enemy.despawn;\r\n        });\r\n        gameObjects.removeIf(gameObject -> gameObject.remove);\r\n\r\n        for (Tile tile : getBaseLayer().updatableTiles) {\r\n            Vector2 tileCenter = new Vector2(tile.x * 64 + 32, tile.y * 64 + 32);\r\n            if (player.getCenter().dst2(tileCenter) < 1420 * 1420) {\r\n                tile.update(this);\r\n            }\r\n        }\r\n        particles.removeIf(particle -> !particle.alive);\r\n    }\r\n\r\n    public MapLayer getBaseLayer() {\r\n        return mapLayers.get(\"normal\");\r\n    }\r\n\r\n    public MapLayer getBackgroundLayer() {\r\n        return mapLayers.get(\"background\");\r\n    }\r\n\r\n    public MapLayer getWiringLayer() {\r\n        return mapLayers.get(\"wiring\");\r\n    }\r\n\r\n    public void inGameRemoveTile(Tile tile) {\r\n        if (tilesDesynced) {\r\n            if (tile.hasTag(\"checkpoint_saved\")) {\r\n                getBaseLayer().checkpointSavedTiles.remove(tile);\r\n            }\r\n            if (tile.hasTag(\"notifiable\")) {\r\n                getBaseLayer().notifiableTiles.remove(tile);\r\n            }\r\n            if (tile.hasTag(\"update\")) {\r\n                getBaseLayer().updatableTiles.remove(tile);\r\n            }\r\n            getBaseLayer().tileMap.get(tile.x).set(tile.y, null);\r\n        } else {\r\n            throw new IllegalStateException(\"The Level must be desynced before calling this to avoid the permanent deletion of tiles\");\r\n        }\r\n    }\r\n\r\n    public void inGameAddTile(Tile tile) {\r\n        if (tilesDesynced) {\r\n            if (tile.hasTag(\"checkpoint_saved\")) {\r\n                getBaseLayer().checkpointSavedTiles.add(tile);\r\n            }\r\n            if (tile.hasTag(\"notifiable\") || tile.hasTag(\"notify\")) {\r\n                getBaseLayer().notifiableTiles.add(tile);\r\n            }\r\n            if (tile.hasTag(\"update\")) {\r\n                getBaseLayer().updatableTiles.add(tile);\r\n            }\r\n            getBaseLayer().tileMap.get(tile.x).set(tile.y, tile);\r\n        } else {\r\n            throw new IllegalStateException(\"The Level must be desynced before calling this to avoid the permanent alteration of tiles\");\r\n        }\r\n    }\r\n\r\n    public boolean inGame() {\r\n        return player != null;\r\n    }\r\n\r\n    public int getcheckpointSavedTileCount(String tag, int tileType) {\r\n        int count = 0;\r\n        for (Tile tile : getBaseLayer().checkpointSavedTiles) {\r\n            if (tile.hasTag(tag) && tile.tileType == tileType)\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    public int getWidth() {\r\n        return getBaseLayer().tileMap.size();\r\n    }\r\n\r\n    public void suicide() {\r\n        if (player != null)\r\n            player.kill();\r\n    }\r\n\r\n    public int getHeight() {\r\n        return getBaseLayer().tileMap.get(0).size();\r\n    }\r\n\r\n    public Tile getTileAt(String layer, int x, int y) {\r\n        if (x >= 0 && y >= 0 && x < getWidth() && y < getHeight()) return mapLayers.get(layer).tileMap.get(x).get(y);\r\n        return null;\r\n    }\r\n\r\n    public void endGame() {\r\n        GunMode.bullets.clear();\r\n        currentDialogue = null;\r\n        player = null;\r\n        levelEnded = true;\r\n        enemies.clear();\r\n        particles.clear();\r\n        gameObjects.clear();\r\n        syncTiles();\r\n        if (LittleH.program.getMenu() instanceof LevelEditorMenu) {\r\n            ((LevelEditorMenu) LittleH.program.getMenu()).resetToolCursor();\r\n            SoundEngine.playMusic(Settings.localSettings.buildingSong.value);\r\n        }\r\n    }\r\n\r\n    public void resetToCheckpointState() {\r\n        GunMode.bullets.clear();\r\n        enemies.clear();\r\n        getBaseLayer().checkpointSavedTiles.clear();\r\n        getBaseLayer().notifiableTiles.removeIf(tile -> tile.hasTag(\"checkpoint_saved\"));\r\n        getBaseLayer().updatableTiles.removeIf(tile -> tile.hasTag(\"checkpoint_saved\"));\r\n        for (Tile tile : getBaseLayer().checkpointState) {\r\n            Tile copy = tile.copy();\r\n            if (tile.hasTag(\"notifiable\") || tile.hasTag(\"notify\"))\r\n                getBaseLayer().notifiableTiles.add(copy);\r\n            if (tile.hasTag(\"update\")) {\r\n                getBaseLayer().updatableTiles.add(copy);\r\n            }\r\n            getBaseLayer().checkpointSavedTiles.add(copy);\r\n            addTileToMap(\"normal\", copy);\r\n        }\r\n    }\r\n\r\n    public void saveCheckpointState() {\r\n        getBaseLayer().checkpointState.clear();\r\n        for (Tile tile : getBaseLayer().checkpointSavedTiles) {\r\n            getBaseLayer().checkpointState.add(tile.copy());\r\n        }\r\n    }\r\n\r\n    public void syncTiles() {\r\n        enemies.clear();\r\n        getBaseLayer().checkpointSavedTiles.clear();\r\n        getBaseLayer().notifiableTiles.clear();\r\n        getBaseLayer().updatableTiles.clear();\r\n        for (Tile tile : getBaseLayer().allTiles) {\r\n            tile.setTags();\r\n            getBaseLayer().tileMap.get(tile.x).set(tile.y, tile);\r\n        }\r\n        tilesDesynced = false;\r\n    }\r\n\r\n    public void addParticle(Particle particle) {\r\n        particles.add(particle);\r\n    }\r\n\r\n    public void addEnemy(Enemy enemy) {\r\n        enemies.add(enemy);\r\n    }\r\n\r\n    public void addMiscGameObject(GameObject gameObject) {\r\n        gameObjects.add(gameObject);\r\n    }\r\n\r\n    public void desyncTiles() {\r\n        MapLayer mapLayer = getBaseLayer();\r\n        mapLayer.checkpointSavedTiles.clear();\r\n        mapLayer.notifiableTiles.clear();\r\n        mapLayer.updatableTiles.clear();\r\n        for (Tile tile : mapLayer.allTiles) {\r\n            Tile copy = tile.copy();\r\n            mapLayer.tileMap.get(copy.x).set(copy.y, copy);\r\n            if (tile.hasTag(\"checkpoint_saved\")) {\r\n                mapLayer.checkpointSavedTiles.add(copy);\r\n            }\r\n            if (tile.hasTag(\"notifiable\") || tile.hasTag(\"notify\")) {\r\n                mapLayer.notifiableTiles.add(copy);\r\n            }\r\n            if (tile.hasTag(\"update\")) {\r\n                mapLayer.updatableTiles.add(copy);\r\n            }\r\n        }\r\n        mapLayer = getBackgroundLayer();\r\n        mapLayer.notifiableTiles.clear();\r\n        mapLayer.updatableTiles.clear();\r\n        for (Tile tile : mapLayer.allTiles) {\r\n            if (tile.hasTag(\"ignore_background\")) {\r\n                Tile copy = tile.copy();\r\n                if (tile.hasTag(\"update\")) {\r\n                    mapLayer.updatableTiles.add(copy);\r\n                }\r\n                if (tile.hasTag(\"notifiable\") || tile.hasTag(\"notify\")) {\r\n                    mapLayer.notifiableTiles.add(copy);\r\n                }\r\n            }\r\n        }\r\n        saveCheckpointState();\r\n        tilesDesynced = true;\r\n    }\r\n\r\n    public void renderBackground(Graphics g) {\r\n        parallaxBackground.render(g);\r\n    }\r\n\r\n    public void render(Graphics g) {\r\n        render(g, false, false);\r\n    }\r\n\r\n    public void render(Graphics g, boolean backgroundPriority, boolean wiringMode) {\r\n        List<Point> toDrawGrid = new ArrayList<>();\r\n        if (wiringMode && !inGame()) {\r\n            toDrawGrid = renderWiring(g, backgroundPriority);\r\n        } else {\r\n            Vector2 renderAround = g.getCameraPosition();\r\n            int centerX = (int) (renderAround.x / 64);\r\n            int centerY = (int) (renderAround.y / 64);\r\n            int screenTileWidth = (int) Math.ceil(LittleH.program.getWidth() / 64f * LittleH.program.dynamicCamera.zoom + 4);\r\n            int screenTileHeight = (int) Math.ceil(LittleH.program.getHeight() / 64f * LittleH.program.dynamicCamera.zoom + 4);\r\n            int startX = centerX - screenTileWidth / 2;\r\n            int startY = centerY - screenTileHeight / 2;\r\n            int endX = startX + screenTileWidth;\r\n            int endY = startY + screenTileHeight;\r\n\r\n            List<Tile> backgroundPostRenders = new ArrayList<>();\r\n\r\n            g.resetTint();\r\n            g.resetColor();\r\n\r\n            if (!inGame()) {\r\n                if (backgroundPriority) {\r\n                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n                } else {\r\n                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n                }\r\n            } else {\r\n                g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));\r\n            }\r\n\r\n            // Draw in the back\r\n            for (int i = startX; i < endX; i++) {\r\n                if (i < 0 || i >= getWidth()) continue;\r\n                for (int j = startY; j < endY; j++) {\r\n                    if (j < 0 || j >= getHeight()) continue;\r\n                    if (!inGame()) {\r\n                        Tile tile;\r\n                        if (backgroundPriority) {\r\n                            // Draw foreground behind\r\n                            tile = getTileAt(\"normal\", i, j);\r\n                        } else {\r\n                            // Draw background\r\n                            tile = getTileAt(\"background\", i, j);\r\n                        }\r\n                        if (tile != null) {\r\n                            tile.render(inGame(), g);\r\n                            if (tile.hasTag(\"post_render\"))\r\n                                backgroundPostRenders.add(tile);\r\n                        }\r\n                    } else {\r\n                        // Draw background\r\n                        // Tint multiplies with graphics color to make a darker background\r\n                        Tile tile = getTileAt(\"background\", i, j);\r\n                        if (tile != null) {\r\n                            tile.render(inGame(), g);\r\n                            if (tile.hasTag(\"post_render\"))\r\n                                backgroundPostRenders.add(tile);\r\n                            else if (tile.hasTag(\"special_render\") && player != null)\r\n                                backgroundPostRenders.add(tile);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            g.resetTint();\r\n            g.resetColor();\r\n\r\n            List<Tile> postRenders = new ArrayList<>();\r\n            List<Tile> visibleTiles = new ArrayList<>();\r\n\r\n            backgroundPostRenders = (drawPostRenders(g, backgroundPostRenders, true, true, false));\r\n\r\n            // Draw in the front but behind players\r\n            for (int i = startX; i < endX; i++) {\r\n                if (i < 0 || i >= getWidth()) continue;\r\n                for (int j = startY; j < endY; j++) {\r\n                    if (j < 0 || j >= getHeight()) continue;\r\n                    if (!inGame()) {\r\n                        // Draw background in front\r\n                        if (backgroundPriority) {\r\n                            Tile tile = getTileAt(\"background\", i, j);\r\n                            if (tile != null) {\r\n                                if (!(tile.isSolid() && tile.hasTag(\"tileset\"))) {\r\n                                    tile.render(inGame(), g);\r\n                                } else visibleTiles.add(tile);\r\n                                if (tile.hasTag(\"post_render\"))\r\n                                    postRenders.add(tile);\r\n                            }\r\n                            toDrawGrid.add(new Point(i * 64, j * 64));\r\n                            continue;\r\n                        }\r\n                        // Draw foreground\r\n                        Tile tile = getTileAt(\"normal\", i, j);\r\n                        if (tile != null) {\r\n                            if (!(tile.isSolid() && tile.hasTag(\"tileset\"))) {\r\n                                tile.render(inGame(), g);\r\n                            } else visibleTiles.add(tile);\r\n                            if (tile.hasTag(\"post_render\"))\r\n                                postRenders.add(tile);\r\n                        }\r\n                        toDrawGrid.add(new Point(i * 64, j * 64));\r\n                    } else {\r\n                        // Draw foreground\r\n                        Tile tile = getTileAt(\"normal\", i, j);\r\n                        if (tile != null) {\r\n                            if (!(tile.isSolid() && !tile.ignoreTiling)) tile.render(inGame(), g);\r\n                            else visibleTiles.add(tile);\r\n                            if (tile.hasTag(\"post_render\"))\r\n                                postRenders.add(tile);\r\n                            else if (tile.hasTag(\"special_render\") && player != null)\r\n                                postRenders.add(tile);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            postRenders = drawPostRenders(g, postRenders, false, true, false);\r\n\r\n            enemies.forEach(enemy -> enemy.render(g, this));\r\n            gameObjects.forEach(gameObject -> gameObject.render(g, this));\r\n            if (inGame())\r\n                player.render(g, this);\r\n            particles.forEach(particle -> particle.render(g));\r\n\r\n            if (!inGame()) {\r\n                if (backgroundPriority) {\r\n                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n                } else {\r\n                    g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.5f));\r\n                }\r\n            } else {\r\n                g.setTint(new Color(0.45f, 0.45f, 0.45f, 1f));\r\n            }\r\n\r\n            if (!inGame()) {\r\n                if (backgroundPriority) {\r\n                    g.setTint(new Color(1f, 1f, 1f, 0.65f));\r\n                } else {\r\n                    g.resetTint();\r\n                }\r\n            } else {\r\n                g.resetTint();\r\n            }\r\n\r\n            List<Tile> textRenders = drawPostRenders(g, postRenders, false, false, false);\r\n            textRenders.addAll(drawPostRenders(g, backgroundPostRenders, true, false, false));\r\n\r\n            // Draw in the front\r\n            for (Tile tile : visibleTiles) {\r\n                if (!inGame()) {\r\n                    // Draw background in front\r\n                    if (backgroundPriority) {\r\n                        if (tile != null) {\r\n                            tile.render(inGame(), g);\r\n                            if (tile.hasTag(\"post_render\"))\r\n                                postRenders.add(0, tile);\r\n                        }\r\n                        continue;\r\n                    }\r\n                    // Draw foreground\r\n                    if (tile != null) {\r\n                        tile.render(inGame(), g);\r\n                        if (tile.hasTag(\"post_render\"))\r\n                            postRenders.add(0, tile);\r\n                    }\r\n                } else {\r\n                    // Draw foreground\r\n                    if (tile != null) {\r\n                        tile.render(inGame(), g);\r\n                        if (tile.hasTag(\"post_render\"))\r\n                            postRenders.add(0, tile);\r\n                        else if (tile.hasTag(\"special_render\") && player != null)\r\n                            postRenders.add(0, tile);\r\n                    }\r\n                }\r\n            }\r\n\r\n            drawPostRenders(g, textRenders, false, false, true);\r\n        }\r\n\r\n        g.resetTint();\r\n\r\n        if (Settings.localSettings.grid.value) {\r\n\r\n            float zoom = LittleH.program.dynamicCamera.zoom;\r\n            Color color = new Color(0.875f, 0.875f, 0.875f, Math.max(0, 1 - zoom / 6));\r\n\r\n            if (color.a > 0.01f) {\r\n\r\n                g.startShapeRenderer(color);\r\n\r\n                for (Point point : toDrawGrid) {\r\n                    g.drawRect(point.x, point.y, 64, 64);\r\n                }\r\n\r\n                g.endShapeRenderer();\r\n\r\n            }\r\n        }\r\n\r\n        LittleH.program.useStaticCamera();\r\n\r\n        if (wiringMode) {\r\n            g.drawString(\"WIRING MODE\", LittleH.borderedFont, -MainMenu.relZeroX() - 96, -MainMenu.relZeroY() - 96, LittleH.defaultFontScale * 0.75f, 1);\r\n        } else if (backgroundPriority) {\r\n            g.drawString(\"EDITING BACKGROUND\", LittleH.borderedFont, -MainMenu.relZeroX() - 96, -MainMenu.relZeroY() - 96, LittleH.defaultFontScale * 0.75f, 1);\r\n        }\r\n\r\n        if (inGame())\r\n            player.renderHUD(g, this);\r\n\r\n        if (inGame()) {\r\n            if (gameTick < 240 || Cursors.cursorIs(\"magnifier\")) {\r\n                String[] levelOptions = {\r\n                        \"double_jumping\",\r\n                        \"wall_sliding\",\r\n                        \"crouching\",\r\n                        \"look_around\"\r\n                };\r\n                String[] levelOptionImages = {\r\n                        \"ui/buttons/icons/double_jump.png\",\r\n                        \"ui/buttons/icons/wall_jump.png\",\r\n                        \"ui/buttons/icons/slide.png\",\r\n                        \"ui/buttons/icons/magnifying_glass.png\"\r\n                };\r\n\r\n                g.setColor(new Color(1, 1, 1, Math.max(1, Math.min(240 - gameTick, 120)) / 120f));\r\n                if (Cursors.cursorIs(\"magnifier\")) {\r\n                    g.resetColor();\r\n                }\r\n\r\n                for (int i = 0; i < levelOptions.length; i++) {\r\n                    g.draw(Images.getImage(levelOptionImages[i]),\r\n                            -MainMenu.relZeroX() - levelOptions.length * 80 + i * 80 + 8, MainMenu.relZeroY() + 8, 64, 64);\r\n                    g.draw(Images.getImage(mapData.getValue(levelOptions[i]).asBool() ? \"ui/level_setting_on.png\" : \"ui/level_setting_off.png\"),\r\n                            -MainMenu.relZeroX() - levelOptions.length * 80 + i * 80, MainMenu.relZeroY(), 80, 80);\r\n                }\r\n\r\n                g.resetColor();\r\n            }\r\n        }\r\n\r\n        if (popup != null) {\r\n            popup.render(g);\r\n            if (popup.timeLeft < 0) {\r\n                popup = null;\r\n            }\r\n        }\r\n\r\n        if (currentDialogue != null) {\r\n            currentDialogue.render(g);\r\n        }\r\n    }\r\n\r\n    // Returns tile positioned run through for drawing the grid\r\n    private List<Point> renderWiring(Graphics g, boolean backgroundPriority) {\r\n        Vector2 renderAround = g.getCameraPosition();\r\n        int centerX = (int) (renderAround.x / 64);\r\n        int centerY = (int) (renderAround.y / 64);\r\n        int screenTileWidth = (int) Math.ceil(LittleH.program.getWidth() / 64f * LittleH.program.dynamicCamera.zoom + 4);\r\n        int screenTileHeight = (int) Math.ceil(LittleH.program.getHeight() / 64f * LittleH.program.dynamicCamera.zoom + 4);\r\n        int startX = centerX - screenTileWidth / 2;\r\n        int startY = centerY - screenTileHeight / 2;\r\n        int endX = startX + screenTileWidth;\r\n        int endY = startY + screenTileHeight;\r\n        MapLayer layerToRender = mapLayers.get(backgroundPriority ? \"background\" : \"normal\");\r\n        List<Point> tilesRendered = new ArrayList<>();\r\n        g.setTint(new Color(0.5f, 0.5f, 0.5f, 0.33f));\r\n        for (int i = startX; i < endX; i++) {\r\n            if (i < 0 || i >= getWidth()) continue;\r\n            for (int j = startY; j < endY; j++) {\r\n                if (j < 0 || j >= getHeight()) continue;\r\n                Tile tile = layerToRender.tileMap.get(i).get(j);\r\n                if (tile != null) tile.render(inGame(), g);\r\n                tilesRendered.add(new Point(i, j));\r\n            }\r\n        }\r\n        layerToRender = mapLayers.get(\"wiring\");\r\n        g.resetTint();\r\n        for (int i = startX; i < endX; i++) {\r\n            if (i < 0 || i >= getWidth()) continue;\r\n            for (int j = startY; j < endY; j++) {\r\n                if (j < 0 || j >= getHeight()) continue;\r\n                Tile tile = layerToRender.tileMap.get(i).get(j);\r\n                if (tile != null) tile.render(inGame(), g);\r\n            }\r\n        }\r\n        return tilesRendered;\r\n    }\r\n\r\n    public Tile[][] getNeighbors(int tileX, int tileY, boolean background) {\r\n        // Magic\r\n        Tile[][] neighbors = new Tile[3][3];\r\n        for (int i = tileX - 1; i < tileX + 2; i++) {\r\n            for (int j = tileY - 1; j < tileY + 2; j++) {\r\n                Tile tile = background ? getTileAt(\"background\", i, j) : getTileAt(\"normal\", i, j);\r\n                if (!(i < 0 || j < 0 || i >= getWidth() || j >= getHeight()) && tile != null) {\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = tile;\r\n                } else {\r\n                    neighbors[tileX - i + 1][tileY - j + 1] = null;\r\n                }\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    public List<Tile> drawPostRenders(Graphics g, List<Tile> postRenders, boolean background, boolean dontDrawForcedFront, boolean drawText) {\r\n        List<Tile> leftovers = new ArrayList<>();\r\n        Shaders.waterShader.bind();\r\n        Shaders.waterShader.setUniformf(\"u_time\", gameTick / 60f);\r\n        Shaders.windyShader.bind();\r\n        Shaders.windyShader.setUniformf(\"u_time\", gameTick / 120f);\r\n        Shaders.vineShader.bind();\r\n        Shaders.vineShader.setUniformf(\"u_time\", gameTick / 120f);\r\n        g.resetShader();\r\n\r\n        for (Tile tile : postRenders) {\r\n            if (tile.hasTag(\"render_normal\")) {\r\n                if (tile.hasTag(\"water\")) {\r\n                    if (dontDrawForcedFront) {\r\n                        leftovers.add(tile);\r\n                    } else {\r\n                        Tile[][] neighbors = getNeighbors(tile.x, tile.y, background);\r\n                        Shaders.waterShader.bind();\r\n                        Shaders.waterShader.setUniformMatrix(\"u_neighbors\", new Matrix3(new float[]{\r\n                                neighbors[0][0] != null && neighbors[0][0].isSolid() ? 1 : 0,\r\n                                neighbors[1][0] != null && neighbors[1][0].isSolid() ? 1 : 0,\r\n                                neighbors[2][0] != null && neighbors[2][0].isSolid() ? 1 : 0,\r\n                                neighbors[0][1] != null && neighbors[0][1].isSolid() ? 1 : 0,\r\n                                neighbors[1][1] != null && neighbors[1][1].isSolid() ? 1 : 0,\r\n                                neighbors[2][1] != null && neighbors[2][1].isSolid() ? 1 : 0,\r\n                                neighbors[0][2] != null && neighbors[0][2].isSolid() ? 1 : 0,\r\n                                neighbors[1][2] != null && neighbors[1][2].isSolid() ? 1 : 0,\r\n                                neighbors[2][2] != null && neighbors[2][2].isSolid() ? 1 : 0,\r\n                        }));\r\n                        Shaders.waterShader.setUniformf(\"u_tilePosition\", new Vector2(tile.x, tile.y));\r\n                        g.resetShader();\r\n                        g.drawImageWithShader(Shaders.waterShader, tile.getImage(), tile.x * 64, tile.y * 64, 64, 64, tile.getDrawSection());\r\n                    }\r\n                } else if (tile.hasTag(\"windy\")) {\r\n                    Tile[][] neighbors = getNeighbors(tile.x, tile.y, background);\r\n                    Shaders.windyShader.bind();\r\n                    Shaders.windyShader.setUniformf(\"u_attached\", neighbors[1][2] != null && neighbors[1][2].isSolid() ? 1 : 0);\r\n                    Shaders.windyShader.setUniformf(\"u_tilePosition\", new Vector2(tile.x, tile.y));\r\n                    g.resetShader();\r\n                    g.drawImageWithShader(Shaders.windyShader, tile.getImage(), tile.x * 64, tile.y * 64, 64, 64, tile.getDrawSection());\r\n                } else if (tile.hasTag(\"vines\")) {\r\n                    Shaders.vineShader.bind();\r\n                    float length = -1;\r\n                    float vinePosition = -1;\r\n                    if (getTileAt(\"normal\", tile.x, tile.y + 1) != null) {\r\n                        if (getTileAt(\"normal\", tile.x, tile.y + 1).isSolid()) {\r\n                            vinePosition = 0;\r\n                        } else {\r\n                            int i = 1;\r\n                            while (getTileAt(\"normal\", tile.x, tile.y + i) != null && getTileAt(\"normal\", tile.x, tile.y + i).hasTag(\"vines\")) {\r\n                                i++;\r\n                            }\r\n                            vinePosition = i;\r\n                        }\r\n                    }\r\n                    if (getTileAt(\"normal\", tile.x, tile.y - 1) != null) {\r\n                        int i = 1;\r\n                        while (getTileAt(\"normal\", tile.x, tile.y - i) != null && getTileAt(\"normal\", tile.x, tile.y - i).hasTag(\"vines\")) {\r\n                            i++;\r\n                        }\r\n                        length = i + vinePosition - 1;\r\n                    } else {\r\n                        length = vinePosition;\r\n                    }\r\n\r\n                    length++;\r\n                    vinePosition++;\r\n\r\n                    Shaders.vineShader.setUniformf(\"u_attached\", vinePosition);\r\n                    Shaders.vineShader.setUniformf(\"u_vineLength\", length);\r\n                    Shaders.vineShader.setUniformf(\"u_tilePosition\", new Vector2(tile.x, tile.y));\r\n                    g.resetShader();\r\n                    g.drawImageWithShader(Shaders.vineShader, tile.getImage(), tile.x * 64, tile.y * 64, 64, 64, tile.getDrawSection());\r\n                } else {\r\n                    tile.render(false, g);\r\n                }\r\n            }\r\n            if (tile.hasTag(\"text\")) {\r\n                if (inGame()) {\r\n                    if (!drawText) {\r\n                        leftovers.add(tile);\r\n                    } else {\r\n                        if (tile.extra == null) tile.extra = \"\";\r\n                        float size = 0.8f;\r\n                        if (tile.tileType == 0) size = 1f;\r\n                        else if (tile.tileType == 2) size = 0.7f;\r\n\r\n                        LittleH.borderedFont.setColor(new Color(1, 1, 1, 1 - Math.min(1, player.getCenter().dst2(tile.x * 64 + 32, tile.y * 64 + 32) / (1280f * 1280f))));\r\n\r\n                        g.drawString(tile.extra, LittleH.borderedFont, tile.x * 64 + 32, tile.y * 64 + 32, size * LittleH.defaultFontScale, 0);\r\n\r\n                        LittleH.borderedFont.setColor(Color.WHITE);\r\n                    }\r\n                }\r\n            }\r\n            if (tile.hasTag(\"levitating\")) {\r\n                g.drawImage(tile.getImage(), tile.x * 64, tile.y * 64 + MathUtils.sinDeg(LittleH.getTick() / 2f + (tile.x + tile.y) * 15) * 8, 64, 64, tile.getDrawSection());\r\n            }\r\n            g.resetColor();\r\n        }\r\n\r\n        return leftovers;\r\n    }\r\n\r\n    public void renderHUD(Graphics g) {\r\n        g.resetColor();\r\n        g.resetTint();\r\n        g.resetShader();\r\n        if (timeLimit > -1) {\r\n            g.draw(Images.getImage(\"ui/buttons/icons/clock.png\"), -MainMenu.relZeroX() - 72, -MainMenu.relZeroY() - 72, 64, 64);\r\n            g.drawString(\"\" + timeLimit, LittleH.borderedFont, -MainMenu.relZeroX() - 80, -MainMenu.relZeroY() - 28 - 14, LittleH.defaultFontScale, 1);\r\n        }\r\n        g.drawString(getTime(), LittleH.borderedFont, MainMenu.relZeroX() + 16, -MainMenu.relZeroY() - 28, LittleH.defaultFontScale, -1);\r\n    }\r\n\r\n    public void reset() {\r\n        resetToCheckpointState();\r\n        GunMode.bullets.clear();\r\n        player = null;\r\n        startGame(startPos);\r\n    }\r\n\r\n    public Point getStartPos() {\r\n        for (Tile tile : getBaseLayer().allTiles) {\r\n            if (tile.hasTag(\"start\")) {\r\n                return new Point(tile.x, tile.y);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void notify(String notification, int... data) {\r\n        for (Tile tile : getBaseLayer().notifiableTiles) {\r\n            if (tile.hasTag(notification)) {\r\n                tile.notify(this, notification, data);\r\n            }\r\n            if (tile.hasTag(\"notify\")) {\r\n                for (String string : tile.tags.getTagParameters(\"notify\")) {\r\n                    if (string.equals(notification))\r\n                        tile.notify(this, notification, data);\r\n                }\r\n            }\r\n        }\r\n        for (Tile tile : getBackgroundLayer().notifiableTiles) {\r\n            if (tile.hasTag(notification)) {\r\n                tile.notify(this, notification, data);\r\n            }\r\n            if (tile.hasTag(\"notify\")) {\r\n                for (String string : tile.tags.getTagParameters(\"notify\")) {\r\n                    if (string.equals(notification))\r\n                        tile.notify(this, notification, data);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void showTimer() {\r\n        startPopup(getSplit(), 120);\r\n    }\r\n\r\n    public String getSplit() {\r\n        long time = currentTime - checkedTime;\r\n        checkedTime = currentTime;\r\n        return LittleH.formatTime(time);\r\n    }\r\n\r\n    public String getTime() {\r\n        long time = currentTime;\r\n        return LittleH.formatTime(time);\r\n    }\r\n\r\n    public List<Enemy> getEnemies() {\r\n        return enemies;\r\n    }\r\n    public List<GameObject> getGameObjects() {\r\n        return gameObjects;\r\n    }\r\n\r\n    public void setDialogue(Dialogue dialogue) {\r\n        if (!ignoreDialogue)\r\n            this.currentDialogue = dialogue;\r\n    }\r\n\r\n    public boolean hasDialogue() {\r\n        return currentDialogue != null;\r\n    }\r\n\r\n    public void ignoreDialogue() {\r\n        ignoreDialogue = true;\r\n    }\r\n\r\n    public void resumeDialogue() {\r\n        ignoreDialogue = false;\r\n    }\r\n\r\n    public long getTimeMillis() {\r\n        return currentTime;\r\n    }\r\n\r\n    private class Popup {\r\n        private int timeLeft;\r\n        private String text;\r\n\r\n        private Popup(String text, int length) {\r\n            timeLeft = length;\r\n            this.text = text;\r\n        }\r\n\r\n        private void render(Graphics g) {\r\n            LittleH.borderedFont.setColor(new Color(1, 1, 1, Math.min(1, timeLeft / 60f)));\r\n            g.drawString(text, LittleH.borderedFont, 0, 64, LittleH.defaultFontScale, 0);\r\n            timeLeft--;\r\n            LittleH.borderedFont.setColor(Color.WHITE);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/com/sab/littleh/game/level/Level.java b/core/src/com/sab/littleh/game/level/Level.java
--- a/core/src/com/sab/littleh/game/level/Level.java	(revision da44e287090b74d167d943ff8a58b2418f0de4c1)
+++ b/core/src/com/sab/littleh/game/level/Level.java	(date 1708719357637)
@@ -920,6 +920,7 @@
         resetToCheckpointState();
         GunMode.bullets.clear();
         player = null;
+        ignoreDialogue = true;
         startGame(startPos);
     }
 
Index: assets/scripts/base_tags.sab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@grass [ solid, tileset ]\r\n@stone [ solid, tileset ]\r\n@location_bricks [ solid, tileset ]\r\n@sandstone [ solid, tileset ]\r\n@rock [ solid, tileset ]\r\n@snowy_turf [ solid, tileset ]\r\n@ice [ solid, slippery, tileset ]\r\n@slick_block [ solid, slick, tileset ]\r\n@malice [ small, death, tileset ]\r\n@bounce [ bounce, tileset, enemy_walkable ]\r\n@water [ water, tileset, special_render, invisible, render_normal, small, ignore_background ]\r\n@checkpoint [ checkpoint_saved, checkpoint ]\r\n@strong_checkpoint [ checkpoint_saved, checkpoint, notifiable, notify_checkpoint, notified_reset_type ]\r\n@coin [ checkpoint_saved, pickup, coin, states(4) ]\r\n@coin_box [ checkpoint_saved, coin_box, notifiable, notify_all_coins, notified_alternate_type, states(15) ]\r\n@color_cube [ states(15) ]\r\n@dynamic_color_cube [ string_picker(Set the hex code for this tile:\\\\n# | (\\[A-F\\]|\\[0-9\\]|\\[a-f\\]) | 6), render_color, states(4) ]\r\n@dialogue_trigger [ string_picker(Set the path to the dialogue file:\\\\n| | -1), pickup, invisible, dialogue, ignore_background ]\r\n@end [ checkpoint_saved, ambient_particles, update, pickup, levitating, special_render, end, invisible ]\r\n@enemy [ enemy, invisible, checkpoint_saved, update, states(5) ]\r\n@key [ checkpoint_saved, pickup, key ]\r\n@key_box [ checkpoint_saved, solid, key_box ]\r\n@evil_key [ checkpoint_saved, ambient_particles, update, pickup, levitating, special_render, evil, key, invisible ]\r\n@evil_key_box [ checkpoint_saved, solid, evil, key_box ]\r\n@h_fragment [ end, ambient_particles, update, states(7), pickup, levitating, special_render, invisible ]\r\n@statues [ states(8) ]\r\n@half_spike [ multi_hitbox, small_triangle, death, states(4) ]\r\n@invisible_death [ death, invisible ]\r\n@invisiblock [ solid, invisible, slick ]\r\n@one_way [ quarter, solid, one_way, states(4) ]\r\n@power_fruit [ pickup, ambient_particles, update, checkpoint_saved, powerup, states(8), levitating, invisible, special_render ]\r\n@power_fruit_spawner [ invisible, ignore_background, update, respawn_power_fruit, notify(game_start) ]\r\n@spawn [ start ]\r\n@mud [ checkpoint_saved, solid, crumbling, states(2) ]\r\n@text [ string_picker(Set the text for this tile:\\\\n | | -1), text, invisible, states(3), post_render ]\r\n@timer [ pickup, timer, states(4) ]\r\n@enemy_box [ checkpoint_saved, enemy_box, states(10), notified_alternate_type ]\r\n@grass_decor [ states(12), windy, special_render, render_normal, invisible ]\r\n@rocks_decor [ states(16) ]\r\n@vines_decor [ states(8), vines, special_render, render_normal, invisible ]\r\n@gravity_swapper [ states(6), pickup, checkpoint_saved, even_pickup, gravity_swapper ]\r\n@jump_pearl [ pickup, jump_refresh, ambient_particles, update, checkpoint_saved, levitating, invisible, special_render ]\r\n@slope [ states(4), solid, slope, normal_slope ]\r\n@red_wire [ tileset, wire, red_wire, exclusive_tiling(red_wire | junction) ]\r\n@yellow_wire [ tileset, wire, yellow_wire, exclusive_tiling(yellow_wire | junction) ]\r\n@green_wire [ tileset, wire, green_wire, exclusive_tiling(green_wire | junction) ]\r\n@blue_wire [ tileset, wire, blue_wire, exclusive_tiling(blue_wire | junction) ]\r\n@button [ wiring_toggle, quarter, states(4), checkpoint_saved ]\r\n@actuator [ wiring_activated, actuator, checkpoint_saved, notify(game_start) ]\r\n@prop [ prop, invisible, string_picker(Set a path to the prop image:\\\\n | | -1), notify(game_start), ignore_background ]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/scripts/base_tags.sab b/assets/scripts/base_tags.sab
--- a/assets/scripts/base_tags.sab	(revision da44e287090b74d167d943ff8a58b2418f0de4c1)
+++ b/assets/scripts/base_tags.sab	(date 1708671959107)
@@ -41,10 +41,10 @@
 @gravity_swapper [ states(6), pickup, checkpoint_saved, even_pickup, gravity_swapper ]
 @jump_pearl [ pickup, jump_refresh, ambient_particles, update, checkpoint_saved, levitating, invisible, special_render ]
 @slope [ states(4), solid, slope, normal_slope ]
-@red_wire [ tileset, wire, red_wire, exclusive_tiling(red_wire | junction) ]
-@yellow_wire [ tileset, wire, yellow_wire, exclusive_tiling(yellow_wire | junction) ]
-@green_wire [ tileset, wire, green_wire, exclusive_tiling(green_wire | junction) ]
-@blue_wire [ tileset, wire, blue_wire, exclusive_tiling(blue_wire | junction) ]
-@button [ wiring_toggle, quarter, states(4), checkpoint_saved ]
-@actuator [ wiring_activated, actuator, checkpoint_saved, notify(game_start) ]
+@red_wire [ tileset, wire, red_wire, exclusive_tiling(red_wire | wiring_component) ]
+@yellow_wire [ tileset, wire, yellow_wire, exclusive_tiling(yellow_wire | wiring_component) ]
+@green_wire [ tileset, wire, green_wire, exclusive_tiling(green_wire | wiring_component) ]
+@blue_wire [ tileset, wire, blue_wire, exclusive_tiling(blue_wire | wiring_component) ]
+@button [ power_source, quarter, states(4), checkpoint_saved ]
+@actuator [ powered, actuator, checkpoint_saved, wiring_component, notify(game_start), states(2) ]
 @prop [ prop, invisible, string_picker(Set a path to the prop image:\\n | | -1), notify(game_start), ignore_background ]
Index: assets/shaders/water.fsh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>uniform mat4 u_projTrans;\r\n\r\nvarying vec4 v_color;\r\nvarying vec2 v_texCoords;\r\n\r\nuniform sampler2D u_texture;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = texture2D(u_texture, v_texCoords);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/shaders/water.fsh b/assets/shaders/water.fsh
--- a/assets/shaders/water.fsh	(revision da44e287090b74d167d943ff8a58b2418f0de4c1)
+++ b/assets/shaders/water.fsh	(date 1708671109012)
@@ -4,8 +4,14 @@
 varying vec2 v_texCoords;
 
 uniform sampler2D u_texture;
+uniform float u_time;
+uniform vec2 u_tilePosition;
 
 void main()
 {
-    gl_FragColor = texture2D(u_texture, v_texCoords);
+    vec4 color = texture2D(u_texture, v_texCoords);
+
+    color.r = max(0, color.r - mod(u_time, 1));
+
+    gl_FragColor = color;
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"little_h:jar\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"965e289a-d713-4277-9876-48fb620d91fe\" name=\"Changes\" comment=\"Fixed MASSIVE inefficiency when creating and copying tiles\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/assets/scripts/base_tags.sab\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/assets/scripts/base_tags.sab\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/assets/shaders/water.fsh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/assets/shaders/water.fsh\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelEditor.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelEditor.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/Tile.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/Tile.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/maps/test.map\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/maps/test.map\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <task path=\"$PROJECT_DIR$/desktop\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"desktop\" type=\"2d1252cf:ModuleNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"desktop\" type=\"2d1252cf:ModuleNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Little-H-Deluxe\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"desktop\" type=\"2d1252cf:ModuleNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"other\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"GLSL Shader\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"1a0a8d7a-7c9b-4bce-8a8d-7f4f15a23c48\" />\r\n        <option name=\"url\" value=\"https://github.com/AshQuimby/Little-H-Deluxe.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MacroExpansionManager\">\r\n    <option name=\"directoryName\" value=\"gr0up0vx\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2SSJdCFaG7qveJnuslte7kF3uE1\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"com.google.cloudcode.ide_session_index\": \"20240222_0005\",\r\n    \"last_opened_file_path\": \"C:/Users/ianaa/Documents/The Little H Rebake/little_h/assets/shaders\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"com.sab.littleh.mainmenu\" />\r\n      <recent name=\"com.sab.littleh.game.level\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\shaders\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\maps\\summit\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\scripts\\campaign\\overworld\\levels\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\maps\\desert\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\local\\dialogues\\en\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\resources\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\shaders\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\images\\campaign\\visual_novel\\portraits\" />\r\n      <recent name=\"C:\\Users\\ianaa\\Documents\\The Little H Rebake\\little_h\\assets\\local\\texts\\en\" />\r\n    </key>\r\n    <key name=\"MoveInnerDialog.RECENTS_KEY\">\r\n      <recent name=\"com.sab.littleh.util.sab_format\" />\r\n      <recent name=\"com.sab.littleh.util\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"com.sab.littleh.campaign\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.sab.littleh.game.entity\" />\r\n      <recent name=\"com.sab.littleh.campaign.overworld\" />\r\n      <recent name=\"com.sab.littleh.net\" />\r\n      <recent name=\"com.sab.littleh.mainmenu\" />\r\n      <recent name=\"com.sab.littleh.game.entity.enemy\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.DesktopLauncher\">\r\n    <configuration name=\"DesktopLauncher\" type=\"Application\" factoryName=\"Application\" singleton=\"false\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.sab.littleh.DesktopLauncher\" />\r\n      <module name=\"little_h.desktop.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.sab.littleh.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LittleHServer\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.sab.littleh.net.LittleHServer\" />\r\n      <module name=\"little_h.core.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.sab.littleh.net.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Little-H-Deluxe [run]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"run\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Little-H-Deluxe:desktop [run]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$/desktop\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"run\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.LittleHServer\" />\r\n      <item itemvalue=\"Application.DesktopLauncher\" />\r\n      <item itemvalue=\"Gradle.Little-H-Deluxe [run]\" />\r\n      <item itemvalue=\"Gradle.Little-H-Deluxe:desktop [run]\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.Little-H-Deluxe:desktop [run]\" />\r\n        <item itemvalue=\"Gradle.Little-H-Deluxe [run]\" />\r\n        <item itemvalue=\"Application.DesktopLauncher\" />\r\n        <item itemvalue=\"Application.DesktopLauncher\" />\r\n        <item itemvalue=\"Application.DesktopLauncher\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"965e289a-d713-4277-9876-48fb620d91fe\" name=\"Changes\" comment=\"Tile tag system updates\" />\r\n      <created>1689134133824</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1689134133824</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial Commit\">\r\n      <created>1691388722702</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1691388722702</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Push from United Kingdom\">\r\n      <created>1692470606635</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692470606635</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Back in the states\">\r\n      <created>1692897740581</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692897740581</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Back in the states\">\r\n      <created>1692897755496</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692897755496</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Back in the states\">\r\n      <created>1692921631860</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692921631860</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Updates with background implementation\">\r\n      <created>1692922031819</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692922031819</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Updates with background implementation\">\r\n      <created>1692923258379</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692923258379</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692923282341</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692923282341</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692923419205</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692923419205</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692924234254</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692924234254</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Attempting to fix issues with .idea\">\r\n      <created>1692924899833</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692924899833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692925076253</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692925076253</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692925942565</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692925942565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692926164299</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692926164300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692926325325</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692926325325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692926349892</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692926349892</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Fixing crash on MacOS\">\r\n      <created>1692929105784</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692929105784</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Map settings are shown when level starts or when Shift is held. Splish sound effect added. TileSelections fixed.\">\r\n      <created>1692934842721</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692934842721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Map settings are shown when level starts or when Shift is held. Splish sound effect added. TileSelections fixed.\">\r\n      <created>1692939566784</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692939566784</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Bug Squashing\">\r\n      <created>1692988273888</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692988273888</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Glitch causing enemies to not respawn fixed. More hotkeys added for tools.\">\r\n      <created>1692990277245</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1692990277245</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Enemy updates\">\r\n      <created>1693003651026</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693003651026</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Fixed bugs, added stone mode. Updated music tracks.\">\r\n      <created>1693343531477</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693343531477</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Added pause menus\">\r\n      <created>1693349961043</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693349961043</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Completely overhauled controls\">\r\n      <created>1693375699030</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693375699030</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Completely overhauled controls\">\r\n      <created>1693375733042</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693375733042</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Added decor\">\r\n      <created>1693449837790</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693449837790</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Big Updates\">\r\n      <created>1693519680639</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693519680639</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Big Updates\">\r\n      <created>1693539086566</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1693539086566</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Campaign stuff\">\r\n      <created>1694756765305</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694756765305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Campaign stuff\">\r\n      <created>1695004421024</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695004421024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"Reworked Layer System\">\r\n      <created>1703451422040</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703451422040</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"A bunch of shader stuff added, alpha broke and I cant seem to properly be able to apply shader's to Backpacker H's hair. Anti-gravity and a jump restoring pearl have also been added. Tutorial level has been updated.\">\r\n      <created>1705735610732</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705735610732</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"Gitignore updates\">\r\n      <created>1708547699961</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708547699961</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"Tile tag system updates\">\r\n      <created>1708576768628</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708576768628</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"Made tilesheets procedurally add padding to fix a graphical issue. Tag system fixes. Level editor can now select tile states again. Walouis Pinball no longer crashes after loading. Forest and Snake Train rebalanced.\">\r\n      <created>1708646609341</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708646609341</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"Reworks on notification system have started, prop fixes, padding fixes.\">\r\n      <created>1708660911038</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708660911038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"Fixed issues related to crouching\">\r\n      <created>1708662066986</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708662066986</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"Fixed an issue when creating settings file\">\r\n      <created>1708663025384</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708663025384</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"Bug fixes. Added malice menace to Infection and made some minor changes to tiles and tags\">\r\n      <created>1708667924629</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708667924629</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"41\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"campaign\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Attempting to fix issues with .idea\" />\r\n    <MESSAGE value=\"Fixing crash on MacOS\" />\r\n    <MESSAGE value=\"Map settings are shown when level starts or when Shift is held. Splish sound effect added. TileSelections fixed.\" />\r\n    <MESSAGE value=\"Bug Squashing\" />\r\n    <MESSAGE value=\"Glitch causing enemies to not respawn fixed. More hotkeys added for tools.\" />\r\n    <MESSAGE value=\"Enemy updates\" />\r\n    <MESSAGE value=\"Grid shows up when editing background\" />\r\n    <MESSAGE value=\"Fixed regex issue\" />\r\n    <MESSAGE value=\"Fixed bugs, added stone mode. Updated music tracks.\" />\r\n    <MESSAGE value=\"Added pause menus\" />\r\n    <MESSAGE value=\"Completely overhauled controls\" />\r\n    <MESSAGE value=\"Added decor\" />\r\n    <MESSAGE value=\"Big Updates\" />\r\n    <MESSAGE value=\"Campaign stuff\" />\r\n    <MESSAGE value=\"Reworked Layer System\" />\r\n    <MESSAGE value=\"A bunch of shader stuff added, alpha broke and I cant seem to properly be able to apply shader's to Backpacker H's hair. Anti-gravity and a jump restoring pearl have also been added. Tutorial level has been updated.\" />\r\n    <MESSAGE value=\"Fixed water shader issues with corners\" />\r\n    <MESSAGE value=\"Gitignore updates\" />\r\n    <MESSAGE value=\"Tile tag system updates\" />\r\n    <MESSAGE value=\"Made tilesheets procedurally add padding to fix a graphical issue. Tag system fixes. Level editor can now select tile states again. Walouis Pinball no longer crashes after loading. Forest and Snake Train rebalanced.\" />\r\n    <MESSAGE value=\"Reworks on notification system have started, prop fixes, padding fixes.\" />\r\n    <MESSAGE value=\"Fixed issues related to crouching\" />\r\n    <MESSAGE value=\"Fixed an issue when creating settings file\" />\r\n    <MESSAGE value=\"Bug fixes. Added malice menace to Infection and made some minor changes to tiles and tags\" />\r\n    <MESSAGE value=\"Fixed MASSIVE inefficiency when creating and copying tiles\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed MASSIVE inefficiency when creating and copying tiles\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/little_h$DesktopLauncher__1_.ic\" NAME=\"DesktopLauncher (1) Coverage Results\" MODIFIED=\"1689325330492\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>com.sab.littleh.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision da44e287090b74d167d943ff8a58b2418f0de4c1)
+++ b/.idea/workspace.xml	(date 1708719357812)
@@ -9,12 +9,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="965e289a-d713-4277-9876-48fb620d91fe" name="Changes" comment="Fixed MASSIVE inefficiency when creating and copying tiles">
+    <list default="true" id="965e289a-d713-4277-9876-48fb620d91fe" name="Changes" comment="Tag system updates for working on wiring">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/assets/scripts/base_tags.sab" beforeDir="false" afterPath="$PROJECT_DIR$/assets/scripts/base_tags.sab" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/assets/shaders/water.fsh" beforeDir="false" afterPath="$PROJECT_DIR$/assets/shaders/water.fsh" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/Level.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/Level.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelEditor.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/level/LevelEditor.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/Tile.java" beforeDir="false" afterPath="$PROJECT_DIR$/core/src/com/sab/littleh/game/tile/Tile.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/maps/test.map" beforeDir="false" afterPath="$PROJECT_DIR$/maps/test.map" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -113,7 +113,7 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
-    "com.google.cloudcode.ide_session_index": "20240222_0005",
+    "com.google.cloudcode.ide_session_index": "20240223_0001",
     "last_opened_file_path": "C:/Users/ianaa/Documents/The Little H Rebake/little_h/assets/shaders"
   }
 }]]></component>
@@ -525,7 +525,14 @@
       <option name="project" value="LOCAL" />
       <updated>1708667924629</updated>
     </task>
-    <option name="localTasksCounter" value="41" />
+    <task id="LOCAL-00041" summary="Tag system updates for working on wiring">
+      <created>1708672001615</created>
+      <option name="number" value="00041" />
+      <option name="presentableId" value="LOCAL-00041" />
+      <option name="project" value="LOCAL" />
+      <updated>1708672001615</updated>
+    </task>
+    <option name="localTasksCounter" value="42" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -558,7 +565,6 @@
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-    <MESSAGE value="Attempting to fix issues with .idea" />
     <MESSAGE value="Fixing crash on MacOS" />
     <MESSAGE value="Map settings are shown when level starts or when Shift is held. Splish sound effect added. TileSelections fixed." />
     <MESSAGE value="Bug Squashing" />
@@ -583,7 +589,8 @@
     <MESSAGE value="Fixed an issue when creating settings file" />
     <MESSAGE value="Bug fixes. Added malice menace to Infection and made some minor changes to tiles and tags" />
     <MESSAGE value="Fixed MASSIVE inefficiency when creating and copying tiles" />
-    <option name="LAST_COMMIT_MESSAGE" value="Fixed MASSIVE inefficiency when creating and copying tiles" />
+    <MESSAGE value="Tag system updates for working on wiring" />
+    <option name="LAST_COMMIT_MESSAGE" value="Tag system updates for working on wiring" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/little_h$DesktopLauncher__1_.ic" NAME="DesktopLauncher (1) Coverage Results" MODIFIED="1689325330492" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
